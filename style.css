article, aside, details, figcaption, figure, footer, header, hgroup, nav, section, summary {
  display: block; }

audio, canvas, video {
  display: inline-block; }

audio:not([controls]) {
  display: none;
  height: 0; }

[hidden], template {
  display: none; }

html {
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%; }

body {
  margin: 0; }

a {
  background: transparent; }
  a:hover, a:active {
    outline: 0; }

/* @if \$normalize_headings == true {
    h1 {
        font-size: \$h1_font_size;
        margin: \$h1_margin;
    }

    h2 {
        font-size: \$h2_font_size;
        margin: \$h2_margin;
    }

    h3 {
        font-size: \$h3_font_size;
        margin: \$h3_margin;
    }

    h4 {
        font-size: \$h4_font_size;
        margin: \$h4_margin;
    }

    h5 {
        font-size: \$h5_font_size;
        margin: \$h5_margin;
    }

    h6 {
        font-size: \$h6_font_size;
        margin: \$h6_margin;
    }
} */
abbr[title] {
  border-bottom: 1px dotted; }

b, strong {
  font-weight: bold; }

dfn {
  font-style: italic; }

mark {
  background: #ff0;
  color: #000; }

code, kbd, pre, samp {
  font-family: monospace, serif;
  font-size: 1em; }

pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word; }

q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

q:before, q:after {
  content: '';
  content: none; }

/* /small {
    font-size: 80%;
} */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

img {
  border: 0; }

svg:not(:root) {
  overflow: hidden; }

figure {
  margin: 0; }

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

legend {
  border: 0;
  padding: 0;
  white-space: normal; }

button, input, select, textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
  vertical-align: baseline; }

button, input {
  line-height: normal; }

button, select {
  text-transform: none; }

button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer; }

button[disabled], input[disabled] {
  cursor: default; }

button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

textarea {
  overflow: auto;
  vertical-align: top; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

input[type="search"] {
  -webkit-appearance: textfield;
  -moz-box-sizing: content-box;
  box-sizing: content-box; }
  input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }
input[type="checkbox"], input[type="radio"] {
  -moz-box-sizing: border-box;
       box-sizing: border-box;
  padding: 0; }

html {
  font-size: 16px;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased; }

body {
  color: #333;
  line-height: 1.5;
  font-family: News Cycle, sans-serif;
  -moz-background-size: auto 24px;
       background-size: auto 24px;
  margin: 0; }

[class*='__heading'] {
  color: #267e64;
  font-family: Playfair Display, serif;
  font-size: 40px;
  font-size: 2.5rem;
  font-weight: 400;
  line-height: 1;
  margin-bottom: 32px;
  margin-bottom: 2rem; }

[class*=__button], input[type="button"], input[type="reset"] {
  border: 1px solid #267e64;
  display: inline-block;
  font-family: Playfair Display, serif;
  font-size: 19px;
  font-size: 1.2rem;
  font-style: italic;
  text-align: center;
  padding: 12px 48px;
  padding: .75rem 3rem;
  text-decoration: none;
  /*Items for transition */
  background-color: transparent;
  color: #267e64;
  /*Transition settings */
  -webkit-transition: all .2s ease;
     -moz-transition: all .2s ease;
       -o-transition: all .2s ease;
          transition: all .2s ease; }
  [class*=__button]:hover, input[type="button"]:hover, input[type="reset"]:hover {
    /*These will transition on hover */
    background-color: #267e64;
    color: #fff; }

.clearfix:after {
  content: "";
  display: table;
  clear: both; }

img, iframe, embed {
  width: 100%; }

.container {
  background-color: #fff;
  border-left: 1px solid #ccc;
  border-right: 1px solid #ccc;
  margin: 0 auto;
  max-width: 1200px; }

[class*='col-'] {
  display: table-cell;
  vertical-align: middle; }

.col-2-12 {
  width: 16.66667%; }

.col-3-12 {
  width: 25%; }

.col-4-12 {
  width: 33.33333%; }

.col-5-12 {
  width: 41.66667%; }

.col-6-12 {
  width: 50%; }

.col-7-12 {
  width: 58.33333%; }

.col-8-12 {
  width: 66.66667%; }

.col-9-12 {
  width: 75%; }

.col-10-12 {
  width: 83.33333%; }

.col-11-12 {
  width: 91.66667%; }

.breadcrumb {
  padding: 16px 32px 0 32px;
  padding: 1rem 2rem 0 2rem;
  font-size: 14px; }
  .breadcrumb a {
    color: #267e64; }
    .breadcrumb a:hover {
      color: #455652; }
  .breadcrumb span {
    color: #7f7e7e; }

* {
  margin: 0;
  padding: 0;
  -moz-box-sizing: border-box;
       box-sizing: border-box; }
  *::after, *::before {
    -moz-box-sizing: border-box;
         box-sizing: border-box; }

body {
  background-color: #eceee6;
  padding: 0; }

a {
  text-decoration: none; }

table {
  margin: 0 0 1.5em;
  width: 100%; }

tr {
  border-bottom: 1px solid #e5e6e7; }
  tr:nth-child(even) {
    background-color: #f8f8f8; }

td {
  vertical-align: top;
  padding: 10px 5px; }

thead {
  background-color: #e5e6e7; }
  thead th {
    font-weight: 600;
    text-align: left;
    padding: 5px; }

.nav-minor {
  display: block;
  text-align: right; }
  .nav-minor__container {
    background-color: #fff;
    border-left: 1px solid #ccc;
    border-right: 1px solid #ccc;
    margin: 0 auto;
    padding-right: 24px;
    padding-right: 1.5rem;
    padding-top: 16px;
    padding-top: 1rem;
    max-width: 1200px; }
  .nav-minor li {
    display: inline-block; }
    .nav-minor li:after {
      display: inline-block;
      content: ' | ';
      color: #267e64;
      margin: 0 2px; }
    .nav-minor li:nth-child(3):after {
      content: ' '; }
    .nav-minor li:last-child a {
      font-weight: bold; }
  .nav-minor__link {
    color: #333;
    display: inline-block;
    padding: 0 0px 0 8px;
    padding: 0 0rem 0 .5rem; }
    .nav-minor__link:hover {
      color: #267e64; }

.site-map a {
  color: #333; }
  .site-map a:hover {
    color: #267e64; }

a.cd-nav-item:hover img {
  opacity: .7 !important;
  filter: alpha(opacity=70); }
a.cd-nav-item:hover h3 {
  color: #455652 !important; }

input[type="search"]::-ms-clear {
  display: none; }

input[type="search"]::-webkit-search-decoration, input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-results-button, input[type="search"]::-webkit-search-results-decoration {
  display: none; }

/* --------------------------------
 *
 *Main components
 *
 *--------------------------------* */
.cd-main-content, .cd-main-header {
  /* Force Hardware Acceleration in WebKit */
  -webkit-transform: translateZ(0);
     -moz-transform: translateZ(0);
          transform: translateZ(0);
  will-change: transform; }
  .cd-main-content ul, .cd-main-header ul {
    list-style: none; }

.cd-main-content {
  position: relative;
  -webkit-transition: -webkit-transform 0.3s;
     -moz-transition: -moz-transform 0.3s;
       -o-transition: -o-transform 0.3s;
          transition: transform 0.3s; }

.cd-main-header {
  font-family: Playfair Display, serif;
  position: relative;
  -webkit-transition: -webkit-transform 0.3s;
     -moz-transition: -moz-transform 0.3s;
       -o-transition: -o-transform 0.3s;
          transition: transform 0.3s; }

.cd-main-content {
  min-height: 100vh;
  z-index: 2; }

.cd-main-header {
  height: 50px;
  background: #fff;
  z-index: 3;
  border-bottom: 1px solid #e5e6e7; }
  .nav-is-fixed .cd-main-header {
    /* add .nav-is-fixed class to body if you want a fixed navigation on > 1024px */
    position: fixed;
    top: 0;
    left: 0;
    width: 100%; }

.cd-logo {
  position: absolute;
  top: 12px;
  left: 5%; }
  .cd-logo img {
    display: block; }

.cd-header-buttons {
  position: absolute;
  display: inline-block;
  top: 3px;
  right: 5%; }
  .cd-header-buttons li {
    display: inline-block; }

.cd-search-trigger, .cd-nav-trigger {
  position: relative;
  display: block;
  width: 44px;
  height: 44px;
  overflow: hidden;
  white-space: nowrap;
  /* hide text */
  color: transparent;
  z-index: 3; }

.cd-search-trigger::before, .cd-search-trigger::after {
  /* search icon */
  content: '';
  position: absolute;
  -webkit-transition: opacity 0.3s;
     -moz-transition: opacity 0.3s;
       -o-transition: opacity 0.3s;
          transition: opacity 0.3s;
  /* Force Hardware Acceleration in WebKit */
  -webkit-transform: translateZ(0);
     -moz-transform: translateZ(0);
          transform: translateZ(0);
  -webkit-backface-visibility: hidden;
     -moz-backface-visibility: hidden;
          backface-visibility: hidden; }
.cd-search-trigger::before {
  /* lens */
  top: 11px;
  left: 11px;
  width: 18px;
  height: 18px;
  -moz-border-radius: 50%;
       border-radius: 50%;
  border: 3px solid #455652; }
.cd-search-trigger::after {
  /* handle */
  height: 3px;
  width: 8px;
  background: #455652;
  bottom: 14px;
  right: 11px;
  -webkit-transform: rotate(45deg);
     -moz-transform: rotate(45deg);
      -ms-transform: rotate(45deg);
       -o-transform: rotate(45deg);
          transform: rotate(45deg); }
.cd-search-trigger span {
  /* container for the X icon */
  position: absolute;
  height: 100%;
  width: 100%;
  top: 0;
  left: 0; }
.cd-search-trigger span::before, .cd-search-trigger span::after {
  /* close icon */
  content: '';
  position: absolute;
  display: inline-block;
  height: 3px;
  width: 22px;
  top: 50%;
  margin-top: -2px;
  left: 50%;
  margin-left: -11px;
  background: #455652;
  opacity: 0;
  filter: alpha(opacity=0);
  /* Force Hardware Acceleration in WebKit */
  -webkit-transform: translateZ(0);
     -moz-transform: translateZ(0);
          transform: translateZ(0);
  -webkit-backface-visibility: hidden;
     -moz-backface-visibility: hidden;
          backface-visibility: hidden;
  -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;
     -moz-transition: opacity 0.3s, -moz-transform 0.3s;
       -o-transition: opacity 0.3s, -o-transform 0.3s;
          transition: opacity 0.3s, transform 0.3s; }
.cd-search-trigger span::before {
  -webkit-transform: rotate(45deg);
     -moz-transform: rotate(45deg);
      -ms-transform: rotate(45deg);
       -o-transform: rotate(45deg);
          transform: rotate(45deg); }
.cd-search-trigger span::after {
  -webkit-transform: rotate(-45deg);
     -moz-transform: rotate(-45deg);
      -ms-transform: rotate(-45deg);
       -o-transform: rotate(-45deg);
          transform: rotate(-45deg); }
.cd-search-trigger.search-is-visible::before, .cd-search-trigger.search-is-visible::after {
  /* hide search icon */
  opacity: 0;
  filter: alpha(opacity=0); }
.cd-search-trigger.search-is-visible span::before, .cd-search-trigger.search-is-visible span::after {
  /* show close icon */
  opacity: 1;
  filter: alpha(opacity=100); }
.cd-search-trigger.search-is-visible span::before {
  -webkit-transform: rotate(135deg);
     -moz-transform: rotate(135deg);
      -ms-transform: rotate(135deg);
       -o-transform: rotate(135deg);
          transform: rotate(135deg); }
.cd-search-trigger.search-is-visible span::after {
  -webkit-transform: rotate(45deg);
     -moz-transform: rotate(45deg);
      -ms-transform: rotate(45deg);
       -o-transform: rotate(45deg);
          transform: rotate(45deg); }

.cd-nav-trigger span, .cd-nav-trigger span::before, .cd-nav-trigger span::after {
  /* hamburger icon in CSS */
  position: absolute;
  display: inline-block;
  height: 3px;
  width: 24px;
  background: #455652; }
.cd-nav-trigger span {
  /* line in the center */
  position: absolute;
  top: 50%;
  right: 10px;
  margin-top: -2px;
  -webkit-transition: background 0.3s 0.3s;
     -moz-transition: background 0.3s 0.3s;
       -o-transition: background 0.3s 0.3s;
          transition: background 0.3s 0.3s; }
.cd-nav-trigger span::before, .cd-nav-trigger span::after {
  /* other 2 lines */
  content: '';
  right: 0;
  /* Force Hardware Acceleration in WebKit */
  -webkit-transform: translateZ(0);
     -moz-transform: translateZ(0);
          transform: translateZ(0);
  -webkit-backface-visibility: hidden;
     -moz-backface-visibility: hidden;
          backface-visibility: hidden;
  -webkit-transform-origin: 0% 50%;
     -moz-transform-origin: 0% 50%;
      -ms-transform-origin: 0% 50%;
       -o-transform-origin: 0% 50%;
          transform-origin: 0% 50%;
  -webkit-transition: -webkit-transform 0.3s 0.3s;
     -moz-transition: -moz-transform 0.3s 0.3s;
       -o-transition: -o-transform 0.3s 0.3s;
          transition: transform 0.3s 0.3s; }
.cd-nav-trigger span::before {
  /* menu icon top line */
  top: -6px; }
.cd-nav-trigger span::after {
  /* menu icon bottom line */
  top: 6px; }
.cd-nav-trigger.nav-is-visible span {
  /* hide line in the center */
  background: rgba(69, 86, 82, 0); }
.cd-nav-trigger.nav-is-visible span::before, .cd-nav-trigger.nav-is-visible span::after {
  /* keep visible other 2 lines */
  background: #455652; }
.cd-nav-trigger.nav-is-visible span::before {
  -webkit-transform: translateX(4px) translateY(-3px) rotate(45deg);
     -moz-transform: translateX(4px) translateY(-3px) rotate(45deg);
      -ms-transform: translateX(4px) translateY(-3px) rotate(45deg);
       -o-transform: translateX(4px) translateY(-3px) rotate(45deg);
          transform: translateX(4px) translateY(-3px) rotate(45deg); }
.cd-nav-trigger.nav-is-visible span::after {
  -webkit-transform: translateX(4px) translateY(2px) rotate(-45deg);
     -moz-transform: translateX(4px) translateY(2px) rotate(-45deg);
      -ms-transform: translateX(4px) translateY(2px) rotate(-45deg);
       -o-transform: translateX(4px) translateY(2px) rotate(-45deg);
          transform: translateX(4px) translateY(2px) rotate(-45deg); }

.cd-primary-nav, .cd-primary-nav ul {
  position: fixed;
  top: 0;
  right: 0;
  height: 100%;
  width: 260px;
  background: #455652;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
  z-index: 1;
  /* Force Hardware Acceleration in WebKit */
  -webkit-transform: translateZ(0);
     -moz-transform: translateZ(0);
          transform: translateZ(0);
  -webkit-transform: translateX(0);
     -moz-transform: translateX(0);
      -ms-transform: translateX(0);
       -o-transform: translateX(0);
          transform: translateX(0);
  -webkit-transition: -webkit-transform 0.3s;
     -moz-transition: -moz-transform 0.3s;
       -o-transition: -o-transform 0.3s;
          transition: transform 0.3s; }
  .cd-primary-nav a, .cd-primary-nav ul a {
    display: block;
    font-size: 19px;
    font-size: 1.2rem;
    height: 50px;
    line-height: 50px;
    padding: 0 20px;
    color: #fff;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    border-bottom: 1px solid #50645f;
    -webkit-transform: translateZ(0);
       -moz-transform: translateZ(0);
            transform: translateZ(0);
    will-change: transform, opacity;
    -webkit-transition: -webkit-transform 0.3s, opacity 0.3s;
       -moz-transition: -moz-transform 0.3s, opacity 0.3s;
         -o-transition: -o-transform 0.3s, opacity 0.3s;
            transition: transform 0.3s, opacity 0.3s; }
  .cd-primary-nav.is-hidden, .cd-primary-nav ul.is-hidden {
    /* secondary navigations hidden by default */
    -webkit-transform: translateX(100%);
       -moz-transform: translateX(100%);
        -ms-transform: translateX(100%);
         -o-transform: translateX(100%);
            transform: translateX(100%); }
  .cd-primary-nav.moves-out > li > a, .cd-primary-nav ul.moves-out > li > a {
    /* push the navigation items to the left - and lower down opacity - when secondary nav slides in */
    -webkit-transform: translateX(-100%);
       -moz-transform: translateX(-100%);
        -ms-transform: translateX(-100%);
         -o-transform: translateX(-100%);
            transform: translateX(-100%);
    opacity: 0;
    filter: alpha(opacity=0); }

.cd-primary-nav .see-all a {
  /* different style for the See all button on mobile and tablet */
  color: #267e64; }
.cd-primary-nav .cd-nav-gallery .cd-nav-item, .cd-primary-nav .cd-nav-icons .cd-nav-item {
  /* items with picture (or icon) and title */
  height: 80px;
  line-height: 80px; }
  .cd-primary-nav .cd-nav-gallery .cd-nav-item h3, .cd-primary-nav .cd-nav-icons .cd-nav-item h3 {
    overflow: hidden;
    text-overflow: ellipsis; }
.cd-primary-nav .cd-nav-gallery .cd-nav-item img {
  position: absolute;
  display: block;
  height: 40px;
  width: auto;
  left: 20px;
  top: 50%;
  margin-top: -20px; }
.cd-primary-nav .cd-nav-icons .cd-nav-item {
  padding-left: 75px; }
  .cd-primary-nav .cd-nav-icons .cd-nav-item p {
    color: #455652;
    font-size: 20px;
    font-size: 1.3rem;
    /* hide description on small devices */
    display: none; }
  .cd-primary-nav .cd-nav-icons .cd-nav-item::before {
    /* item icon */
    content: '';
    display: block;
    position: absolute;
    left: 20px;
    top: 50%;
    margin-top: -20px;
    width: 40px;
    height: 40px;
    background-repeat: no-repeat;
    background-position: center center;
    -moz-background-size: 40px 40px;
         background-size: 40px 40px; }
  .cd-primary-nav .cd-nav-icons .cd-nav-item.item-1::before {
    background-image: url("/images/line-icon-1.svg"); }
  .cd-primary-nav .cd-nav-icons .cd-nav-item.item-2::before {
    background-image: url("/images/line-icon-2.svg"); }
  .cd-primary-nav .cd-nav-icons .cd-nav-item.item-3::before {
    background-image: url("/images/line-icon-3.svg"); }
  .cd-primary-nav .cd-nav-icons .cd-nav-item.item-4::before {
    background-image: url("/images/line-icon-4.svg"); }
  .cd-primary-nav .cd-nav-icons .cd-nav-item.item-5::before {
    background-image: url("/images/line-icon-5.svg"); }
  .cd-primary-nav .cd-nav-icons .cd-nav-item.item-6::before {
    background-image: url("/images/line-icon-6.svg"); }
  .cd-primary-nav .cd-nav-icons .cd-nav-item.item-7::before {
    background-image: url("/images/line-icon-7.svg"); }
  .cd-primary-nav .cd-nav-icons .cd-nav-item.item-8::before {
    background-image: url("/images/line-icon-8.svg"); }

.has-children > a, .go-back a {
  position: relative; }
  .has-children > a::before, .has-children > a::after, .go-back a::before, .go-back a::after {
    /* arrow icon in CSS - for element with nested unordered lists */
    content: '';
    position: absolute;
    top: 50%;
    margin-top: -1px;
    display: inline-block;
    height: 2px;
    width: 10px;
    background: #5c726d;
    -webkit-backface-visibility: hidden;
       -moz-backface-visibility: hidden;
            backface-visibility: hidden; }
  .has-children > a::before, .go-back a::before {
    -webkit-transform: rotate(45deg);
       -moz-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
         -o-transform: rotate(45deg);
            transform: rotate(45deg); }
  .has-children > a::after, .go-back a::after {
    -webkit-transform: rotate(-45deg);
       -moz-transform: rotate(-45deg);
        -ms-transform: rotate(-45deg);
         -o-transform: rotate(-45deg);
            transform: rotate(-45deg); }

.has-children > a {
  padding-right: 40px; }
  .has-children > a::before, .has-children > a::after {
    /* arrow goes on the right side - children navigation */
    right: 20px;
    -webkit-transform-origin: 9px 50%;
       -moz-transform-origin: 9px 50%;
        -ms-transform-origin: 9px 50%;
         -o-transform-origin: 9px 50%;
            transform-origin: 9px 50%; }

.cd-primary-nav .go-back a {
  padding-left: 40px; }
  .cd-primary-nav .go-back a::before, .cd-primary-nav .go-back a::after {
    /* arrow goes on the left side - go back button */
    left: 20px;
    -webkit-transform-origin: 1px 50%;
       -moz-transform-origin: 1px 50%;
        -ms-transform-origin: 1px 50%;
         -o-transform-origin: 1px 50%;
            transform-origin: 1px 50%; }

.cd-search {
  float: right; }
  .cd-search form {
    position: relative; }
  .cd-search input[type="submit"] {
    background-image: url("/images/search-icon.png");
    background-repeat: no-repeat;
    background-color: transparent;
    display: inline-block;
    text-indent: -99999px;
    height: 22px;
    width: 22px;
    -webkit-appearance: none;
    border: 0;
    position: absolute;
    top: 6px;
    right: 3px;
    -moz-background-size: 75%;
         background-size: 75%; }
  .cd-search input[type="search"] {
    padding-left: 10px;
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    border: 1px solid #ccc; }
    .cd-search input[type="search"]::-webkit-input-placeholder, .cd-search input[type="search"]::-moz-placeholder, .cd-search input[type="search"]:-ms-input-placeholder {
      color: #cacdcf; }
    .cd-search input[type="search"]:focus {
      outline: none; }
  .cd-search.is-visible {
    opacity: 1;
    filter: alpha(opacity=100);
    visibility: visible;
    -webkit-transition: opacity .3s 0s, visibility 0s 0s;
       -moz-transition: opacity .3s 0s, visibility 0s 0s;
         -o-transition: opacity .3s 0s, visibility 0s 0s;
            transition: opacity .3s 0s, visibility 0s 0s; }
  .nav-is-fixed .cd-search {
    position: fixed; }

.cd-overlay {
  /* shadow layer visible when navigation is active */
  position: fixed;
  z-index: 2;
  height: 100%;
  width: 100%;
  top: 0;
  left: 0;
  cursor: pointer;
  visibility: hidden;
  opacity: 0;
  filter: alpha(opacity=0);
  -webkit-backface-visibility: hidden;
     -moz-backface-visibility: hidden;
          backface-visibility: hidden;
  -webkit-transition: opacity 0.3s 0s, visibility 0s 0.3s, -webkit-transform 0.3s 0s;
     -moz-transition: opacity 0.3s 0s, visibility 0s 0.3s, -moz-transform 0.3s 0s;
       -o-transition: opacity 0.3s 0s, visibility 0s 0.3s, -o-transform 0.3s 0s;
          transition: opacity 0.3s 0s, visibility 0s 0.3s, transform 0.3s 0s; }
  .cd-overlay.is-visible {
    opacity: 1;
    filter: alpha(opacity=100);
    visibility: visible;
    -webkit-transition: opacity 0.3s 0s, visibility 0s 0s, -webkit-transform 0.3s 0s;
       -moz-transition: opacity 0.3s 0s, visibility 0s 0s, -moz-transform 0.3s 0s;
         -o-transition: opacity 0.3s 0s, visibility 0s 0s, -o-transform 0.3s 0s;
            transition: opacity 0.3s 0s, visibility 0s 0s, transform 0.3s 0s; }

/* --------------------------------
 *
 *support for no js
 *
 *-------------------------------- */
.no-js .cd-primary-nav {
  position: relative;
  height: auto;
  width: 100%;
  overflow: visible;
  visibility: visible;
  z-index: 2; }

.no-js .cd-search {
  position: relative;
  top: 0;
  opacity: 1;
  filter: alpha(opacity=100);
  visibility: visible; }

.nav-footer {
  padding: 30px 20px 20px;
  text-align: left; }
  .nav-footer__heading {
    font-family: News Cycle, sans-serif;
    font-size: 16px;
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 16px;
    margin-bottom: 1rem; }
    .nav-footer__heading a {
      color: #333; }
      .nav-footer__heading a:hover {
        color: #267e64; }
  .nav-footer__link {
    font-size: 14px; }
  .nav-footer__box {
    padding: 0 10px;
    vertical-align: top; }
  .nav-footer__box-narrow {
    padding: 0 10px;
    vertical-align: top; }
  .nav-footer__button {
    border-width: 1px;
    color: #267e64;
    font-size: 14px;
    font-size: .9rem;
    margin-bottom: 16px;
    margin-bottom: 1rem;
    padding: 8px 16px;
    padding: .5rem 1rem;
    width: 100%; }
  .nav-footer__sub-links {
    font-size: 14px; }
    .nav-footer__sub-links a {
      color: #333; }
      .nav-footer__sub-links a:hover {
        color: #267e64; }
    .nav-footer__sub-links li:nth-child(1) {
      font-family: News Cycle, sans-serif;
      font-size: 16px;
      font-size: 1rem;
      font-weight: 700;
      margin-bottom: 8px;
      margin-bottom: .5rem; }

.banner-tall {
  background-image: url(images/index_hero.jpg);
  background-position: center;
  -moz-background-size: cover;
       background-size: cover;
  height: 200px;
  position: relative; }
  .banner-tall__headline {
    bottom: 48px;
    bottom: 3rem;
    color: #fff;
    font-family: serif;
    font-size: 80px;
    font-size: 5rem;
    font-weight: 400;
    left: 32px;
    left: 2rem;
    line-height: 1;
    position: absolute;
    margin: 0 0 16px 16px;
    margin: 0 0 1rem 1rem;
    text-shadow: 2px 2px 2px #333; }

.banner-standard {
  background: #267e64;
  color: #fff;
  display: table;
  height: auto; }
  .banner-standard img {
    display: block; }
  .banner-standard__box {
    padding: 16px 32px;
    padding: 1rem 2rem; }
  .banner-standard__heading {
    color: #fff; }
  .banner-standard__media {
    background-color: #eceee6; }

.banner-panorama {
  background-image: url(../images/trees.jpg);
  background-position: center;
  -moz-background-size: cover;
       background-size: cover;
  height: 255px; }

.card-diptic {
  display: table;
  border-top: 1px solid #ccc;
  border-bottom: 1px solid #ccc; }
  .card-diptic__box {
    display: table-cell;
    vertical-align: middle;
    padding: 32px 16px;
    padding: 2rem 1rem; }
  .card-diptic__heading {
    text-align: center; }
  .card-diptic__media {
    background-color: #267e64;
    height: 150px;
    overflow: hidden;
    margin-bottom: 32px;
    margin-bottom: 2rem; }
  .card-diptic__text {
    text-align: center;
    margin-bottom: 32px;
    margin-bottom: 2rem; }
  .card-diptic ul {
    list-style: none;
    text-align: center; }
    .card-diptic ul li {
      display: inline-block;
      padding: 8px;
      padding: .5rem;
      width: 47%; }
  .card-diptic__link {
    color: #267e64;
    display: inline-block;
    font-family: Playfair Display, serif;
    padding: 0 6px;
    padding: 0 .4rem; }
    .card-diptic__link:hover {
      color: #455652; }

.card-bio {
  padding-bottom: 32px;
  padding-bottom: 2rem; }
  .card-bio__media {
    vertical-align: top; }
  .card-bio__box {
    padding-left: 32px;
    padding-left: 2rem;
    padding-top: 0;
    vertical-align: top; }
  .card-bio__heading {
    color: #267e64;
    font-family: Playfair Display, serif;
    font-size: 32px;
    font-size: 2rem;
    font-weight: 400;
    line-height: 1; }
  .card-bio__subtitle {
    color: #7f7e7e; }
    .card-bio__subtitle h3 {
      display: inline-block; }
    .card-bio__subtitle a {
      color: #267e64;
      margin-left: 10px; }
      .card-bio__subtitle a i {
        border: 1px solid #267e64;
        padding: 2px; }
  .card-bio__text * + * {
    margin-top: 16px;
    margin-top: 1rem; }

.card-article__box {
  -moz-box-shadow: 0 1px 0 #267e64;
       box-shadow: 0 1px 0 #267e64;
  display: none;
  padding-top: 24px;
  padding-bottom: 24px; }
  .card-article__box * + * {
    margin-top: 16px;
    margin-top: 1rem; }
.card-article h2 {
  color: #267e64;
  font-family: Playfair Display, serif;
  font-size: 32px;
  font-size: 2rem;
  font-weight: 400;
  line-height: 1; }
.card-article small {
  color: #666;
  font-size: 12px;
  font-size: .75rem; }

.loader__nav {
  display: table-cell;
  padding-top: 20px;
  padding-top: 1.25rem; }

.card-triptic {
  display: table;
  border-top: 1px solid #ccc;
  border-bottom: 1px solid #ccc; }
  .card-triptic__box {
    padding: 32px;
    padding: 2rem;
    vertical-align: top; }
  .card-triptic__media {
    height: 150px;
    overflow: hidden;
    margin-bottom: 32px;
    margin-bottom: 2rem; }
  .card-triptic__heading-link {
    color: #267e64;
    font-family: Playfair Display, serif;
    font-size: 22px;
    font-size: 1.375rem;
    font-weight: 400;
    line-height: 1;
    color: #267e64;
    display: inline-block;
    text-align: center; }
    .card-triptic__heading-link:hover {
      color: #455652; }
  .card-triptic__text {
    text-align: center; }

.cta-contact {
  background-color: #eceee6;
  display: table;
  width: 100%; }
  .cta-contact__box {
    padding: 32px;
    padding: 2rem; }
  .cta-contact__box:nth-child(2) {
    padding: 32px 0;
    padding: 2rem 0; }
  .cta-contact__text {
    margin: 0;
    padding: 0 56px 0 32px;
    padding: 0 3.5rem 0 2rem; }
  .cta-contact__button {
    display: inline-block;
    margin: 0 32px 0 0;
    margin: 0 2rem 0 0; }

.cta-teaser {
  display: table;
  padding: 16px 32px;
  padding: 1rem 2rem; }
  .cta-teaser__box {
    padding-right: 32px;
    padding-right: 2rem; }
  .cta-teaser__text {
    margin-bottom: 32px;
    margin-bottom: 2rem; }
  .cta-teaser__media {
    height: 300px;
    overflow: hidden; }

.cta-center {
  padding: 32px;
  padding: 2rem;
  text-align: center; }
  .cta-center__text {
    padding: 0 128px;
    padding: 0 8rem;
    margin-bottom: 32px;
    margin-bottom: 2rem; }

.cta-subscribe {
  background-color: #267e64;
  color: #fff;
  padding-top: 24px;
  padding-bottom: 36px; }
  .cta-subscribe__heading {
    color: #fff;
    text-align: center; }
  .cta-subscribe__box {
    display: table;
    margin: 0 auto;
    width: 75%; }
  .cta-subscribe__input {
    padding: 14px;
    padding: .9rem;
    width: 100%; }
  .cta-subscribe__button {
    border: 1px solid #fff;
    color: #fff;
    font-size: 24px;
    font-size: 1.5rem;
    margin-left: 16px;
    margin-left: 1rem;
    width: 100%;
    -webkit-transition: all .2s ease;
       -moz-transition: all .2s ease;
         -o-transition: all .2s ease;
            transition: all .2s ease; }
    .cta-subscribe__button:hover {
      /*These will transition on hover */
      background-color: #fff;
      color: #267e64; }
  .cta-subscribe__message {
    display: none;
    padding-top: 40px;
    padding-top: 2.5rem; }
  .cta-subscribe__error {
    display: none;
    padding-top: 16px;
    padding-top: 1rem; }
    .cta-subscribe__error-msg {
      text-align: center; }

.cta-sidebar {
  padding: 16px 0 0 80px;
  padding: 1rem 0 0 5rem;
  vertical-align: top; }
  .cta-sidebar__heading {
    font-size: 20px;
    font-size: 1.25rem;
    margin-top: 12px;
    margin-bottom: 12px; }
  .cta-sidebar__button {
    margin-top: 16px;
    margin-top: 1rem; }

.cta-sidebar__button + .cta-sidebar__heading, .cta-sidebar__text + .cta-sidebar__heading {
  margin-top: 32px;
  margin-top: 2rem; }

.cta-social {
  padding-left: 16px;
  padding-left: 1rem; }
  .cta-social .icon {
    fill: #267e64; }
    .cta-social .icon:hover {
      fill: #ccc; }

footer {
  padding-bottom: 80px;
  padding-bottom: 5rem; }

.footer-copyright {
  border-top: 1px solid #e5e6e7;
  display: table;
  padding: 32px;
  padding: 2rem;
  width: 100%; }
  .footer-copyright__logo-box {
    width: 450px; }
  .footer-copyright__box {
    text-align: right; }
    .footer-copyright__box small {
      display: inline-block;
      font-size: 14px;
      padding-right: 8px;
      padding-right: .5rem; }
      .footer-copyright__box small::before {
        content: '|'; }
      .footer-copyright__box small:nth-child(1)::before {
        content: ' '; }
    .footer-copyright__box .nav-minor li a {
      font-size: 14px; }

.footer-disclaimer {
  text-align: center;
  width: 100%; }
  .footer-disclaimer__box {
    border: 1px solid #455652;
    display: inline-block;
    text-align: center;
    padding: 20px;
    margin: 50px auto 10px; }
  .footer-disclaimer h6, .footer-disclaimer p, .footer-disclaimer ul {
    font-size: 14px;
    margin-bottom: 16px;
    margin-bottom: 1rem; }
  .footer-disclaimer ul {
    margin-top: 0; }
    .footer-disclaimer ul li {
      display: inline-block;
      margin: 0 10px;
      padding: 8px;
      padding: .5rem; }

@-webkit-keyframes fadeIn {
  from {
    opacity: 0;
    filter: alpha(opacity=0); }

  to {
    opacity: 1;
    filter: alpha(opacity=100); } }

@-moz-keyframes fadeIn {
  from {
    opacity: 0;
    filter: alpha(opacity=0); }

  to {
    opacity: 1;
    filter: alpha(opacity=100); } }

@-o-keyframes fadeIn {
  from {
    opacity: 0;
    filter: alpha(opacity=0); }

  to {
    opacity: 1;
    filter: alpha(opacity=100); } }

@keyframes fadeIn {
  from {
    opacity: 0;
    filter: alpha(opacity=0); }

  to {
    opacity: 1;
    filter: alpha(opacity=100); } }

.header__logo-box {
  background-color: #fff;
  border-left: 1px solid #ccc;
  border-right: 1px solid #ccc;
  margin: 0 auto;
  max-width: 1200px; }

.no-cssanimations .header__logo-box {
  padding-top: 0; }

.header__logo {
  background: #fff; }

.logo {
  display: block;
  padding: 0px 0 0px 32px;
  padding: 0rem 0 0rem 2rem;
  width: 600px; }

.no-cssanimations .logo {
  height: 68px;
  padding: 0 16px;
  padding: 0 1rem; }

svg path, svg polygon {
  fill: #267e64; }
svg:hover path, svg:hover polygon {
  opacity: .7;
  filter: alpha(opacity=70);
  -webkit-transition: fill 0.2s ease;
     -moz-transition: fill 0.2s ease;
       -o-transition: fill 0.2s ease;
          transition: fill 0.2s ease;
  fill-opacity: 0.7; }

.logo__stretched {
  display: block; }

.logo__stacked {
  display: none; }

.no-cssanimations .logo__globe path {
  fill: #267e64;
  opacity: 1;
  filter: alpha(opacity=100); }

.main-standard, .main-news, .main-post {
  display: table;
  padding: 16px 32px;
  padding: 1rem 2rem; }

.main-standard {
  padding-bottom: 80px;
  padding-bottom: 5rem; }
  .main-standard__text * + * {
    margin-top: 16px;
    margin-top: 1rem; }
  .main-standard__text h2 {
    color: #267e64;
    font-family: Playfair Display, serif;
    font-size: 32px;
    font-size: 2rem;
    font-weight: 400;
    line-height: 1;
    padding-top: 24px;
    padding-bottom: 0px; }
  .main-standard__text ul {
    padding-left: 32px;
    padding-left: 2rem;
    list-style: disc; }
    .main-standard__text ul li {
      margin-top: 8px;
      margin-top: 0.5rem; }
  .main-standard__text ol {
    padding-left: 32px;
    padding-left: 2rem; }
  .main-standard__text img {
    width: auto;
    max-width: 100%; }

.main-bios {
  display: table;
  padding: 32px;
  padding: 2rem; }

.city-column {
  width: 135px; }

.address-column {
  width: 335px; }

.location-phone {
  color: #455652; }
  .location-phone:hover {
    color: #267e64; }
.main-post__text * + * {
  margin-top: 16px;
  margin-top: 1rem; }
.main-post__text h2 {
  color: #267e64;
  font-family: Playfair Display, serif;
  font-size: 32px;
  font-size: 2rem;
  font-weight: 400;
  line-height: 1; }
.main-post__text h3 {
  color: #455652;
  font-family: Playfair Display, serif;
  font-size: 20px;
  font-size: 1.25rem;
  font-weight: 700;
  line-height: 1;
  text-transform: uppercase;
  margin-top: 36px;
  margin-bottom: 0px; }
.main-post__text figcaption {
  color: #ccc;
  font-size: 12px;
  font-size: .75rem;
  margin-top: 0; }
.main-post__text blockquote {
  color: #267e64;
  font-family: Playfair Display, serif;
  font-size: 24px;
  font-size: 1.5rem;
  font-style: italic;
  font-weight: 700;
  margin-top: 36px;
  margin-bottom: 36px; }

.form-standard {
  margin-top: 32px;
  margin-top: 2rem; }
  .form-standard input, .form-standard input[type="email"], .form-standard input[type="number"], .form-standard input[type="password"], .form-standard input[type="search"], .form-standard input[type="tel"], .form-standard input[type="text"], .form-standard input[type="url"], .form-standard input[type="color"], .form-standard input[type="date"], .form-standard input[type="name"], .form-standard input[type="datetime"], .form-standard input[type="datetime-local"], .form-standard input[type="month"], .form-standard input[type="time"], .form-standard input[type="week"], .form-standard textarea {
    color: #333;
    border: 1px solid #ccc;
    border-box-sizing: content-box;
    -moz-border-radius: 0;
         border-radius: 0;
    border-radius-font-size: 1rem;
    padding: 16px;
    padding: 1rem;
    display: block;
    width: 100%; }
  .form-standard label {
    display: block; }
  .form-standard input[type="button"], .form-standard input[type="reset"], .form-standard input[type="submit"] {
    display: block; }
  .form-standard__checkbox {
    display: inline-block;
    float: left !important;
    width: auto !important; }
  .form-standard__checkbox + label {
    display: inline-block;
    float: left !important;
    margin: 10px 10px 20px 10px !important; }
  .form-standard .selectbox {
    background: #fff;
    -moz-border-radius: 0;
         border-radius: 0;
    cursor: pointer;
    position: relative;
    height: 48px; }
  .form-standard select {
    background: #fff;
    -moz-box-shadow: none;
         box-shadow: none;
    -moz-border-radius: 0;
         border-radius: 0;
    border: 1px solid #ccc;
    color: #333;
    cursor: pointer;
    display: block;
    font-size: 16px;
    font-size: 1rem;
    height: 45px;
    padding: 16px;
    padding: 1rem;
    position: relative;
    width: 100%; }

.contact-us__button {
  background-color: #eceee6;
  max-width: 183px;
  clear: both; }


@media (max-width: 768px) {

  [class*='col-'] {
    display: inline-block;
    text-align: center; }

  .col-2-12 {
    width: 100%; }

  .col-3-12 {
    width: 100%; }

  .col-4-12 {
    width: 100%; }

  .col-5-12 {
    width: 100%; }

  .col-6-12 {
    width: 100%; }

  .col-7-12 {
    width: 100%; }

  .col-8-12 {
    width: 100%; }

  .col-9-12 {
    width: 100%; }

  .col-10-12 {
    width: 100%; }

  .col-11-12 {
    width: 100%; }

  .nav-minor__container {
    text-align: center; }

  .nav-footer {
    display: none; }

  .card-diptic {
    -webkit-flex-flow: column;
        -ms-flex-flow: column;
            flex-flow: column; }

  .card-bio {
    border-bottom: 1px solid #e5e6e7;
    margin-bottom: 2rem; }

  .card-bio__media {
    margin-bottom: 1rem;
    text-align: center; }

  .card-bio__media img {
    display: inline-block;
    width: 33%; }

  .card-bio__box {
    padding: 0; }

  .card-bio__text {
    text-align: left; }

  .cta-contact__text {
    padding: 0; }

  .cta-contact__button {
    margin: 0; }

  .cta-teaser {
    -webkit-flex-flow: column;
        -ms-flex-flow: column;
            flex-flow: column; }

  .cta-teaser__box {
    padding: 0; }

  .cta-teaser__media {
    height: auto;
    margin-top: 2rem; }

  .cta-center__text {
    padding: 0; }

  .cta-subscribe__button {
    margin: 1rem 0 0 0; }

  .cta-sidebar {
    padding: 3rem 2rem; }

  footer {
    padding: 0; }

  .footer-copyright {
    padding: 2rem 0 0 0; }

  .footer-copyright__logo-box {
    display: inline-block; }

  .footer-copyright__logo-box .logo__stacked {
    display: inline-block;
    width: 250px; }

  .main-standard__content {
    text-align: left; }

  .main-post__text {
    text-align: left; } }


@media (max-width: 700px) {

  tr {
    margin-top: 0 !important; }

  tr:first-child {
    border-top: 1px solid #e5e6e7; }

  td {
    margin-top: 0 !important;
    position: relative;
    padding-left: 40%; }

  td:before {
    position: absolute;
    top: 6px;
    left: 6px;
    width: 40%;
    padding-right: 10px;
    white-space: nowrap;
    font-weight: 600; }

  td:nth-of-type(1):before {
    content: "City: "; }

  td:nth-of-type(2):before {
    content: "Address: "; }

  td:nth-of-type(3):before {
    content: "Phone: "; }

  thead tr {
    position: absolute;
    top: -9999px;
    left: -9999px; }

  table, thead, tbody, th, td, tr {
    display: block; } }


@media (max-width: 1022px) {

  body.nav-on-left.overflow-hidden {
    overflow: hidden; }

  .cd-main-content.nav-is-visible {
    -webkit-transform: translateX(-260px);
       -moz-transform: translateX(-260px);
        -ms-transform: translateX(-260px);
         -o-transform: translateX(-260px);
            transform: translateX(-260px); }

  .nav-on-left .cd-main-content.nav-is-visible {
    -webkit-transform: translateX(260px);
       -moz-transform: translateX(260px);
        -ms-transform: translateX(260px);
         -o-transform: translateX(260px);
            transform: translateX(260px); }

  .cd-main-header.nav-is-visible {
    -webkit-transform: translateX(0);
       -moz-transform: translateX(0);
        -ms-transform: translateX(0);
         -o-transform: translateX(0);
            transform: translateX(0); }

  .nav-on-left .cd-main-header.nav-is-visible {
    -webkit-transform: translateX(260px);
       -moz-transform: translateX(260px);
        -ms-transform: translateX(260px);
         -o-transform: translateX(260px);
            transform: translateX(260px); }

  .nav-on-left .cd-logo {
    left: auto;
    right: 5%; }

  .nav-on-left .cd-header-buttons {
    right: auto;
    left: 5%; }

  .nav-on-left .cd-header-buttons li {
    float: right; }

  .nav-on-left .cd-primary-nav, .nav-on-left .cd-primary-nav ul {
    right: auto;
    left: 0; }

  .cd-primary-nav .cd-nav-gallery .cd-nav-item img {
    display: none; }

  .cd-primary-nav {

    /* by default .cd-primary-nav is hidden - trick for iOS devices where you can see the navigation if you pull down */
    visibility: hidden;
    -webkit-transition: visibility 0s 0.3s;
       -moz-transition: visibility 0s 0.3s;
         -o-transition: visibility 0s 0.3s;
            transition: visibility 0s 0.3s; }

  .cd-primary-nav.nav-is-visible {
    visibility: visible;
    -webkit-transition: visibility 0s 0s;
       -moz-transition: visibility 0s 0s;
         -o-transition: visibility 0s 0s;
            transition: visibility 0s 0s; }

  .cd-overlay.is-visible {
    -webkit-transform: translateX(0);
       -moz-transform: translateX(0);
        -ms-transform: translateX(0);
         -o-transform: translateX(0);
            transform: translateX(0); }

  .nav-on-left .cd-overlay.is-visible {
    -webkit-transform: translateX(260px);
       -moz-transform: translateX(260px);
        -ms-transform: translateX(260px);
         -o-transform: translateX(260px);
            transform: translateX(260px); }

  .cd-overlay.is-visible.search-is-visible, .nav-on-left .cd-overlay.is-visible.search-is-visible {
    -webkit-transform: translateX(0);
       -moz-transform: translateX(0);
        -ms-transform: translateX(0);
         -o-transform: translateX(0);
            transform: translateX(0); } }


@media (min-width: 1024px) {

  .cd-main-header {
    height: 80px; }

  .cd-main-header:after {
    content: "";
    display: table;
    clear: both; }

  .cd-logo {
    top: 26px;
    left: 4em; }

  .cd-header-buttons {
    top: 1rem;
    right: 1rem; }

  .cd-nav-trigger {
    display: none; }

  .cd-primary-nav {
    position: static;
    padding: 0 50px 0 0;
    height: auto;
    width: 100%;
    overflow: visible;
    background: transparent;
    text-align: center; }

  .cd-primary-nav:after {
    content: "";
    display: table;
    clear: both; }

  .cd-primary-nav.moves-out > li > a {

    /* reset mobile style */
    -webkit-transform: translateX(0);
       -moz-transform: translateX(0);
        -ms-transform: translateX(0);
         -o-transform: translateX(0);
            transform: translateX(0);
    opacity: 1;
    filter: alpha(opacity=100); }

  .cd-primary-nav ul {
    position: static;
    height: auto;
    width: auto;
    background: transparent;
    overflow: visible;
    text-align: left;
    z-index: 3; }

  .cd-primary-nav ul.is-hidden {

    /* reset mobile style */
    -webkit-transform: translateX(0);
       -moz-transform: translateX(0);
        -ms-transform: translateX(0);
         -o-transform: translateX(0);
            transform: translateX(0); }

  .cd-primary-nav ul.moves-out > li > a {

    /* reset mobile style */
    -webkit-transform: translateX(0);
       -moz-transform: translateX(0);
        -ms-transform: translateX(0);
         -o-transform: translateX(0);
            transform: translateX(0);
    opacity: 1;
    filter: alpha(opacity=100); }

  .cd-primary-nav > li {
    display: inline-block;
    margin-left: .5rem; }

  .cd-primary-nav > li > a {

    /* main navigation buttons style */
    position: relative;
    display: inline-block;
    height: 80px;
    line-height: 80px;
    padding: 0;
    color: #455652;
    overflow: visible;
    border-bottom: none;
    -webkit-transition: color 0.3s, box-shadow 0.3s;
       -moz-transition: color 0.3s, -moz-box-shadow 0.3s;
         -o-transition: color 0.3s, box-shadow 0.3s;
            transition: color 0.3s, box-shadow 0.3s; }

  .cd-primary-nav > li > a:hover {
    color: #267e64; }

  .cd-primary-nav > li > a.selected {
    color: #267e64;
    -moz-box-shadow: inset 0 -2px 0 #267e64;
         box-shadow: inset 0 -2px 0 #267e64; }

  .cd-primary-nav .go-back, .cd-primary-nav .see-all {
    display: none; }

  .cd-primary-nav .cd-secondary-nav, .cd-primary-nav .cd-nav-gallery, .cd-primary-nav .cd-nav-icons {

    /* dropdown menu style */
    position: absolute;
    top: 80px;
    width: 100%;
    background: #fff;
    padding: 2rem;
    -moz-box-shadow: inset 0 1px 0 #e5e6e7, 0 3px 6px rgba(0, 0, 0, 0.05);
         box-shadow: inset 0 1px 0 #e5e6e7, 0 3px 6px rgba(0, 0, 0, 0.05);
    -webkit-transform: translateX(0);
       -moz-transform: translateX(0);
        -ms-transform: translateX(0);
         -o-transform: translateX(0);
            transform: translateX(0);
    -webkit-transition: opacity .3s 0s, visibility 0s 0s;
       -moz-transition: opacity .3s 0s, visibility 0s 0s;
         -o-transition: opacity .3s 0s, visibility 0s 0s;
            transition: opacity .3s 0s, visibility 0s 0s; }

  .cd-primary-nav .cd-secondary-nav:after, .cd-primary-nav .cd-nav-gallery:after, .cd-primary-nav .cd-nav-icons:after {
    content: "";
    display: table;
    clear: both; }

  .cd-primary-nav .cd-secondary-nav.is-hidden, .cd-primary-nav .cd-nav-gallery.is-hidden, .cd-primary-nav .cd-nav-icons.is-hidden {
    opacity: 0;
    filter: alpha(opacity=0);
    visibility: hidden;
    -webkit-transition: opacity .3s 0s, visibility 0s .3s;
       -moz-transition: opacity .3s 0s, visibility 0s .3s;
         -o-transition: opacity .3s 0s, visibility 0s .3s;
            transition: opacity .3s 0s, visibility 0s .3s; }

  .cd-primary-nav .cd-secondary-nav > .see-all, .cd-primary-nav .cd-nav-gallery > .see-all, .cd-primary-nav .cd-nav-icons > .see-all {

    /* this is the BIG See all button at the bottom of the dropdown menu */
    display: block;
    position: absolute;
    left: 0;
    bottom: 0;
    height: 80px;
    width: 100%;
    overflow: hidden;

    /* reset some inherited style */
    margin: 0;
    padding: 0; }

  .cd-primary-nav .cd-secondary-nav > .see-all a, .cd-primary-nav .cd-nav-gallery > .see-all a, .cd-primary-nav .cd-nav-icons > .see-all a {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    font-size: 2.2rem;
    font-weight: bold;
    text-align: center;
    line-height: 80px;
    border-top: 1px solid #e5e6e7;

    /* reset some inherited style */
    border-bottom: none;
    margin: 0;
    padding: 0;
    -webkit-transition: color 0.2s, background 0.2s, border 0.2s;
       -moz-transition: color 0.2s, background 0.2s, border 0.2s;
         -o-transition: color 0.2s, background 0.2s, border 0.2s;
            transition: color 0.2s, background 0.2s, border 0.2s; }

  .cd-primary-nav .cd-secondary-nav > .see-all a:hover, .cd-primary-nav .cd-nav-gallery > .see-all a:hover, .cd-primary-nav .cd-nav-icons > .see-all a:hover {
    background: #455652;
    border-color: #455652;
    color: #fff; }

  .cd-primary-nav .cd-secondary-nav > li {

    /* change the height according to your needs - you can even set height: auto */
    height: 340px;

    /* here you set the number of columns - use width percentage */
    width: 23%;
    float: left;
    margin-right: 2.66%;
    border-right: 1px solid #e5e6e7;
    overflow: hidden;
    overflow-x: hidden;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch; }

  .cd-primary-nav .cd-secondary-nav > li:nth-child(4n+2) {

    /* +2 because we have 2 list items with display:none */
    margin-right: 0;
    border-right: none; }

  .cd-primary-nav .cd-secondary-nav > li > a {

    /* secondary nav title */
    color: #267e64;
    font-weight: bold;
    font-size: 1.6rem;
    margin-bottom: .6em; }

  .cd-primary-nav .cd-secondary-nav a {
    height: 30px;
    line-height: 30px;
    padding: 0 18% 0 0;
    color: #455652;
    border-bottom: none;
    font-size: 1.4rem; }

  .cd-primary-nav .cd-secondary-nav a:hover {
    color: #267e64; }

  .cd-primary-nav .cd-secondary-nav ul {

    /* Force Hardware Acceleration in WebKit */
    -webkit-transform: translateZ(0);
       -moz-transform: translateZ(0);
            transform: translateZ(0); }

  .cd-primary-nav .cd-secondary-nav ul ul {

    /* tertiary navigation */
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%; }

  .cd-primary-nav .cd-secondary-nav ul ul.is-hidden {
    -webkit-transform: translateX(100%);
       -moz-transform: translateX(100%);
        -ms-transform: translateX(100%);
         -o-transform: translateX(100%);
            transform: translateX(100%); }

  .cd-primary-nav .cd-secondary-nav ul ul .go-back {
    display: block; }

  .cd-primary-nav .cd-secondary-nav ul ul .go-back a {
    color: transparent; }

  .cd-primary-nav .cd-secondary-nav ul ul .see-all {
    display: block; }

  .cd-primary-nav .cd-secondary-nav .moves-out > li > a {

    /* push the navigation items to the left - and lower down opacity - when tertiary nav slides in */
    -webkit-transform: translateX(-100%);
       -moz-transform: translateX(-100%);
        -ms-transform: translateX(-100%);
         -o-transform: translateX(-100%);
            transform: translateX(-100%); }

  .cd-primary-nav .cd-nav-gallery {
    -moz-box-shadow: 0 5px 5px rgba(100, 100, 100, 0.3);
         box-shadow: 0 5px 5px rgba(100, 100, 100, 0.3); }

  .cd-primary-nav .cd-nav-gallery li {

    /* set here number of columns - use width percentage */
    float: left;
    width: 25%;
    padding: 1rem; }

  .cd-primary-nav .cd-nav-gallery li:nth-child(4n+2) {

    /* +2 because we have two additional list items with display:none */ }

  .cd-primary-nav .cd-nav-gallery .cd-nav-item {
    border-bottom: none;
    padding: 0;
    height: auto;
    line-height: 1.2; }

  .cd-primary-nav .cd-nav-gallery .cd-nav-item img {
    position: static;
    margin-top: 0;
    height: auto;
    width: 100%;
    margin-bottom: .6rem; }

  .cd-primary-nav .cd-nav-gallery .cd-nav-item h3 {
    color: #267e64;
    font-weight: bold;
    font-size: .9rem;
    padding: 0 .4rem; }

  .cd-primary-nav .cd-nav-icons li {

    /* set here number of columns - use width percentage */
    width: 32%;
    float: left;
    margin: 0 2% 20px 0; }

  .cd-primary-nav .cd-nav-icons li:nth-child(3n+2) {

    /* +2 because we have two additional list items with display:none */
    margin-right: 0; }

  .cd-primary-nav .cd-nav-icons .cd-nav-item {
    border-bottom: none;
    height: 80px;
    line-height: 1.2;
    padding: 24px 0 0 85px; }

  .cd-primary-nav .cd-nav-icons .cd-nav-item:hover {
    background: #fafafb; }

  .cd-primary-nav .cd-nav-icons .cd-nav-item h3 {
    color: #267e64;
    font-weight: bold; }

  .cd-primary-nav .cd-nav-icons .cd-nav-item p {
    display: block; }

  .cd-primary-nav .cd-nav-icons .cd-nav-item::before {
    left: 25px; }

  .has-children > a::before, .has-children > a::after, .go-back a::before, .go-back a::after {
    background: #cacdcf; }

  .has-children > a:hover::before, .has-children > a:hover::after, .go-back a:hover::before, .go-back a:hover::after {
    background: #267e64; }

  .has-children > a::before, .has-children > a::after {
    right: 15%; }

  .cd-primary-nav > .has-children > a {

    /* main navigation arrows on larger devices */
    padding-right: 30px !important; }

  .cd-primary-nav > .has-children > a::before, .cd-primary-nav > .has-children > a::after {
    width: 9px;
    -webkit-transform-origin: 50% 50%;
       -moz-transform-origin: 50% 50%;
        -ms-transform-origin: 50% 50%;
         -o-transform-origin: 50% 50%;
            transform-origin: 50% 50%;
    background: #cacdcf;
    -webkit-backface-visibility: hidden;
       -moz-backface-visibility: hidden;
            backface-visibility: hidden;
    -webkit-transition: width 0.3s, -webkit-transform 0.3s;
       -moz-transition: width 0.3s, -moz-transform 0.3s;
         -o-transition: width 0.3s, -o-transform 0.3s;
            transition: width 0.3s, transform 0.3s; }

  .cd-primary-nav > .has-children > a::before {
    right: 12px; }

  .cd-primary-nav > .has-children > a::after {
    right: 7px; }

  .cd-primary-nav > .has-children > a.selected::before, .cd-primary-nav > .has-children > a.selected::after {
    width: 14px; }

  .cd-primary-nav > .has-children > a.selected::before {
    -webkit-transform: translateX(5px) rotate(-45deg);
       -moz-transform: translateX(5px) rotate(-45deg);
        -ms-transform: translateX(5px) rotate(-45deg);
         -o-transform: translateX(5px) rotate(-45deg);
            transform: translateX(5px) rotate(-45deg); }

  .cd-primary-nav > .has-children > a.selected::after {
    -webkit-transform: rotate(45deg);
       -moz-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
         -o-transform: rotate(45deg);
            transform: rotate(45deg); }

  .cd-secondary-nav > .has-children > a::before, .cd-secondary-nav > .has-children > a::after {

    /* remove arrows on secondary nav titles */
    display: none; }

  .cd-primary-nav .go-back a {
    padding-left: 20px; }

  .cd-primary-nav .go-back a::before, .cd-primary-nav .go-back a::after {
    left: 1px; }

  .no-js .cd-primary-nav {
    position: absolute;
    z-index: 3;
    display: inline-block;
    width: auto;
    top: 0;
    right: 150px;
    padding: 0; }

  .no-js .nav-is-fixed .cd-primary-nav {
    position: fixed; } }


@media (min-width: 769px) {

  .banner-tall {
    height: 465px; }

  .card-diptic__box {
    padding: 2rem 1rem 2rem 2rem; }

  .card-diptic__box:nth-child(2) {
    border-left: 1px solid #ccc;
    padding: 2rem 2rem 2rem 1rem; }

  .card-triptic__box:nth-child(2) {
    border-left: 1px solid #ccc; }

  .card-triptic__box:nth-child(3) {
    border-left: 1px solid #ccc; } }


@media (max-width: 767px) {

  .banner-tall__headline {
    position: static;
    font-size: 2rem;
    padding: 2rem; } }


@media (min-width: 768px) and (min-width: 1023px) {

  .footer-copyright__box {
    text-align: right; }

  .footer-copyright__box small {
    font-size: 12px; }

  .footer-copyright__box .nav-minor li a {
    font-size: 12px; }

  .footer-disclaimer h6, .footer-disclaimer p, .footer-disclaimer ul {
    font-size: 12px; } }


@media (max-width: 899px) {

  .logo {
    width: 400px; }

  .logo__stretched {
    display: none; }

  .logo__stacked {
    display: block; } }


@media (max-width: 499px) {

  .logo {
    padding: 1rem;
    width: 300px; } }


/*# sourceMappingURL=data:application/json;base64, */
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvdmVuZG9yL19ub3JtYWxpemUuc2NzcyIsInN0eWxlLmNzcyIsIi9zb3VyY2UvYmFzZS9fdHlwb2dyYXBoeS5zYXNzIiwiL3NvdXJjZS9iYXNlL19jb2xvcnMuc2FzcyIsIi9zb3VyY2UvYmFzZS9fY2xlYXItZml4LnNhc3MiLCIvc291cmNlL2Jhc2UvX2ltYWdlcy5zYXNzIiwiL3NvdXJjZS9iYXNlL19sYXlvdXQuc2FzcyIsIi9zb3VyY2UvYmFzZS9fZ2xvYmFsLnNhc3MiLCIvc291cmNlL2Jhc2UvX3RhYmxlcy5zYXNzIiwiL3NvdXJjZS9tb2R1bGVzL25hdi9fbmF2LW1pbm9yLnNhc3MiLCIvc291cmNlL21vZHVsZXMvbmF2L19uYXYtbWVnYS5zYXNzIiwiL3NvdXJjZS9tb2R1bGVzL25hdi9fbmF2LWZvb3Rlci5zYXNzIiwiL3NvdXJjZS9tb2R1bGVzL2Jhbm5lci9fX2Jhbm5lci5zYXNzIiwiL3NvdXJjZS9tb2R1bGVzL2NhcmRzL19fY2FyZHMuc2FzcyIsIi9zb3VyY2UvbW9kdWxlcy9jdGEvX19jdGEuc2FzcyIsIi9zb3VyY2UvbW9kdWxlcy9mb290ZXIvX2Zvb3Rlci5zYXNzIiwiL3NvdXJjZS9tb2R1bGVzL2hlYWRlci9faGVhZGVyLnNhc3MiLCIvc291cmNlL21vZHVsZXMvbWFpbi9fbWFpbi5zYXNzIiwiL3NvdXJjZS9tb2R1bGVzL2Zvcm0vX2Zvcm0uc2FzcyIsIi9zb3VyY2UvYmFzZS9faW5jbHVkZS1tZWRpYS5zYXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRDQTtFQVdJLGVBQUEsRUFBQTs7QUFLSjtFQUdJLHNCQUFBLEVBQUE7O0FBVUo7RUFDSSxjQUFBO0VBQ0EsVUFBQSxFQUFBOztBQVFKO0VBQ0ksY0FBQSxFQUFBOztBQVlKO0VBTUksK0JBQUE7RUFDQSwyQkFBQSxFQUFBOztBQWVKO0VBQ0ksVUFBQSxFQUFBOztBQVlKO0VBR0ksd0JBQUEsRUFBQTtFQVVKO0lBRVEsV0FBQSxFQUFBOztBQ3pIUjs7Ozs7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QUFBOztFQUNKO0lBQ00sVUFBQSxFQUFBOztFQTBHTjtJQUNJLG1CQUFBO0lBeHlCWSxXQUFBO0lBMHlCWixzQkFBQTtJQUNBLFlBQUE7SUFDQSxPQUFBO0lBQ0EsYUFBQTtJQUNBLFdBQUEsRUFBQTs7RUFDSjtJQUNJLGdCQUFBLEVBQUEsRUE5eEJBOzs7QVNpQkY7O0VQN0NGO0lBUUksY0FBQSxFQUFBOztFQ0RKO0lBT00sNkJBQUEsRUFBQTs7RUFFTjtJQUVRLDRCQUFBO0lBQ0EsNkJBQUEsRUFBQTs7RUF1SFI7SUFFUSw0QkFBQSxFQUFBOztFQUVSO0lBRVEsNEJBQUEsRUFBQSxFRHhJSjs7O0FPcUNGOztFUGxDRjtJQWFNLGlCQUFBO0lBQ0EsZ0JBQUE7SUFDQSxjQUFBLEVBQUEsRUFBQTs7O0FPbUJKOztFSmhCRjtJQUlHLGtCQUFBLEVBQUE7O0VBRUg7SUFjSSxnQkFBQSxFQUFBOztFQUtKO0lBSVMsZ0JBQUEsRUFBQTs7RUFhVDtJQUtHLGdCQUFBLEVBQUEsRUEzQ0E7OztBSVlEOztFSHhCRjtJQU1JLGFBQUEsRUFBQTs7RUFzQko7SUFJSSxjQUFBLEVBQUE7O0VBRUo7SUFJSSxlQUFBLEVBQUEsRUFoQ0E7OztBR2tCRjs7RUh4QkY7SUFTSSxjQUFBO0lBQ0EsYUFBQSxFQUFBLEVBQUE7OztBZjhtREoscXgwR0FBcXgwRyIsImZpbGUiOiI8bm8tb3V0cHV0PiIsInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBOb3JtYWxpemUuc2NzcyBiYXNlZCBvbiBOaWNvbGFzIEdhbGxhZ2hlciBhbmQgSm9uYXRoYW4gTmVhbCdzXG4vLyBub3JtYWxpemUuY3NzIHYyLjEuMyB8IE1JVCBMaWNlbnNlIHwgZ2l0LmlvL25vcm1hbGl6ZVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIE5vcm1hbGl6ZS5zY3NzIHNldHRpbmdzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbi8vIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGFkZCBzdXBwb3J0IGZvciBJRTYgYW5kIElFN1xuLy8gTm90aWNlOiBzZXR0aW5nIHRvIHRydWUgbWlnaHQgcmVuZGVyIHNvbWUgZWxlbWVudHNcbi8vIHNsaWdodGx5IGRpZmZlcmVudGx5IHRoYW4gd2hlbiBzZXQgdG8gZmFsc2VcbiRsZWdhY3lfc3VwcG9ydF9mb3JfaWU6IGZhbHNlICFkZWZhdWx0OyAvLyBVc2VkIGFsc28gaW4gQ29tcGFzc1xuXG5cbi8vIFNldCB0aGUgZGVmYXVsdCBmb250IGZhbWlseSBoZXJlIHNvIHlvdSBkb24ndCBoYXZlIHRvIG92ZXJyaWRlIGl0IGxhdGVyXG4kbm9ybWFsaXplZF9mb250X2ZhbWlseTogc2Fucy1zZXJpZiAhZGVmYXVsdDtcblxuJG5vcm1hbGl6ZV9oZWFkaW5nczogdHJ1ZSAhZGVmYXVsdDtcblxuJGgxX2ZvbnRfc2l6ZTogMmVtICFkZWZhdWx0O1xuJGgyX2ZvbnRfc2l6ZTogMS41ZW0gIWRlZmF1bHQ7XG4kaDNfZm9udF9zaXplOiAxLjE3ZW0gIWRlZmF1bHQ7XG4kaDRfZm9udF9zaXplOiAxZW0gIWRlZmF1bHQ7XG4kaDVfZm9udF9zaXplOiAwLjgzZW0gIWRlZmF1bHQ7XG4kaDZfZm9udF9zaXplOiAwLjc1ZW0gIWRlZmF1bHQ7XG5cbiRoMV9tYXJnaW46IDAuNjdlbSAwICFkZWZhdWx0O1xuJGgyX21hcmdpbjogMC44M2VtIDAgIWRlZmF1bHQ7XG4kaDNfbWFyZ2luOiAxZW0gMCAhZGVmYXVsdDtcbiRoNF9tYXJnaW46IDEuMzNlbSAwICFkZWZhdWx0O1xuJGg1X21hcmdpbjogMS42N2VtIDAgIWRlZmF1bHQ7XG4kaDZfbWFyZ2luOiAyLjMzZW0gMCAhZGVmYXVsdDtcblxuJGJhY2tncm91bmQ6ICNmZmYgIWRlZmF1bHQ7XG4kY29sb3I6ICMwMDAgIWRlZmF1bHQ7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBIVE1MNSBkaXNwbGF5IGRlZmluaXRpb25zXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBDb3JyZWN0cyBibG9jayBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFNi83LzgvOSAmIEZGM1xuXG5hcnRpY2xlLFxuYXNpZGUsXG5kZXRhaWxzLFxuZmlnY2FwdGlvbixcbmZpZ3VyZSxcbmZvb3RlcixcbmhlYWRlcixcbmhncm91cCxcbm5hdixcbnNlY3Rpb24sXG5zdW1tYXJ5IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbn1cblxuLy8gQ29ycmVjdHMgaW5saW5lLWJsb2NrIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUU2LzcvOC85ICYgRkYzXG5cbmF1ZGlvLFxuY2FudmFzLFxudmlkZW8ge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgICAgICpkaXNwbGF5OiBpbmxpbmU7XG4gICAgICAgICp6b29tOiAxO1xuICAgIH1cbn1cblxuLy8gMS4gUHJldmVudHMgbW9kZXJuIGJyb3dzZXJzIGZyb20gZGlzcGxheWluZyAnYXVkaW8nIHdpdGhvdXQgY29udHJvbHNcbi8vIDIuIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUzUgZGV2aWNlc1xuXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICAgIGRpc3BsYXk6IG5vbmU7IC8vIDFcbiAgICBoZWlnaHQ6IDA7IC8vIDJcbn1cblxuLy9cbi8vIEFkZHJlc3MgYFtoaWRkZW5dYCBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbi8vIEhpZGUgdGhlIGB0ZW1wbGF0ZWAgZWxlbWVudCBpbiBJRSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLlxuLy9cblxuW2hpZGRlbl0sIHRlbXBsYXRlIHtcbiAgICBkaXNwbGF5OiBub25lO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQmFzZVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gMS4gQ29ycmVjdHMgdGV4dCByZXNpemluZyBvZGRseSBpbiBJRTYvNyB3aGVuIGJvZHkgZm9udC1zaXplIGlzIHNldCB1c2luZyBlbSB1bml0c1xuLy8gICAgaHR0cDovL2NsYWdudXQuY29tL2Jsb2cvMzQ4LyNjNzkwXG4vLyAyLiBQcmV2ZW50cyBpT1MgdGV4dCBzaXplIGFkanVzdCBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2UsIHdpdGhvdXQgZGlzYWJsaW5nIHVzZXIgem9vbVxuLy8gICAgd3d3LjQ1NmJlcmVhc3RyZWV0LmNvbS9hcmNoaXZlLzIwMTAxMi9jb250cm9sbGluZ190ZXh0X3NpemVfaW5fc2FmYXJpX2Zvcl9pb3Nfd2l0aG91dF9kaXNhYmxpbmdfdXNlcl96b29tL1xuXG5odG1sIHtcbiAgICBAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTAwJTsgLy8gMVxuICAgIH1cblx0XHQvL2JhY2tncm91bmQ6ICRiYWNrZ3JvdW5kO1xuXHRcdC8vY29sb3I6ICRjb2xvcjtcbiAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8vIDJcbiAgICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLy8gMlxufVxuXG4vLyBBZGRyZXNzZXMgZm9udC1mYW1pbHkgaW5jb25zaXN0ZW5jeSBiZXR3ZWVuICd0ZXh0YXJlYScgYW5kIG90aGVyIGZvcm0gZWxlbWVudHMuXG5cbmh0bWwsXG5idXR0b24sXG5pbnB1dCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgICAvL2ZvbnQtZmFtaWx5OiAkbm9ybWFsaXplZF9mb250X2ZhbWlseTtcbn1cblxuLy8gQWRkcmVzc2VzIG1hcmdpbnMgaGFuZGxlZCBpbmNvcnJlY3RseSBpbiBJRTYvN1xuXG5ib2R5IHtcbiAgICBtYXJnaW46IDA7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBMaW5rc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gMS4gUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgY29sb3IgZnJvbSBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4vLyAyLiBBZGRyZXNzZXMgb3V0bGluZSBkaXNwbGF5ZWQgb2RkbHkgaW4gQ2hyb21lXG4vLyAzLiBJbXByb3ZlcyByZWFkYWJpbGl0eSB3aGVuIGZvY3VzZWQgYW5kIGFsc28gbW91c2UgaG92ZXJlZCBpbiBhbGwgYnJvd3NlcnNcbi8vICAgIHBlb3BsZS5vcGVyYS5jb20vcGF0cmlja2wvZXhwZXJpbWVudHMva2V5Ym9hcmQvdGVzdFxuXG5hIHtcbiAgICAvLyAxXG5cbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblxuICAgIC8vIDJcblxuICAgICY6Zm9jdXMge1xuICAgICAgICAvL291dGxpbmU6IHRoaW4gZG90dGVkO1xuICAgIH1cblxuICAgIC8vIDNcblxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUge1xuICAgICAgICBvdXRsaW5lOiAwO1xuICAgIH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFR5cG9ncmFwaHlcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIEFkZHJlc3NlcyBmb250IHNpemVzIGFuZCBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBJRTYvN1xuLy8gQWRkcmVzc2VzIGZvbnQgc2l6ZXMgd2l0aGluICdzZWN0aW9uJyBhbmQgJ2FydGljbGUnIGluIEZGNCssIENocm9tZSwgUzVcblxuLyogQGlmIFxcJG5vcm1hbGl6ZV9oZWFkaW5ncyA9PSB0cnVlIHtcbiAgICBoMSB7XG4gICAgICAgIGZvbnQtc2l6ZTogXFwkaDFfZm9udF9zaXplO1xuICAgICAgICBtYXJnaW46IFxcJGgxX21hcmdpbjtcbiAgICB9XG5cbiAgICBoMiB7XG4gICAgICAgIGZvbnQtc2l6ZTogXFwkaDJfZm9udF9zaXplO1xuICAgICAgICBtYXJnaW46IFxcJGgyX21hcmdpbjtcbiAgICB9XG5cbiAgICBoMyB7XG4gICAgICAgIGZvbnQtc2l6ZTogXFwkaDNfZm9udF9zaXplO1xuICAgICAgICBtYXJnaW46IFxcJGgzX21hcmdpbjtcbiAgICB9XG5cbiAgICBoNCB7XG4gICAgICAgIGZvbnQtc2l6ZTogXFwkaDRfZm9udF9zaXplO1xuICAgICAgICBtYXJnaW46IFxcJGg0X21hcmdpbjtcbiAgICB9XG5cbiAgICBoNSB7XG4gICAgICAgIGZvbnQtc2l6ZTogXFwkaDVfZm9udF9zaXplO1xuICAgICAgICBtYXJnaW46IFxcJGg1X21hcmdpbjtcbiAgICB9XG5cbiAgICBoNiB7XG4gICAgICAgIGZvbnQtc2l6ZTogXFwkaDZfZm9udF9zaXplO1xuICAgICAgICBtYXJnaW46IFxcJGg2X21hcmdpbjtcbiAgICB9XG59ICovXG5cbi8vIEFkZHJlc3NlcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOSwgUzUsIENocm9tZVxuXG5hYmJyW3RpdGxlXSB7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDtcbn1cblxuLy8gQWRkcmVzc2VzIHN0eWxlIHNldCB0byAnYm9sZGVyJyBpbiBGRjMrLCBTNC81LCBDaHJvbWVcblxuYixcbnN0cm9uZyB7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbkBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICBibG9ja3F1b3RlIHtcbiAgICAgICAgbWFyZ2luOiAxZW0gNDBweDtcbiAgICB9XG59XG5cbi8vIEFkZHJlc3NlcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIFM1LCBDaHJvbWVcblxuZGZuIHtcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8vIEFkZHJlc3NlcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFNi83LzgvOVxuXG5tYXJrIHtcbiAgICBiYWNrZ3JvdW5kOiAjZmYwO1xuICAgIGNvbG9yOiAjMDAwO1xufVxuXG4vLyBBZGRyZXNzZXMgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gSUU2LzdcbkBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICBwLFxuICAgIHByZSB7XG4gICAgICAgIG1hcmdpbjogMWVtIDA7XG4gICAgfVxufVxuXG4vLyBDb3JyZWN0cyBmb250IGZhbWlseSBzZXQgb2RkbHkgaW4gSUU2LCBTNC81LCBDaHJvbWVcbi8vIGVuLndpa2lwZWRpYS5vcmcvd2lraS9Vc2VyOkRhdmlkZ290aGJlcmcvVGVzdDU5XG5cbmNvZGUsXG5rYmQsXG5wcmUsXG5zYW1wIHtcbiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBzZXJpZjtcbiAgICBAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgICAgIF9mb250LWZhbWlseTogJ2NvdXJpZXIgbmV3JywgbW9ub3NwYWNlO1xuICAgIH1cbiAgICBmb250LXNpemU6IDFlbTtcbn1cblxuLy8gSW1wcm92ZXMgcmVhZGFiaWxpdHkgb2YgcHJlLWZvcm1hdHRlZCB0ZXh0IGluIGFsbCBicm93c2Vyc1xuXG5wcmUge1xuICAgIHdoaXRlLXNwYWNlOiBwcmU7XG4gICAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbn1cblxuLy8gU2V0IGNvbnNpc3RlbnQgcXVvdGUgdHlwZXMuXG5cbnEge1xuICAgIHF1b3RlczogXCJcXDIwMUNcIiBcIlxcMjAxRFwiIFwiXFwyMDE4XCIgXCJcXDIwMTlcIjtcbn1cblxuLy8gMS4gQWRkcmVzc2VzIENTUyBxdW90ZXMgbm90IHN1cHBvcnRlZCBpbiBJRTYvN1xuLy8gMi4gQWRkcmVzc2VzIHF1b3RlIHByb3BlcnR5IG5vdCBzdXBwb3J0ZWQgaW4gUzRcblxuLy8gMVxuQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICAgIHEge1xuICAgICAgICBxdW90ZXM6IG5vbmU7XG4gICAgfVxufVxuXG4vLyAyXG5xIHtcbiAgICAmOmJlZm9yZSxcbiAgICAmOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIGNvbnRlbnQ6IG5vbmU7XG4gICAgfVxufVxuXG4vLyBBZGRyZXNzIGluY29uc2lzdGVudCBhbmQgdmFyaWFibGUgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cblxuLyogL3NtYWxsIHtcbiAgICBmb250LXNpemU6IDgwJTtcbn0gKi9cblxuLy8gUHJldmVudHMgc3ViIGFuZCBzdXAgYWZmZWN0aW5nIGxpbmUtaGVpZ2h0IGluIGFsbCBicm93c2Vyc1xuLy8gZ2lzdC5naXRodWIuY29tLzQxMzkzMFxuXG5zdWIsXG5zdXAge1xuICAgIGZvbnQtc2l6ZTogNzUlO1xuICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1cCB7XG4gICAgdG9wOiAtMC41ZW07XG59XG5cbnN1YiB7XG4gICAgYm90dG9tOiAtMC4yNWVtO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTGlzdHNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIEFkZHJlc3NlcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBJRTYvN1xuQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICAgIGRsLFxuICAgIG1lbnUsXG4gICAgb2wsXG4gICAgdWwge1xuICAgICAgICAvL21hcmdpbjogMWVtIDA7XG4gICAgfVxufVxuXG5AaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgZGQge1xuICAgICAgICBtYXJnaW46IDAgMCAwIDQwcHg7XG4gICAgfVxufVxuXG4vLyBBZGRyZXNzZXMgcGFkZGluZ3Mgc2V0IGRpZmZlcmVudGx5IGluIElFNi83XG5AaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgbWVudSxcbiAgICBvbCxcbiAgICB1bCB7XG4gICAgICAgIC8vcGFkZGluZzogMCAwIDAgNDBweDtcbiAgICB9XG59XG5cbi8vIENvcnJlY3RzIGxpc3QgaW1hZ2VzIGhhbmRsZWQgaW5jb3JyZWN0bHkgaW4gSUU3XG5cbm5hdiB7XG4gICAgdWwsXG4gICAgb2wge1xuICAgICAgICBAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgICAgICAgICAvL2xpc3Qtc3R5bGUtaW1hZ2U6IG5vbmU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBFbWJlZGRlZCBjb250ZW50XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyAxLiBSZW1vdmVzIGJvcmRlciB3aGVuIGluc2lkZSAnYScgZWxlbWVudCBpbiBJRTYvNy84LzksIEZGM1xuLy8gMi4gSW1wcm92ZXMgaW1hZ2UgcXVhbGl0eSB3aGVuIHNjYWxlZCBpbiBJRTdcbi8vICAgIGNvZGUuZmxpY2tyLmNvbS9ibG9nLzIwMDgvMTEvMTIvb24tdWktcXVhbGl0eS10aGUtbGl0dGxlLXRoaW5ncy1jbGllbnQtc2lkZS1pbWFnZS1yZXNpemluZy9cblxuaW1nIHtcbiAgICBib3JkZXI6IDA7IC8vIDFcbiAgICBAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgICAgIC1tcy1pbnRlcnBvbGF0aW9uLW1vZGU6IGJpY3ViaWM7IC8vIDJcbiAgICB9XG59XG5cbi8vIENvcnJlY3RzIG92ZXJmbG93IGRpc3BsYXllZCBvZGRseSBpbiBJRTlcblxuc3ZnOm5vdCg6cm9vdCkge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBGaWd1cmVzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBBZGRyZXNzZXMgbWFyZ2luIG5vdCBwcmVzZW50IGluIElFNi83LzgvOSwgUzUsIE8xMVxuXG5maWd1cmUge1xuICAgIG1hcmdpbjogMDtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEZvcm1zXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBDb3JyZWN0cyBtYXJnaW4gZGlzcGxheWVkIG9kZGx5IGluIElFNi83XG5AaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgZm9ybSB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG59XG5cbi8vIERlZmluZSBjb25zaXN0ZW50IGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZ1xuXG5maWVsZHNldCB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2MwYzBjMDtcbiAgICBtYXJnaW46IDAgMnB4O1xuICAgIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTtcbn1cblxuLy8gMS4gQ29ycmVjdHMgY29sb3Igbm90IGJlaW5nIGluaGVyaXRlZCBpbiBJRTYvNy84Lzlcbi8vIDIuIFJlbW92ZSBwYWRkaW5nIHNvIHBlb3BsZSBhcmVuJ3QgY2F1Z2h0IG91dCBpZiB0aGV5IHplcm8gb3V0IGZpZWxkc2V0cy5cbi8vIDMuIENvcnJlY3RzIHRleHQgbm90IHdyYXBwaW5nIGluIEZGM1xuLy8gNC4gQ29ycmVjdHMgYWxpZ25tZW50IGRpc3BsYXllZCBvZGRseSBpbiBJRTYvN1xuXG5sZWdlbmQge1xuICAgIGJvcmRlcjogMDsgLy8gMVxuICAgIHBhZGRpbmc6IDA7IC8vIDJcbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsOyAvLyAzXG4gICAgQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICAgICAgICAqbWFyZ2luLWxlZnQ6IC03cHg7IC8vIDRcbiAgICB9XG59XG5cbi8vIDEuIENvcnJlY3QgZm9udCBmYW1pbHkgbm90IGJlaW5nIGluaGVyaXRlZCBpbiBhbGwgYnJvd3NlcnMuXG4vLyAyLiBDb3JyZWN0cyBmb250IHNpemUgbm90IGJlaW5nIGluaGVyaXRlZCBpbiBhbGwgYnJvd3NlcnNcbi8vIDMuIEFkZHJlc3NlcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBJRTYvNywgRkYzKywgUzUsIENocm9tZVxuLy8gNC4gSW1wcm92ZXMgYXBwZWFyYW5jZSBhbmQgY29uc2lzdGVuY3kgaW4gYWxsIGJyb3dzZXJzXG5cbmJ1dHRvbixcbmlucHV0LFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0OyAvLyAxXG4gICAgZm9udC1zaXplOiAxMDAlOyAvLyAyXG4gICAgbWFyZ2luOiAwOyAvLyAzXG4gICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAvLyA0XG4gICAgQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICAgICAgICAqdmVydGljYWwtYWxpZ246IG1pZGRsZTsgLy8gNFxuICAgIH1cbn1cblxuLy8gQWRkcmVzc2VzIEZGMy80IHNldHRpbmcgbGluZS1oZWlnaHQgb24gJ2lucHV0JyB1c2luZyAhaW1wb3J0YW50IGluIHRoZSBVQSBzdHlsZXNoZWV0XG5cbmJ1dHRvbiwgaW5wdXQge1xuICAgIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG59XG5cbi8vIEFkZHJlc3MgaW5jb25zaXN0ZW50IGB0ZXh0LXRyYW5zZm9ybWAgaW5oZXJpdGFuY2UgZm9yIGBidXR0b25gIGFuZCBgc2VsZWN0YC5cbi8vIEFsbCBvdGhlciBmb3JtIGNvbnRyb2wgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgYHRleHQtdHJhbnNmb3JtYCB2YWx1ZXMuXG4vLyBDb3JyZWN0IGBidXR0b25gIHN0eWxlIGluaGVyaXRhbmNlIGluIENocm9tZSwgU2FmYXJpIDUrLCBhbmQgSUUgOCsuXG4vLyBDb3JyZWN0IGBzZWxlY3RgIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3ggNCsgYW5kIE9wZXJhLlxuXG5idXR0b24sXG5zZWxlY3Qge1xuICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG4vLyAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYFxuLy8gICAgYW5kIGB2aWRlb2AgY29udHJvbHNcbi8vIDIuIENvcnJlY3RzIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgJ2lucHV0JyB0eXBlcyBpbiBpT1Ncbi8vIDMuIEltcHJvdmVzIHVzYWJpbGl0eSBhbmQgY29uc2lzdGVuY3kgb2YgY3Vyc29yIHN0eWxlIGJldHdlZW4gaW1hZ2UtdHlwZVxuLy8gICAgJ2lucHV0JyBhbmQgb3RoZXJzXG4vLyA0LiBSZW1vdmVzIGlubmVyIHNwYWNpbmcgaW4gSUU3IHdpdGhvdXQgYWZmZWN0aW5nIG5vcm1hbCB0ZXh0IGlucHV0c1xuLy8gICAgS25vd24gaXNzdWU6IGlubmVyIHNwYWNpbmcgcmVtYWlucyBpbiBJRTZcblxuYnV0dG9uLFxuaHRtbCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdLCAvLyAxXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLy8gMlxuICAgIGN1cnNvcjogcG9pbnRlcjsgLy8gM1xuICAgIEBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICAgICAgKm92ZXJmbG93OiB2aXNpYmxlOyAgLy8gNFxuICAgIH1cbn1cblxuLy8gUmUtc2V0IGRlZmF1bHQgY3Vyc29yIGZvciBkaXNhYmxlZCBlbGVtZW50c1xuXG5idXR0b25bZGlzYWJsZWRdLFxuaW5wdXRbZGlzYWJsZWRdIHtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbi8vIFJlbW92ZXMgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZGMytcbi8vIHd3dy5zaXRlcGVuLmNvbS9ibG9nLzIwMDgvMDUvMTQvdGhlLWRldmlscy1pbi10aGUtZGV0YWlscy1maXhpbmctZG9qb3MtdG9vbGJhci1idXR0b25zL1xuXG5idXR0b24sIGlucHV0IHtcbiAgICAmOjotbW96LWZvY3VzLWlubmVyIHtcbiAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgIH1cbn1cblxuLy8gMS4gUmVtb3ZlcyBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRTYvNy84Lzlcbi8vIDIuIEltcHJvdmVzIHJlYWRhYmlsaXR5IGFuZCBhbGlnbm1lbnQgaW4gYWxsIGJyb3dzZXJzXG5cbnRleHRhcmVhIHtcbiAgICBvdmVyZmxvdzogYXV0bzsgLy8gMVxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7IC8vIDJcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFRhYmxlc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzXG5cbnRhYmxlIHtcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG5pbnB1dCB7XG4gICAgLy8gMS4gQWRkcmVzc2VzIGFwcGVhcmFuY2Ugc2V0IHRvIHNlYXJjaGZpZWxkIGluIFM1LCBDaHJvbWVcbiAgICAvLyAyLiBBZGRyZXNzZXMgYm94LXNpemluZyBzZXQgdG8gYm9yZGVyLWJveCBpbiBTNSwgQ2hyb21lIChpbmNsdWRlIC1tb3ogdG8gZnV0dXJlLXByb29mKVxuICAgICZbdHlwZT1cInNlYXJjaFwiXSB7XG4gICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvLyAxXG4gICAgICAgIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgICAgIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7IC8vIDJcbiAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG5cbiAgICBcdC8vIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBzZWFyY2ggY2FuY2VsIGJ1dHRvbiBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lXG4gICAgICAgIC8vIG9uIE9TIFguXG4gICAgICAgICY6Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG4gICAgICAgICY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAgICAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBgY29udGVudC1ib3hgIGluIElFIDgvOS8xMC5cbiAgICAvLyAyLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgOC85LzEwLlxuICAgIC8vIDMuIFJlbW92ZXMgZXhjZXNzIHBhZGRpbmcgaW4gSUU3XG4gICAgLy8gICAgS25vd24gaXNzdWU6IGV4Y2VzcyBwYWRkaW5nIHJlbWFpbnMgaW4gSUU2XG4gICAgJlt0eXBlPVwiY2hlY2tib3hcIl0sXG4gICAgJlt0eXBlPVwicmFkaW9cIl0ge1xuICAgIFx0Ym94LXNpemluZzogYm9yZGVyLWJveDsgLy8gMVxuICAgIFx0cGFkZGluZzogMDsgLy8gMlxuICAgIFx0QGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICAgICAgICBcdCpoZWlnaHQ6IDEzcHg7IC8vIDNcbiAgICAgICAgXHQqd2lkdGg6IDEzcHg7IC8vIDNcbiAgICBcdH1cbiAgICB9XG59XG4iLCJhcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBuYXYsIHNlY3Rpb24sIHN1bW1hcnkge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG5hdWRpbywgY2FudmFzLCB2aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7IH1cblxuW2hpZGRlbl0sIHRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG5odG1sIHtcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgfVxuXG5ib2R5IHtcbiAgbWFyZ2luOiAwOyB9XG5cbmEge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgfVxuICBhOmhvdmVyLCBhOmFjdGl2ZSB7XG4gICAgb3V0bGluZTogMDsgfVxuXG4vKiBAaWYgXFwkbm9ybWFsaXplX2hlYWRpbmdzID09IHRydWUge1xuICAgIGgxIHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoMV9mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDFfbWFyZ2luO1xuICAgIH1cblxuICAgIGgyIHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoMl9mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDJfbWFyZ2luO1xuICAgIH1cblxuICAgIGgzIHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoM19mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDNfbWFyZ2luO1xuICAgIH1cblxuICAgIGg0IHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoNF9mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDRfbWFyZ2luO1xuICAgIH1cblxuICAgIGg1IHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoNV9mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDVfbWFyZ2luO1xuICAgIH1cblxuICAgIGg2IHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoNl9mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDZfbWFyZ2luO1xuICAgIH1cbn0gKi9cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDsgfVxuXG5iLCBzdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZDsgfVxuXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cblxubWFyayB7XG4gIGJhY2tncm91bmQ6ICNmZjA7XG4gIGNvbG9yOiAjMDAwOyB9XG5cbmNvZGUsIGtiZCwgcHJlLCBzYW1wIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgc2VyaWY7XG4gIGZvbnQtc2l6ZTogMWVtOyB9XG5cbnByZSB7XG4gIHdoaXRlLXNwYWNlOiBwcmU7XG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkOyB9XG5cbnEge1xuICBxdW90ZXM6IFwiXFwyMDFDXCIgXCJcXDIwMURcIiBcIlxcMjAxOFwiIFwiXFwyMDE5XCI7IH1cblxucTpiZWZvcmUsIHE6YWZ0ZXIge1xuICBjb250ZW50OiAnJztcbiAgY29udGVudDogbm9uZTsgfVxuXG4vKiAvc21hbGwge1xuICAgIGZvbnQtc2l6ZTogODAlO1xufSAqL1xuc3ViLCBzdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbnN1cCB7XG4gIHRvcDogLTAuNWVtOyB9XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTsgfVxuXG5pbWcge1xuICBib3JkZXI6IDA7IH1cblxuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuOyB9XG5cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMDsgfVxuXG5maWVsZHNldCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7XG4gIG1hcmdpbjogMCAycHg7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTsgfVxuXG5sZWdlbmQge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7XG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7IH1cblxuYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSB7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICBmb250LXNpemU6IDEwMCU7XG4gIG1hcmdpbjogMDtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbmJ1dHRvbiwgaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsOyB9XG5cbmJ1dHRvbiwgc2VsZWN0IHtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cblxuYnV0dG9uLCBodG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sIGlucHV0W3R5cGU9XCJyZXNldFwiXSwgaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xuICBjdXJzb3I6IHBvaW50ZXI7IH1cblxuYnV0dG9uW2Rpc2FibGVkXSwgaW5wdXRbZGlzYWJsZWRdIHtcbiAgY3Vyc29yOiBkZWZhdWx0OyB9XG5cbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lciwgaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7IH1cblxudGV4dGFyZWEge1xuICBvdmVyZmxvdzogYXV0bztcbiAgdmVydGljYWwtYWxpZ246IHRvcDsgfVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XG5cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7IH1cbiAgaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbiwgaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sIGlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHBhZGRpbmc6IDA7IH1cblxuaHRtbCB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7IH1cblxuYm9keSB7XG4gIGNvbG9yOiAjMzMzO1xuICBsaW5lLWhlaWdodDogMS41O1xuICBmb250LWZhbWlseTogTmV3cyBDeWNsZSwgc2Fucy1zZXJpZjtcbiAgYmFja2dyb3VuZC1zaXplOiBhdXRvIDI0cHg7XG4gIG1hcmdpbjogMDsgfVxuXG5bY2xhc3MqPSdfX2hlYWRpbmcnXSB7XG4gIGNvbG9yOiAjMjY3ZTY0O1xuICBmb250LWZhbWlseTogUGxheWZhaXIgRGlzcGxheSwgc2VyaWY7XG4gIGZvbnQtc2l6ZTogMi41cmVtO1xuICBmb250LXdlaWdodDogNDAwO1xuICBsaW5lLWhlaWdodDogMTtcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTsgfVxuXG5bY2xhc3MqPV9fYnV0dG9uXSwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSwgaW5wdXRbdHlwZT1cInJlc2V0XCJdIHtcbiAgYm9yZGVyOiAxcHggc29saWQgIzI2N2U2NDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmb250LWZhbWlseTogUGxheWZhaXIgRGlzcGxheSwgc2VyaWY7XG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgcGFkZGluZzogLjc1cmVtIDNyZW07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgLypJdGVtcyBmb3IgdHJhbnNpdGlvbiAqL1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgY29sb3I6ICMyNjdlNjQ7XG4gIC8qVHJhbnNpdGlvbiBzZXR0aW5ncyAqL1xuICB0cmFuc2l0aW9uOiBhbGwgLjJzIGVhc2U7IH1cbiAgW2NsYXNzKj1fX2J1dHRvbl06aG92ZXIsIGlucHV0W3R5cGU9XCJidXR0b25cIl06aG92ZXIsIGlucHV0W3R5cGU9XCJyZXNldFwiXTpob3ZlciB7XG4gICAgLypUaGVzZSB3aWxsIHRyYW5zaXRpb24gb24gaG92ZXIgKi9cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjY3ZTY0O1xuICAgIGNvbG9yOiAjZmZmOyB9XG5cbi5jbGVhcmZpeDphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGRpc3BsYXk6IHRhYmxlO1xuICBjbGVhcjogYm90aDsgfVxuXG5pbWcsIGlmcmFtZSwgZW1iZWQge1xuICB3aWR0aDogMTAwJTsgfVxuXG4uY29udGFpbmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjY2NjO1xuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjY2NjO1xuICBtYXJnaW46IDAgYXV0bztcbiAgbWF4LXdpZHRoOiAxMjAwcHg7IH1cblxuW2NsYXNzKj0nY29sLSddIHtcbiAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBbY2xhc3MqPSdjb2wtJ10ge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyB9IH1cblxuLmNvbC0yLTEyIHtcbiAgd2lkdGg6IDE2LjY2NjY3JTsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAuY29sLTItMTIge1xuICAgICAgd2lkdGg6IDEwMCU7IH0gfVxuXG4uY29sLTMtMTIge1xuICB3aWR0aDogMjUlOyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5jb2wtMy0xMiB7XG4gICAgICB3aWR0aDogMTAwJTsgfSB9XG5cbi5jb2wtNC0xMiB7XG4gIHdpZHRoOiAzMy4zMzMzMyU7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgLmNvbC00LTEyIHtcbiAgICAgIHdpZHRoOiAxMDAlOyB9IH1cblxuLmNvbC01LTEyIHtcbiAgd2lkdGg6IDQxLjY2NjY3JTsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAuY29sLTUtMTIge1xuICAgICAgd2lkdGg6IDEwMCU7IH0gfVxuXG4uY29sLTYtMTIge1xuICB3aWR0aDogNTAlOyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5jb2wtNi0xMiB7XG4gICAgICB3aWR0aDogMTAwJTsgfSB9XG5cbi5jb2wtNy0xMiB7XG4gIHdpZHRoOiA1OC4zMzMzMyU7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgLmNvbC03LTEyIHtcbiAgICAgIHdpZHRoOiAxMDAlOyB9IH1cblxuLmNvbC04LTEyIHtcbiAgd2lkdGg6IDY2LjY2NjY3JTsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAuY29sLTgtMTIge1xuICAgICAgd2lkdGg6IDEwMCU7IH0gfVxuXG4uY29sLTktMTIge1xuICB3aWR0aDogNzUlOyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5jb2wtOS0xMiB7XG4gICAgICB3aWR0aDogMTAwJTsgfSB9XG5cbi5jb2wtMTAtMTIge1xuICB3aWR0aDogODMuMzMzMzMlOyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5jb2wtMTAtMTIge1xuICAgICAgd2lkdGg6IDEwMCU7IH0gfVxuXG4uY29sLTExLTEyIHtcbiAgd2lkdGg6IDkxLjY2NjY3JTsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAuY29sLTExLTEyIHtcbiAgICAgIHdpZHRoOiAxMDAlOyB9IH1cblxuLmJyZWFkY3J1bWIge1xuICBwYWRkaW5nOiAxcmVtIDJyZW0gMCAycmVtO1xuICBmb250LXNpemU6IDE0cHg7IH1cbiAgLmJyZWFkY3J1bWIgYSB7XG4gICAgY29sb3I6ICMyNjdlNjQ7IH1cbiAgICAuYnJlYWRjcnVtYiBhOmhvdmVyIHtcbiAgICAgIGNvbG9yOiAjNDU1NjUyOyB9XG4gIC5icmVhZGNydW1iIHNwYW4ge1xuICAgIGNvbG9yOiAjN2Y3ZTdlOyB9XG5cbioge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cbiAgKjo6YWZ0ZXIsICo6OmJlZm9yZSB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuXG5ib2R5IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VjZWVlNjtcbiAgcGFkZGluZzogMDsgfVxuXG5hIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XG5cbnRhYmxlIHtcbiAgbWFyZ2luOiAwIDAgMS41ZW07XG4gIHdpZHRoOiAxMDAlOyB9XG5cbnRyIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlNWU2ZTc7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gICAgdHIge1xuICAgICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50OyB9XG4gICAgICB0cjpmaXJzdC1jaGlsZCB7XG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZTVlNmU3OyB9IH1cbiAgdHI6bnRoLWNoaWxkKGV2ZW4pIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4OyB9XG5cbnRkIHtcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgcGFkZGluZzogMTBweCA1cHg7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gICAgdGQge1xuICAgICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgcGFkZGluZy1sZWZ0OiA0MCU7IH1cbiAgICAgIHRkOmJlZm9yZSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiA2cHg7XG4gICAgICAgIGxlZnQ6IDZweDtcbiAgICAgICAgd2lkdGg6IDQwJTtcbiAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDsgfVxuICAgICAgdGQ6bnRoLW9mLXR5cGUoMSk6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogXCJDaXR5OiBcIjsgfVxuICAgICAgdGQ6bnRoLW9mLXR5cGUoMik6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogXCJBZGRyZXNzOiBcIjsgfVxuICAgICAgdGQ6bnRoLW9mLXR5cGUoMyk6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogXCJQaG9uZTogXCI7IH0gfVxuXG50aGVhZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlNWU2ZTc7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gICAgdGhlYWQgdHIge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAtOTk5OXB4O1xuICAgICAgbGVmdDogLTk5OTlweDsgfSB9XG4gIHRoZWFkIHRoIHtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgcGFkZGluZzogNXB4OyB9XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICB0YWJsZSwgdGhlYWQsIHRib2R5LCB0aCwgdGQsIHRyIHtcbiAgICBkaXNwbGF5OiBibG9jazsgfSB9XG5cbi5uYXYtbWlub3Ige1xuICBkaXNwbGF5OiBibG9jaztcbiAgdGV4dC1hbGlnbjogcmlnaHQ7IH1cbiAgLm5hdi1taW5vcl9fY29udGFpbmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2NjYztcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjY2NjO1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIHBhZGRpbmctcmlnaHQ6IDEuNXJlbTtcbiAgICBwYWRkaW5nLXRvcDogMXJlbTtcbiAgICBtYXgtd2lkdGg6IDEyMDBweDsgfVxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgLm5hdi1taW5vcl9fY29udGFpbmVyIHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyB9IH1cbiAgLm5hdi1taW5vciBsaSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG4gICAgLm5hdi1taW5vciBsaTphZnRlciB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBjb250ZW50OiAnIHwgJztcbiAgICAgIGNvbG9yOiAjMjY3ZTY0O1xuICAgICAgbWFyZ2luOiAwIDJweDsgfVxuICAgIC5uYXYtbWlub3IgbGk6bnRoLWNoaWxkKDMpOmFmdGVyIHtcbiAgICAgIGNvbnRlbnQ6ICcgJzsgfVxuICAgIC5uYXYtbWlub3IgbGk6bGFzdC1jaGlsZCBhIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG4gIC5uYXYtbWlub3JfX2xpbmsge1xuICAgIGNvbG9yOiAjMzMzO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBwYWRkaW5nOiAwIDByZW0gMCAuNXJlbTsgfVxuICAgIC5uYXYtbWlub3JfX2xpbms6aG92ZXIge1xuICAgICAgY29sb3I6ICMyNjdlNjQ7IH1cblxuLnNpdGUtbWFwIGEge1xuICBjb2xvcjogIzMzMzsgfVxuICAuc2l0ZS1tYXAgYTpob3ZlciB7XG4gICAgY29sb3I6ICMyNjdlNjQ7IH1cblxuYS5jZC1uYXYtaXRlbTpob3ZlciBpbWcge1xuICBvcGFjaXR5OiAuNyAhaW1wb3J0YW50OyB9XG5hLmNkLW5hdi1pdGVtOmhvdmVyIGgzIHtcbiAgY29sb3I6ICM0NTU2NTIgIWltcG9ydGFudDsgfVxuXG5AbWVkaWEgKG1heC13aWR0aDogMTAyMnB4KSB7XG4gIGJvZHkubmF2LW9uLWxlZnQub3ZlcmZsb3ctaGlkZGVuIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuOyB9IH1cblxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LW1zLWNsZWFyIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uLCBpbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLCBpbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1yZXN1bHRzLWJ1dHRvbiwgaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtcmVzdWx0cy1kZWNvcmF0aW9uIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqTWFpbiBjb21wb25lbnRzXG4gKlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogKi9cbi5jZC1tYWluLWNvbnRlbnQsIC5jZC1tYWluLWhlYWRlciB7XG4gIC8qIEZvcmNlIEhhcmR3YXJlIEFjY2VsZXJhdGlvbiBpbiBXZWJLaXQgKi9cbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtOyB9XG4gIC5jZC1tYWluLWNvbnRlbnQgdWwsIC5jZC1tYWluLWhlYWRlciB1bCB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTsgfVxuXG4uY2QtbWFpbi1jb250ZW50IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zczsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyMnB4KSB7XG4gICAgLmNkLW1haW4tY29udGVudC5uYXYtaXMtdmlzaWJsZSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTI2MHB4KTsgfVxuICAgIC5uYXYtb24tbGVmdCAuY2QtbWFpbi1jb250ZW50Lm5hdi1pcy12aXNpYmxlIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgyNjBweCk7IH0gfVxuXG4uY2QtbWFpbi1oZWFkZXIge1xuICBmb250LWZhbWlseTogUGxheWZhaXIgRGlzcGxheSwgc2VyaWY7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3M7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjJweCkge1xuICAgIC5jZC1tYWluLWhlYWRlci5uYXYtaXMtdmlzaWJsZSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7IH1cbiAgICAubmF2LW9uLWxlZnQgLmNkLW1haW4taGVhZGVyLm5hdi1pcy12aXNpYmxlIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgyNjBweCk7IH0gfVxuXG4uY2QtbWFpbi1jb250ZW50IHtcbiAgbWluLWhlaWdodDogMTAwdmg7XG4gIHotaW5kZXg6IDI7IH1cblxuLmNkLW1haW4taGVhZGVyIHtcbiAgaGVpZ2h0OiA1MHB4O1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICB6LWluZGV4OiAzO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2U1ZTZlNzsgfVxuICAubmF2LWlzLWZpeGVkIC5jZC1tYWluLWhlYWRlciB7XG4gICAgLyogYWRkIC5uYXYtaXMtZml4ZWQgY2xhc3MgdG8gYm9keSBpZiB5b3Ugd2FudCBhIGZpeGVkIG5hdmlnYXRpb24gb24gPiAxMDI0cHggKi9cbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IDEwMCU7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAgIC5jZC1tYWluLWhlYWRlciB7XG4gICAgICBoZWlnaHQ6IDgwcHg7IH1cbiAgICAgIC5jZC1tYWluLWhlYWRlcjphZnRlciB7XG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgICAgICBjbGVhcjogYm90aDsgfSB9XG5cbi5jZC1sb2dvIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDEycHg7XG4gIGxlZnQ6IDUlOyB9XG4gIC5jZC1sb2dvIGltZyB7XG4gICAgZGlzcGxheTogYmxvY2s7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjJweCkge1xuICAgIC5uYXYtb24tbGVmdCAuY2QtbG9nbyB7XG4gICAgICBsZWZ0OiBhdXRvO1xuICAgICAgcmlnaHQ6IDUlOyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAgIC5jZC1sb2dvIHtcbiAgICAgIHRvcDogMjZweDtcbiAgICAgIGxlZnQ6IDRlbTsgfSB9XG5cbi5jZC1oZWFkZXItYnV0dG9ucyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB0b3A6IDNweDtcbiAgcmlnaHQ6IDUlOyB9XG4gIC5jZC1oZWFkZXItYnV0dG9ucyBsaSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDIycHgpIHtcbiAgICAubmF2LW9uLWxlZnQgLmNkLWhlYWRlci1idXR0b25zIHtcbiAgICAgIHJpZ2h0OiBhdXRvO1xuICAgICAgbGVmdDogNSU7IH1cbiAgICAgIC5uYXYtb24tbGVmdCAuY2QtaGVhZGVyLWJ1dHRvbnMgbGkge1xuICAgICAgICBmbG9hdDogcmlnaHQ7IH0gfVxuICBAbWVkaWEgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gICAgLmNkLWhlYWRlci1idXR0b25zIHtcbiAgICAgIHRvcDogMXJlbTtcbiAgICAgIHJpZ2h0OiAxcmVtOyB9IH1cblxuLmNkLXNlYXJjaC10cmlnZ2VyLCAuY2QtbmF2LXRyaWdnZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogNDRweDtcbiAgaGVpZ2h0OiA0NHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAvKiBoaWRlIHRleHQgKi9cbiAgY29sb3I6IHRyYW5zcGFyZW50O1xuICB6LWluZGV4OiAzOyB9XG5cbi5jZC1zZWFyY2gtdHJpZ2dlcjo6YmVmb3JlLCAuY2Qtc2VhcmNoLXRyaWdnZXI6OmFmdGVyIHtcbiAgLyogc2VhcmNoIGljb24gKi9cbiAgY29udGVudDogJyc7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xuICAvKiBGb3JjZSBIYXJkd2FyZSBBY2NlbGVyYXRpb24gaW4gV2ViS2l0ICovXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuOyB9XG4uY2Qtc2VhcmNoLXRyaWdnZXI6OmJlZm9yZSB7XG4gIC8qIGxlbnMgKi9cbiAgdG9wOiAxMXB4O1xuICBsZWZ0OiAxMXB4O1xuICB3aWR0aDogMThweDtcbiAgaGVpZ2h0OiAxOHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIGJvcmRlcjogM3B4IHNvbGlkICM0NTU2NTI7IH1cbi5jZC1zZWFyY2gtdHJpZ2dlcjo6YWZ0ZXIge1xuICAvKiBoYW5kbGUgKi9cbiAgaGVpZ2h0OiAzcHg7XG4gIHdpZHRoOiA4cHg7XG4gIGJhY2tncm91bmQ6ICM0NTU2NTI7XG4gIGJvdHRvbTogMTRweDtcbiAgcmlnaHQ6IDExcHg7XG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTsgfVxuLmNkLXNlYXJjaC10cmlnZ2VyIHNwYW4ge1xuICAvKiBjb250YWluZXIgZm9yIHRoZSBYIGljb24gKi9cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7IH1cbi5jZC1zZWFyY2gtdHJpZ2dlciBzcGFuOjpiZWZvcmUsIC5jZC1zZWFyY2gtdHJpZ2dlciBzcGFuOjphZnRlciB7XG4gIC8qIGNsb3NlIGljb24gKi9cbiAgY29udGVudDogJyc7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBoZWlnaHQ6IDNweDtcbiAgd2lkdGg6IDIycHg7XG4gIHRvcDogNTAlO1xuICBtYXJnaW4tdG9wOiAtMnB4O1xuICBsZWZ0OiA1MCU7XG4gIG1hcmdpbi1sZWZ0OiAtMTFweDtcbiAgYmFja2dyb3VuZDogIzQ1NTY1MjtcbiAgb3BhY2l0eTogMDtcbiAgLyogRm9yY2UgSGFyZHdhcmUgQWNjZWxlcmF0aW9uIGluIFdlYktpdCAqL1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzLCB0cmFuc2Zvcm0gMC4zczsgfVxuLmNkLXNlYXJjaC10cmlnZ2VyIHNwYW46OmJlZm9yZSB7XG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTsgfVxuLmNkLXNlYXJjaC10cmlnZ2VyIHNwYW46OmFmdGVyIHtcbiAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTsgfVxuLmNkLXNlYXJjaC10cmlnZ2VyLnNlYXJjaC1pcy12aXNpYmxlOjpiZWZvcmUsIC5jZC1zZWFyY2gtdHJpZ2dlci5zZWFyY2gtaXMtdmlzaWJsZTo6YWZ0ZXIge1xuICAvKiBoaWRlIHNlYXJjaCBpY29uICovXG4gIG9wYWNpdHk6IDA7IH1cbi5jZC1zZWFyY2gtdHJpZ2dlci5zZWFyY2gtaXMtdmlzaWJsZSBzcGFuOjpiZWZvcmUsIC5jZC1zZWFyY2gtdHJpZ2dlci5zZWFyY2gtaXMtdmlzaWJsZSBzcGFuOjphZnRlciB7XG4gIC8qIHNob3cgY2xvc2UgaWNvbiAqL1xuICBvcGFjaXR5OiAxOyB9XG4uY2Qtc2VhcmNoLXRyaWdnZXIuc2VhcmNoLWlzLXZpc2libGUgc3Bhbjo6YmVmb3JlIHtcbiAgdHJhbnNmb3JtOiByb3RhdGUoMTM1ZGVnKTsgfVxuLmNkLXNlYXJjaC10cmlnZ2VyLnNlYXJjaC1pcy12aXNpYmxlIHNwYW46OmFmdGVyIHtcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpOyB9XG5cbi5jZC1uYXYtdHJpZ2dlciBzcGFuLCAuY2QtbmF2LXRyaWdnZXIgc3Bhbjo6YmVmb3JlLCAuY2QtbmF2LXRyaWdnZXIgc3Bhbjo6YWZ0ZXIge1xuICAvKiBoYW1idXJnZXIgaWNvbiBpbiBDU1MgKi9cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGhlaWdodDogM3B4O1xuICB3aWR0aDogMjRweDtcbiAgYmFja2dyb3VuZDogIzQ1NTY1MjsgfVxuLmNkLW5hdi10cmlnZ2VyIHNwYW4ge1xuICAvKiBsaW5lIGluIHRoZSBjZW50ZXIgKi9cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgcmlnaHQ6IDEwcHg7XG4gIG1hcmdpbi10b3A6IC0ycHg7XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQgMC4zcyAwLjNzOyB9XG4uY2QtbmF2LXRyaWdnZXIgc3Bhbjo6YmVmb3JlLCAuY2QtbmF2LXRyaWdnZXIgc3Bhbjo6YWZ0ZXIge1xuICAvKiBvdGhlciAyIGxpbmVzICovXG4gIGNvbnRlbnQ6ICcnO1xuICByaWdodDogMDtcbiAgLyogRm9yY2UgSGFyZHdhcmUgQWNjZWxlcmF0aW9uIGluIFdlYktpdCAqL1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgdHJhbnNmb3JtLW9yaWdpbjogMCUgNTAlO1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcyAwLjNzOyB9XG4uY2QtbmF2LXRyaWdnZXIgc3Bhbjo6YmVmb3JlIHtcbiAgLyogbWVudSBpY29uIHRvcCBsaW5lICovXG4gIHRvcDogLTZweDsgfVxuLmNkLW5hdi10cmlnZ2VyIHNwYW46OmFmdGVyIHtcbiAgLyogbWVudSBpY29uIGJvdHRvbSBsaW5lICovXG4gIHRvcDogNnB4OyB9XG4uY2QtbmF2LXRyaWdnZXIubmF2LWlzLXZpc2libGUgc3BhbiB7XG4gIC8qIGhpZGUgbGluZSBpbiB0aGUgY2VudGVyICovXG4gIGJhY2tncm91bmQ6IHJnYmEoNjksIDg2LCA4MiwgMCk7IH1cbi5jZC1uYXYtdHJpZ2dlci5uYXYtaXMtdmlzaWJsZSBzcGFuOjpiZWZvcmUsIC5jZC1uYXYtdHJpZ2dlci5uYXYtaXMtdmlzaWJsZSBzcGFuOjphZnRlciB7XG4gIC8qIGtlZXAgdmlzaWJsZSBvdGhlciAyIGxpbmVzICovXG4gIGJhY2tncm91bmQ6ICM0NTU2NTI7IH1cbi5jZC1uYXYtdHJpZ2dlci5uYXYtaXMtdmlzaWJsZSBzcGFuOjpiZWZvcmUge1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNHB4KSB0cmFuc2xhdGVZKC0zcHgpIHJvdGF0ZSg0NWRlZyk7IH1cbi5jZC1uYXYtdHJpZ2dlci5uYXYtaXMtdmlzaWJsZSBzcGFuOjphZnRlciB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCg0cHgpIHRyYW5zbGF0ZVkoMnB4KSByb3RhdGUoLTQ1ZGVnKTsgfVxuQG1lZGlhIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAuY2QtbmF2LXRyaWdnZXIge1xuICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxuXG4uY2QtcHJpbWFyeS1uYXYsIC5jZC1wcmltYXJ5LW5hdiB1bCB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMjYwcHg7XG4gIGJhY2tncm91bmQ6ICM0NTU2NTI7XG4gIG92ZXJmbG93OiBhdXRvO1xuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XG4gIHotaW5kZXg6IDE7XG4gIC8qIEZvcmNlIEhhcmR3YXJlIEFjY2VsZXJhdGlvbiBpbiBXZWJLaXQgKi9cbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzOyB9XG4gIC5jZC1wcmltYXJ5LW5hdiBhLCAuY2QtcHJpbWFyeS1uYXYgdWwgYSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG4gICAgaGVpZ2h0OiA1MHB4O1xuICAgIGxpbmUtaGVpZ2h0OiA1MHB4O1xuICAgIHBhZGRpbmc6IDAgMjBweDtcbiAgICBjb2xvcjogI2ZmZjtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzUwNjQ1ZjtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG4gICAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybSwgb3BhY2l0eTtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcywgb3BhY2l0eSAwLjNzOyB9XG4gIC5jZC1wcmltYXJ5LW5hdi5pcy1oaWRkZW4sIC5jZC1wcmltYXJ5LW5hdiB1bC5pcy1oaWRkZW4ge1xuICAgIC8qIHNlY29uZGFyeSBuYXZpZ2F0aW9ucyBoaWRkZW4gYnkgZGVmYXVsdCAqL1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTsgfVxuICAuY2QtcHJpbWFyeS1uYXYubW92ZXMtb3V0ID4gbGkgPiBhLCAuY2QtcHJpbWFyeS1uYXYgdWwubW92ZXMtb3V0ID4gbGkgPiBhIHtcbiAgICAvKiBwdXNoIHRoZSBuYXZpZ2F0aW9uIGl0ZW1zIHRvIHRoZSBsZWZ0IC0gYW5kIGxvd2VyIGRvd24gb3BhY2l0eSAtIHdoZW4gc2Vjb25kYXJ5IG5hdiBzbGlkZXMgaW4gKi9cbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpO1xuICAgIG9wYWNpdHk6IDA7IH1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDEwMjJweCkge1xuICAubmF2LW9uLWxlZnQgLmNkLXByaW1hcnktbmF2LCAubmF2LW9uLWxlZnQgLmNkLXByaW1hcnktbmF2IHVsIHtcbiAgICByaWdodDogYXV0bztcbiAgICBsZWZ0OiAwOyB9IH1cblxuLmNkLXByaW1hcnktbmF2IC5zZWUtYWxsIGEge1xuICAvKiBkaWZmZXJlbnQgc3R5bGUgZm9yIHRoZSBTZWUgYWxsIGJ1dHRvbiBvbiBtb2JpbGUgYW5kIHRhYmxldCAqL1xuICBjb2xvcjogIzI2N2U2NDsgfVxuLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtZ2FsbGVyeSAuY2QtbmF2LWl0ZW0sIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWljb25zIC5jZC1uYXYtaXRlbSB7XG4gIC8qIGl0ZW1zIHdpdGggcGljdHVyZSAob3IgaWNvbikgYW5kIHRpdGxlICovXG4gIGhlaWdodDogODBweDtcbiAgbGluZS1oZWlnaHQ6IDgwcHg7IH1cbiAgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtZ2FsbGVyeSAuY2QtbmF2LWl0ZW0gaDMsIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWljb25zIC5jZC1uYXYtaXRlbSBoMyB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgfVxuLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtZ2FsbGVyeSAuY2QtbmF2LWl0ZW0gaW1nIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiA0MHB4O1xuICB3aWR0aDogYXV0bztcbiAgbGVmdDogMjBweDtcbiAgdG9wOiA1MCU7XG4gIG1hcmdpbi10b3A6IC0yMHB4OyB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDIycHgpIHtcbiAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1nYWxsZXJ5IC5jZC1uYXYtaXRlbSBpbWcge1xuICAgICAgZGlzcGxheTogbm9uZTsgfSB9XG4uY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyAuY2QtbmF2LWl0ZW0ge1xuICBwYWRkaW5nLWxlZnQ6IDc1cHg7IH1cbiAgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtaWNvbnMgLmNkLW5hdi1pdGVtIHAge1xuICAgIGNvbG9yOiAjNDU1NjUyO1xuICAgIGZvbnQtc2l6ZTogMS4zcmVtO1xuICAgIC8qIGhpZGUgZGVzY3JpcHRpb24gb24gc21hbGwgZGV2aWNlcyAqL1xuICAgIGRpc3BsYXk6IG5vbmU7IH1cbiAgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtaWNvbnMgLmNkLW5hdi1pdGVtOjpiZWZvcmUge1xuICAgIC8qIGl0ZW0gaWNvbiAqL1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAyMHB4O1xuICAgIHRvcDogNTAlO1xuICAgIG1hcmdpbi10b3A6IC0yMHB4O1xuICAgIHdpZHRoOiA0MHB4O1xuICAgIGhlaWdodDogNDBweDtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1zaXplOiA0MHB4IDQwcHg7IH1cbiAgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtaWNvbnMgLmNkLW5hdi1pdGVtLml0ZW0tMTo6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvaW1hZ2VzL2xpbmUtaWNvbi0xLnN2Z1wiKTsgfVxuICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyAuY2QtbmF2LWl0ZW0uaXRlbS0yOjpiZWZvcmUge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi9pbWFnZXMvbGluZS1pY29uLTIuc3ZnXCIpOyB9XG4gIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWljb25zIC5jZC1uYXYtaXRlbS5pdGVtLTM6OmJlZm9yZSB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL2ltYWdlcy9saW5lLWljb24tMy5zdmdcIik7IH1cbiAgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtaWNvbnMgLmNkLW5hdi1pdGVtLml0ZW0tNDo6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvaW1hZ2VzL2xpbmUtaWNvbi00LnN2Z1wiKTsgfVxuICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyAuY2QtbmF2LWl0ZW0uaXRlbS01OjpiZWZvcmUge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi9pbWFnZXMvbGluZS1pY29uLTUuc3ZnXCIpOyB9XG4gIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWljb25zIC5jZC1uYXYtaXRlbS5pdGVtLTY6OmJlZm9yZSB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL2ltYWdlcy9saW5lLWljb24tNi5zdmdcIik7IH1cbiAgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtaWNvbnMgLmNkLW5hdi1pdGVtLml0ZW0tNzo6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvaW1hZ2VzL2xpbmUtaWNvbi03LnN2Z1wiKTsgfVxuICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyAuY2QtbmF2LWl0ZW0uaXRlbS04OjpiZWZvcmUge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi9pbWFnZXMvbGluZS1pY29uLTguc3ZnXCIpOyB9XG5AbWVkaWEgKG1heC13aWR0aDogMTAyMnB4KSB7XG4gIC5jZC1wcmltYXJ5LW5hdiB7XG4gICAgLyogYnkgZGVmYXVsdCAuY2QtcHJpbWFyeS1uYXYgaXMgaGlkZGVuIC0gdHJpY2sgZm9yIGlPUyBkZXZpY2VzIHdoZXJlIHlvdSBjYW4gc2VlIHRoZSBuYXZpZ2F0aW9uIGlmIHlvdSBwdWxsIGRvd24gKi9cbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgdHJhbnNpdGlvbjogdmlzaWJpbGl0eSAwcyAwLjNzOyB9XG4gICAgLmNkLXByaW1hcnktbmF2Lm5hdi1pcy12aXNpYmxlIHtcbiAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgICB0cmFuc2l0aW9uOiB2aXNpYmlsaXR5IDBzIDBzOyB9IH1cblxuQG1lZGlhIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAuY2QtcHJpbWFyeS1uYXYge1xuICAgIHBvc2l0aW9uOiBzdGF0aWM7XG4gICAgcGFkZGluZzogMCA1MHB4IDAgMDtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gICAgLmNkLXByaW1hcnktbmF2OmFmdGVyIHtcbiAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICBkaXNwbGF5OiB0YWJsZTtcbiAgICAgIGNsZWFyOiBib3RoOyB9XG4gICAgLmNkLXByaW1hcnktbmF2Lm1vdmVzLW91dCA+IGxpID4gYSB7XG4gICAgICAvKiByZXNldCBtb2JpbGUgc3R5bGUgKi9cbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcbiAgICAgIG9wYWNpdHk6IDE7IH1cbiAgICAuY2QtcHJpbWFyeS1uYXYgdWwge1xuICAgICAgcG9zaXRpb246IHN0YXRpYztcbiAgICAgIGhlaWdodDogYXV0bztcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICB6LWluZGV4OiAzOyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgdWwuaXMtaGlkZGVuIHtcbiAgICAgICAgLyogcmVzZXQgbW9iaWxlIHN0eWxlICovXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTsgfVxuICAgICAgLmNkLXByaW1hcnktbmF2IHVsLm1vdmVzLW91dCA+IGxpID4gYSB7XG4gICAgICAgIC8qIHJlc2V0IG1vYmlsZSBzdHlsZSAqL1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG4gICAgICAgIG9wYWNpdHk6IDE7IH1cbiAgICAuY2QtcHJpbWFyeS1uYXYgPiBsaSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBtYXJnaW4tbGVmdDogLjVyZW07IH1cbiAgICAuY2QtcHJpbWFyeS1uYXYgPiBsaSA+IGEge1xuICAgICAgLyogbWFpbiBuYXZpZ2F0aW9uIGJ1dHRvbnMgc3R5bGUgKi9cbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIGhlaWdodDogODBweDtcbiAgICAgIGxpbmUtaGVpZ2h0OiA4MHB4O1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGNvbG9yOiAjNDU1NjUyO1xuICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgICBib3JkZXItYm90dG9tOiBub25lO1xuICAgICAgdHJhbnNpdGlvbjogY29sb3IgMC4zcywgYm94LXNoYWRvdyAwLjNzOyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgPiBsaSA+IGE6aG92ZXIge1xuICAgICAgICBjb2xvcjogIzI2N2U2NDsgfVxuICAgICAgLmNkLXByaW1hcnktbmF2ID4gbGkgPiBhLnNlbGVjdGVkIHtcbiAgICAgICAgY29sb3I6ICMyNjdlNjQ7XG4gICAgICAgIGJveC1zaGFkb3c6IGluc2V0IDAgLTJweCAwICMyNjdlNjQ7IH1cbiAgICAuY2QtcHJpbWFyeS1uYXYgLmdvLWJhY2ssIC5jZC1wcmltYXJ5LW5hdiAuc2VlLWFsbCB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9XG4gICAgLmNkLXByaW1hcnktbmF2IC5jZC1zZWNvbmRhcnktbmF2LCAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1nYWxsZXJ5LCAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyB7XG4gICAgICAvKiBkcm9wZG93biBtZW51IHN0eWxlICovXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDgwcHg7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICBwYWRkaW5nOiAycmVtO1xuICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAxcHggMCAjZTVlNmU3LCAwIDNweCA2cHggcmdiYSgwLCAwLCAwLCAwLjA1KTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcbiAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjNzIDBzLCB2aXNpYmlsaXR5IDBzIDBzOyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLXNlY29uZGFyeS1uYXY6YWZ0ZXIsIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWdhbGxlcnk6YWZ0ZXIsIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWljb25zOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgZGlzcGxheTogdGFibGU7XG4gICAgICAgIGNsZWFyOiBib3RoOyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLXNlY29uZGFyeS1uYXYuaXMtaGlkZGVuLCAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1nYWxsZXJ5LmlzLWhpZGRlbiwgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtaWNvbnMuaXMtaGlkZGVuIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC4zcyAwcywgdmlzaWJpbGl0eSAwcyAuM3M7IH1cbiAgICAgIC5jZC1wcmltYXJ5LW5hdiAuY2Qtc2Vjb25kYXJ5LW5hdiA+IC5zZWUtYWxsLCAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1nYWxsZXJ5ID4gLnNlZS1hbGwsIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWljb25zID4gLnNlZS1hbGwge1xuICAgICAgICAvKiB0aGlzIGlzIHRoZSBCSUcgU2VlIGFsbCBidXR0b24gYXQgdGhlIGJvdHRvbSBvZiB0aGUgZHJvcGRvd24gbWVudSAqL1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICBib3R0b206IDA7XG4gICAgICAgIGhlaWdodDogODBweDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIC8qIHJlc2V0IHNvbWUgaW5oZXJpdGVkIHN0eWxlICovXG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgcGFkZGluZzogMDsgfVxuICAgICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLXNlY29uZGFyeS1uYXYgPiAuc2VlLWFsbCBhLCAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1nYWxsZXJ5ID4gLnNlZS1hbGwgYSwgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtaWNvbnMgPiAuc2VlLWFsbCBhIHtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMi4ycmVtO1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogODBweDtcbiAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2U1ZTZlNztcbiAgICAgICAgICAvKiByZXNldCBzb21lIGluaGVyaXRlZCBzdHlsZSAqL1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgdHJhbnNpdGlvbjogY29sb3IgMC4ycywgYmFja2dyb3VuZCAwLjJzLCBib3JkZXIgMC4yczsgfVxuICAgICAgICAgIC5jZC1wcmltYXJ5LW5hdiAuY2Qtc2Vjb25kYXJ5LW5hdiA+IC5zZWUtYWxsIGE6aG92ZXIsIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWdhbGxlcnkgPiAuc2VlLWFsbCBhOmhvdmVyLCAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyA+IC5zZWUtYWxsIGE6aG92ZXIge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogIzQ1NTY1MjtcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogIzQ1NTY1MjtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmOyB9XG4gICAgLmNkLXByaW1hcnktbmF2IC5jZC1zZWNvbmRhcnktbmF2ID4gbGkge1xuICAgICAgLyogY2hhbmdlIHRoZSBoZWlnaHQgYWNjb3JkaW5nIHRvIHlvdXIgbmVlZHMgLSB5b3UgY2FuIGV2ZW4gc2V0IGhlaWdodDogYXV0byAqL1xuICAgICAgaGVpZ2h0OiAzNDBweDtcbiAgICAgIC8qIGhlcmUgeW91IHNldCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgLSB1c2Ugd2lkdGggcGVyY2VudGFnZSAqL1xuICAgICAgd2lkdGg6IDIzJTtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAyLjY2JTtcbiAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNlNWU2ZTc7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDsgfVxuICAgICAgLmNkLXByaW1hcnktbmF2IC5jZC1zZWNvbmRhcnktbmF2ID4gbGk6bnRoLWNoaWxkKDRuKzIpIHtcbiAgICAgICAgLyogKzIgYmVjYXVzZSB3ZSBoYXZlIDIgbGlzdCBpdGVtcyB3aXRoIGRpc3BsYXk6bm9uZSAqL1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICAgIGJvcmRlci1yaWdodDogbm9uZTsgfVxuICAgICAgLmNkLXByaW1hcnktbmF2IC5jZC1zZWNvbmRhcnktbmF2ID4gbGkgPiBhIHtcbiAgICAgICAgLyogc2Vjb25kYXJ5IG5hdiB0aXRsZSAqL1xuICAgICAgICBjb2xvcjogIzI2N2U2NDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgIGZvbnQtc2l6ZTogMS42cmVtO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAuNmVtOyB9XG4gICAgLmNkLXByaW1hcnktbmF2IC5jZC1zZWNvbmRhcnktbmF2IGEge1xuICAgICAgaGVpZ2h0OiAzMHB4O1xuICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICBwYWRkaW5nOiAwIDE4JSAwIDA7XG4gICAgICBjb2xvcjogIzQ1NTY1MjtcbiAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gICAgICBmb250LXNpemU6IDEuNHJlbTsgfVxuICAgICAgLmNkLXByaW1hcnktbmF2IC5jZC1zZWNvbmRhcnktbmF2IGE6aG92ZXIge1xuICAgICAgICBjb2xvcjogIzI2N2U2NDsgfVxuICAgIC5jZC1wcmltYXJ5LW5hdiAuY2Qtc2Vjb25kYXJ5LW5hdiB1bCB7XG4gICAgICAvKiBGb3JjZSBIYXJkd2FyZSBBY2NlbGVyYXRpb24gaW4gV2ViS2l0ICovXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7IH1cbiAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLXNlY29uZGFyeS1uYXYgdWwgdWwge1xuICAgICAgLyogdGVydGlhcnkgbmF2aWdhdGlvbiAqL1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgbGVmdDogMDtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIHdpZHRoOiAxMDAlOyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLXNlY29uZGFyeS1uYXYgdWwgdWwuaXMtaGlkZGVuIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpOyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLXNlY29uZGFyeS1uYXYgdWwgdWwgLmdvLWJhY2sge1xuICAgICAgICBkaXNwbGF5OiBibG9jazsgfVxuICAgICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLXNlY29uZGFyeS1uYXYgdWwgdWwgLmdvLWJhY2sgYSB7XG4gICAgICAgICAgY29sb3I6IHRyYW5zcGFyZW50OyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLXNlY29uZGFyeS1uYXYgdWwgdWwgLnNlZS1hbGwge1xuICAgICAgICBkaXNwbGF5OiBibG9jazsgfVxuICAgIC5jZC1wcmltYXJ5LW5hdiAuY2Qtc2Vjb25kYXJ5LW5hdiAubW92ZXMtb3V0ID4gbGkgPiBhIHtcbiAgICAgIC8qIHB1c2ggdGhlIG5hdmlnYXRpb24gaXRlbXMgdG8gdGhlIGxlZnQgLSBhbmQgbG93ZXIgZG93biBvcGFjaXR5IC0gd2hlbiB0ZXJ0aWFyeSBuYXYgc2xpZGVzIGluICovXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpOyB9XG4gICAgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtZ2FsbGVyeSB7XG4gICAgICBib3gtc2hhZG93OiAwIDVweCA1cHggcmdiYSgxMDAsIDEwMCwgMTAwLCAwLjMpOyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1nYWxsZXJ5IGxpIHtcbiAgICAgICAgLyogc2V0IGhlcmUgbnVtYmVyIG9mIGNvbHVtbnMgLSB1c2Ugd2lkdGggcGVyY2VudGFnZSAqL1xuICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgd2lkdGg6IDI1JTtcbiAgICAgICAgcGFkZGluZzogMXJlbTsgfVxuICAgICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1nYWxsZXJ5IGxpOm50aC1jaGlsZCg0bisyKSB7XG4gICAgICAgICAgLyogKzIgYmVjYXVzZSB3ZSBoYXZlIHR3byBhZGRpdGlvbmFsIGxpc3QgaXRlbXMgd2l0aCBkaXNwbGF5Om5vbmUgKi8gfVxuICAgICAgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtZ2FsbGVyeSAuY2QtbmF2LWl0ZW0ge1xuICAgICAgICBib3JkZXItYm90dG9tOiBub25lO1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjI7IH1cbiAgICAgICAgLmNkLXByaW1hcnktbmF2IC5jZC1uYXYtZ2FsbGVyeSAuY2QtbmF2LWl0ZW0gaW1nIHtcbiAgICAgICAgICBwb3NpdGlvbjogc3RhdGljO1xuICAgICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IC42cmVtOyB9XG4gICAgICAgIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWdhbGxlcnkgLmNkLW5hdi1pdGVtIGgzIHtcbiAgICAgICAgICBjb2xvcjogIzI2N2U2NDtcbiAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICBmb250LXNpemU6IC45cmVtO1xuICAgICAgICAgIHBhZGRpbmc6IDAgLjRyZW07IH1cbiAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyBsaSB7XG4gICAgICAvKiBzZXQgaGVyZSBudW1iZXIgb2YgY29sdW1ucyAtIHVzZSB3aWR0aCBwZXJjZW50YWdlICovXG4gICAgICB3aWR0aDogMzIlO1xuICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICBtYXJnaW46IDAgMiUgMjBweCAwOyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyBsaTpudGgtY2hpbGQoM24rMikge1xuICAgICAgICAvKiArMiBiZWNhdXNlIHdlIGhhdmUgdHdvIGFkZGl0aW9uYWwgbGlzdCBpdGVtcyB3aXRoIGRpc3BsYXk6bm9uZSAqL1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7IH1cbiAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyAuY2QtbmF2LWl0ZW0ge1xuICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgICAgIGhlaWdodDogODBweDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjI7XG4gICAgICBwYWRkaW5nOiAyNHB4IDAgMCA4NXB4OyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyAuY2QtbmF2LWl0ZW06aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZmFmYWZiOyB9XG4gICAgICAuY2QtcHJpbWFyeS1uYXYgLmNkLW5hdi1pY29ucyAuY2QtbmF2LWl0ZW0gaDMge1xuICAgICAgICBjb2xvcjogIzI2N2U2NDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cbiAgICAgIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWljb25zIC5jZC1uYXYtaXRlbSBwIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7IH1cbiAgICAgIC5jZC1wcmltYXJ5LW5hdiAuY2QtbmF2LWljb25zIC5jZC1uYXYtaXRlbTo6YmVmb3JlIHtcbiAgICAgICAgbGVmdDogMjVweDsgfSB9XG5cbi5oYXMtY2hpbGRyZW4gPiBhLCAuZ28tYmFjayBhIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gIC5oYXMtY2hpbGRyZW4gPiBhOjpiZWZvcmUsIC5oYXMtY2hpbGRyZW4gPiBhOjphZnRlciwgLmdvLWJhY2sgYTo6YmVmb3JlLCAuZ28tYmFjayBhOjphZnRlciB7XG4gICAgLyogYXJyb3cgaWNvbiBpbiBDU1MgLSBmb3IgZWxlbWVudCB3aXRoIG5lc3RlZCB1bm9yZGVyZWQgbGlzdHMgKi9cbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA1MCU7XG4gICAgbWFyZ2luLXRvcDogLTFweDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgaGVpZ2h0OiAycHg7XG4gICAgd2lkdGg6IDEwcHg7XG4gICAgYmFja2dyb3VuZDogIzVjNzI2ZDtcbiAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47IH1cbiAgLmhhcy1jaGlsZHJlbiA+IGE6OmJlZm9yZSwgLmdvLWJhY2sgYTo6YmVmb3JlIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7IH1cbiAgLmhhcy1jaGlsZHJlbiA+IGE6OmFmdGVyLCAuZ28tYmFjayBhOjphZnRlciB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gICAgLmhhcy1jaGlsZHJlbiA+IGE6OmJlZm9yZSwgLmhhcy1jaGlsZHJlbiA+IGE6OmFmdGVyLCAuZ28tYmFjayBhOjpiZWZvcmUsIC5nby1iYWNrIGE6OmFmdGVyIHtcbiAgICAgIGJhY2tncm91bmQ6ICNjYWNkY2Y7IH1cbiAgICAuaGFzLWNoaWxkcmVuID4gYTpob3Zlcjo6YmVmb3JlLCAuaGFzLWNoaWxkcmVuID4gYTpob3Zlcjo6YWZ0ZXIsIC5nby1iYWNrIGE6aG92ZXI6OmJlZm9yZSwgLmdvLWJhY2sgYTpob3Zlcjo6YWZ0ZXIge1xuICAgICAgYmFja2dyb3VuZDogIzI2N2U2NDsgfSB9XG5cbi5oYXMtY2hpbGRyZW4gPiBhIHtcbiAgcGFkZGluZy1yaWdodDogNDBweDsgfVxuICAuaGFzLWNoaWxkcmVuID4gYTo6YmVmb3JlLCAuaGFzLWNoaWxkcmVuID4gYTo6YWZ0ZXIge1xuICAgIC8qIGFycm93IGdvZXMgb24gdGhlIHJpZ2h0IHNpZGUgLSBjaGlsZHJlbiBuYXZpZ2F0aW9uICovXG4gICAgcmlnaHQ6IDIwcHg7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogOXB4IDUwJTsgfVxuXG4uY2QtcHJpbWFyeS1uYXYgLmdvLWJhY2sgYSB7XG4gIHBhZGRpbmctbGVmdDogNDBweDsgfVxuICAuY2QtcHJpbWFyeS1uYXYgLmdvLWJhY2sgYTo6YmVmb3JlLCAuY2QtcHJpbWFyeS1uYXYgLmdvLWJhY2sgYTo6YWZ0ZXIge1xuICAgIC8qIGFycm93IGdvZXMgb24gdGhlIGxlZnQgc2lkZSAtIGdvIGJhY2sgYnV0dG9uICovXG4gICAgbGVmdDogMjBweDtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiAxcHggNTAlOyB9XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMDI0cHgpIHtcbiAgLmhhcy1jaGlsZHJlbiA+IGE6OmJlZm9yZSwgLmhhcy1jaGlsZHJlbiA+IGE6OmFmdGVyIHtcbiAgICByaWdodDogMTUlOyB9XG4gIC5jZC1wcmltYXJ5LW5hdiA+IC5oYXMtY2hpbGRyZW4gPiBhIHtcbiAgICAvKiBtYWluIG5hdmlnYXRpb24gYXJyb3dzIG9uIGxhcmdlciBkZXZpY2VzICovXG4gICAgcGFkZGluZy1yaWdodDogMzBweCAhaW1wb3J0YW50OyB9XG4gICAgLmNkLXByaW1hcnktbmF2ID4gLmhhcy1jaGlsZHJlbiA+IGE6OmJlZm9yZSwgLmNkLXByaW1hcnktbmF2ID4gLmhhcy1jaGlsZHJlbiA+IGE6OmFmdGVyIHtcbiAgICAgIHdpZHRoOiA5cHg7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlO1xuICAgICAgYmFja2dyb3VuZDogI2NhY2RjZjtcbiAgICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgIHRyYW5zaXRpb246IHdpZHRoIDAuM3MsIHRyYW5zZm9ybSAwLjNzOyB9XG4gICAgLmNkLXByaW1hcnktbmF2ID4gLmhhcy1jaGlsZHJlbiA+IGE6OmJlZm9yZSB7XG4gICAgICByaWdodDogMTJweDsgfVxuICAgIC5jZC1wcmltYXJ5LW5hdiA+IC5oYXMtY2hpbGRyZW4gPiBhOjphZnRlciB7XG4gICAgICByaWdodDogN3B4OyB9XG4gICAgLmNkLXByaW1hcnktbmF2ID4gLmhhcy1jaGlsZHJlbiA+IGEuc2VsZWN0ZWQ6OmJlZm9yZSwgLmNkLXByaW1hcnktbmF2ID4gLmhhcy1jaGlsZHJlbiA+IGEuc2VsZWN0ZWQ6OmFmdGVyIHtcbiAgICAgIHdpZHRoOiAxNHB4OyB9XG4gICAgLmNkLXByaW1hcnktbmF2ID4gLmhhcy1jaGlsZHJlbiA+IGEuc2VsZWN0ZWQ6OmJlZm9yZSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNXB4KSByb3RhdGUoLTQ1ZGVnKTsgfVxuICAgIC5jZC1wcmltYXJ5LW5hdiA+IC5oYXMtY2hpbGRyZW4gPiBhLnNlbGVjdGVkOjphZnRlciB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7IH1cbiAgLmNkLXNlY29uZGFyeS1uYXYgPiAuaGFzLWNoaWxkcmVuID4gYTo6YmVmb3JlLCAuY2Qtc2Vjb25kYXJ5LW5hdiA+IC5oYXMtY2hpbGRyZW4gPiBhOjphZnRlciB7XG4gICAgLyogcmVtb3ZlIGFycm93cyBvbiBzZWNvbmRhcnkgbmF2IHRpdGxlcyAqL1xuICAgIGRpc3BsYXk6IG5vbmU7IH1cbiAgLmNkLXByaW1hcnktbmF2IC5nby1iYWNrIGEge1xuICAgIHBhZGRpbmctbGVmdDogMjBweDsgfVxuICAgIC5jZC1wcmltYXJ5LW5hdiAuZ28tYmFjayBhOjpiZWZvcmUsIC5jZC1wcmltYXJ5LW5hdiAuZ28tYmFjayBhOjphZnRlciB7XG4gICAgICBsZWZ0OiAxcHg7IH0gfVxuXG4uY2Qtc2VhcmNoIHtcbiAgZmxvYXQ6IHJpZ2h0OyB9XG4gIC5jZC1zZWFyY2ggZm9ybSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gIC5jZC1zZWFyY2ggaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL2ltYWdlcy9zZWFyY2gtaWNvbi5wbmdcIik7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgdGV4dC1pbmRlbnQ6IC05OTk5OXB4O1xuICAgIGhlaWdodDogMjJweDtcbiAgICB3aWR0aDogMjJweDtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgYm9yZGVyOiAwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDZweDtcbiAgICByaWdodDogM3B4O1xuICAgIGJhY2tncm91bmQtc2l6ZTogNzUlOyB9XG4gIC5jZC1zZWFyY2ggaW5wdXRbdHlwZT1cInNlYXJjaFwiXSB7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICAgIGFwcGVhcmFuY2U6IG5vbmU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsgfVxuICAgIC5jZC1zZWFyY2ggaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgLmNkLXNlYXJjaCBpbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotbW96LXBsYWNlaG9sZGVyLCAuY2Qtc2VhcmNoIGlucHV0W3R5cGU9XCJzZWFyY2hcIl06LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICAgIGNvbG9yOiAjY2FjZGNmOyB9XG4gICAgLmNkLXNlYXJjaCBpbnB1dFt0eXBlPVwic2VhcmNoXCJdOmZvY3VzIHtcbiAgICAgIG91dGxpbmU6IG5vbmU7IH1cbiAgLmNkLXNlYXJjaC5pcy12aXNpYmxlIHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAuM3MgMHMsIHZpc2liaWxpdHkgMHMgMHM7IH1cbiAgLm5hdi1pcy1maXhlZCAuY2Qtc2VhcmNoIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7IH1cblxuLmNkLW92ZXJsYXkge1xuICAvKiBzaGFkb3cgbGF5ZXIgdmlzaWJsZSB3aGVuIG5hdmlnYXRpb24gaXMgYWN0aXZlICovXG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgei1pbmRleDogMjtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgb3BhY2l0eTogMDtcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgMHMsIHZpc2liaWxpdHkgMHMgMC4zcywgdHJhbnNmb3JtIDAuM3MgMHM7IH1cbiAgLmNkLW92ZXJsYXkuaXMtdmlzaWJsZSB7XG4gICAgb3BhY2l0eTogMTtcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyAwcywgdmlzaWJpbGl0eSAwcyAwcywgdHJhbnNmb3JtIDAuM3MgMHM7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjJweCkge1xuICAgIC5jZC1vdmVybGF5LmlzLXZpc2libGUge1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApOyB9XG4gICAgLm5hdi1vbi1sZWZ0IC5jZC1vdmVybGF5LmlzLXZpc2libGUge1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDI2MHB4KTsgfVxuICAgIC5jZC1vdmVybGF5LmlzLXZpc2libGUuc2VhcmNoLWlzLXZpc2libGUsIC5uYXYtb24tbGVmdCAuY2Qtb3ZlcmxheS5pcy12aXNpYmxlLnNlYXJjaC1pcy12aXNpYmxlIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTsgfSB9XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICpzdXBwb3J0IGZvciBubyBqc1xuICpcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi5uby1qcyAuY2QtcHJpbWFyeS1uYXYge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogYXV0bztcbiAgd2lkdGg6IDEwMCU7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICB6LWluZGV4OiAyOyB9XG5cbi5uby1qcyAuY2Qtc2VhcmNoIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0b3A6IDA7XG4gIG9wYWNpdHk6IDE7XG4gIHZpc2liaWxpdHk6IHZpc2libGU7IH1cblxuQG1lZGlhIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAubm8tanMgLmNkLXByaW1hcnktbmF2IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgei1pbmRleDogMztcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IGF1dG87XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAxNTBweDtcbiAgICBwYWRkaW5nOiAwOyB9XG4gIC5uby1qcyAubmF2LWlzLWZpeGVkIC5jZC1wcmltYXJ5LW5hdiB7XG4gICAgcG9zaXRpb246IGZpeGVkOyB9IH1cblxuLm5hdi1mb290ZXIge1xuICBwYWRkaW5nOiAzMHB4IDIwcHggMjBweDtcbiAgdGV4dC1hbGlnbjogbGVmdDsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAubmF2LWZvb3RlciB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9IH1cbiAgLm5hdi1mb290ZXJfX2hlYWRpbmcge1xuICAgIGZvbnQtZmFtaWx5OiBOZXdzIEN5Y2xlLCBzYW5zLXNlcmlmO1xuICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07IH1cbiAgICAubmF2LWZvb3Rlcl9faGVhZGluZyBhIHtcbiAgICAgIGNvbG9yOiAjMzMzOyB9XG4gICAgICAubmF2LWZvb3Rlcl9faGVhZGluZyBhOmhvdmVyIHtcbiAgICAgICAgY29sb3I6ICMyNjdlNjQ7IH1cbiAgLm5hdi1mb290ZXJfX2xpbmsge1xuICAgIGZvbnQtc2l6ZTogMTRweDsgfVxuICAubmF2LWZvb3Rlcl9fYm94IHtcbiAgICBwYWRkaW5nOiAwIDEwcHg7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDsgfVxuICAubmF2LWZvb3Rlcl9fYm94LW5hcnJvdyB7XG4gICAgcGFkZGluZzogMCAxMHB4O1xuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7IH1cbiAgLm5hdi1mb290ZXJfX2J1dHRvbiB7XG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XG4gICAgY29sb3I6ICMyNjdlNjQ7XG4gICAgZm9udC1zaXplOiAuOXJlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgIHBhZGRpbmc6IC41cmVtIDFyZW07XG4gICAgd2lkdGg6IDEwMCU7IH1cbiAgLm5hdi1mb290ZXJfX3N1Yi1saW5rcyB7XG4gICAgZm9udC1zaXplOiAxNHB4OyB9XG4gICAgLm5hdi1mb290ZXJfX3N1Yi1saW5rcyBhIHtcbiAgICAgIGNvbG9yOiAjMzMzOyB9XG4gICAgICAubmF2LWZvb3Rlcl9fc3ViLWxpbmtzIGE6aG92ZXIge1xuICAgICAgICBjb2xvcjogIzI2N2U2NDsgfVxuICAgIC5uYXYtZm9vdGVyX19zdWItbGlua3MgbGk6bnRoLWNoaWxkKDEpIHtcbiAgICAgIGZvbnQtZmFtaWx5OiBOZXdzIEN5Y2xlLCBzYW5zLXNlcmlmO1xuICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgIG1hcmdpbi1ib3R0b206IC41cmVtOyB9XG5cbi5iYW5uZXItdGFsbCB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChpbWFnZXMvaW5kZXhfaGVyby5qcGcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIGhlaWdodDogMjAwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpIHtcbiAgICAuYmFubmVyLXRhbGwge1xuICAgICAgaGVpZ2h0OiA0NjVweDsgfSB9XG4gIC5iYW5uZXItdGFsbF9faGVhZGxpbmUge1xuICAgIGJvdHRvbTogM3JlbTtcbiAgICBjb2xvcjogI2ZmZjtcbiAgICBmb250LWZhbWlseTogc2VyaWY7XG4gICAgZm9udC1zaXplOiA1cmVtO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGVmdDogMnJlbTtcbiAgICBsaW5lLWhlaWdodDogMTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbWFyZ2luOiAwIDAgMXJlbSAxcmVtO1xuICAgIHRleHQtc2hhZG93OiAycHggMnB4IDJweCAjMzMzOyB9XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gICAgICAuYmFubmVyLXRhbGxfX2hlYWRsaW5lIHtcbiAgICAgICAgcG9zaXRpb246IHN0YXRpYztcbiAgICAgICAgZm9udC1zaXplOiAycmVtO1xuICAgICAgICBwYWRkaW5nOiAycmVtOyB9IH1cblxuLmJhbm5lci1zdGFuZGFyZCB7XG4gIGJhY2tncm91bmQ6ICMyNjdlNjQ7XG4gIGNvbG9yOiAjZmZmO1xuICBkaXNwbGF5OiB0YWJsZTtcbiAgaGVpZ2h0OiBhdXRvOyB9XG4gIC5iYW5uZXItc3RhbmRhcmQgaW1nIHtcbiAgICBkaXNwbGF5OiBibG9jazsgfVxuICAuYmFubmVyLXN0YW5kYXJkX19ib3gge1xuICAgIHBhZGRpbmc6IDFyZW0gMnJlbTsgfVxuICAuYmFubmVyLXN0YW5kYXJkX19oZWFkaW5nIHtcbiAgICBjb2xvcjogI2ZmZjsgfVxuICAuYmFubmVyLXN0YW5kYXJkX19tZWRpYSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VjZWVlNjsgfVxuXG4uYmFubmVyLXBhbm9yYW1hIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2ltYWdlcy90cmVlcy5qcGcpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIGhlaWdodDogMjU1cHg7IH1cblxuLmNhcmQtZGlwdGljIHtcbiAgZGlzcGxheTogdGFibGU7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjY2NjO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYzsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAuY2FyZC1kaXB0aWMge1xuICAgICAgZmxleC1mbG93OiBjb2x1bW47IH0gfVxuICAuY2FyZC1kaXB0aWNfX2JveCB7XG4gICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgIHBhZGRpbmc6IDJyZW0gMXJlbTsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xuICAgICAgLmNhcmQtZGlwdGljX19ib3gge1xuICAgICAgICBwYWRkaW5nOiAycmVtIDFyZW0gMnJlbSAycmVtOyB9IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpIHtcbiAgICAgIC5jYXJkLWRpcHRpY19fYm94Om50aC1jaGlsZCgyKSB7XG4gICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2NjYztcbiAgICAgICAgcGFkZGluZzogMnJlbSAycmVtIDJyZW0gMXJlbTsgfSB9XG4gIC5jYXJkLWRpcHRpY19faGVhZGluZyB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gIC5jYXJkLWRpcHRpY19fbWVkaWEge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyNjdlNjQ7XG4gICAgaGVpZ2h0OiAxNTBweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07IH1cbiAgLmNhcmQtZGlwdGljX190ZXh0IHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTsgfVxuICAuY2FyZC1kaXB0aWMgdWwge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gICAgLmNhcmQtZGlwdGljIHVsIGxpIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIHBhZGRpbmc6IC41cmVtO1xuICAgICAgd2lkdGg6IDQ3JTsgfVxuICAuY2FyZC1kaXB0aWNfX2xpbmsge1xuICAgIGNvbG9yOiAjMjY3ZTY0O1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBmb250LWZhbWlseTogUGxheWZhaXIgRGlzcGxheSwgc2VyaWY7XG4gICAgcGFkZGluZzogMCAuNHJlbTsgfVxuICAgIC5jYXJkLWRpcHRpY19fbGluazpob3ZlciB7XG4gICAgICBjb2xvcjogIzQ1NTY1MjsgfVxuXG4uY2FyZC1iaW8ge1xuICBwYWRkaW5nLWJvdHRvbTogMnJlbTsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAuY2FyZC1iaW8ge1xuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlNWU2ZTc7XG4gICAgICBtYXJnaW4tYm90dG9tOiAycmVtOyB9IH1cbiAgLmNhcmQtYmlvX19tZWRpYSB7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDsgfVxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgLmNhcmQtYmlvX19tZWRpYSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsgfSB9XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgICAuY2FyZC1iaW9fX21lZGlhIGltZyB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgd2lkdGg6IDMzJTsgfSB9XG4gIC5jYXJkLWJpb19fYm94IHtcbiAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgcGFkZGluZy10b3A6IDA7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDsgfVxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgLmNhcmQtYmlvX19ib3gge1xuICAgICAgICBwYWRkaW5nOiAwOyB9IH1cbiAgLmNhcmQtYmlvX19oZWFkaW5nIHtcbiAgICBjb2xvcjogIzI2N2U2NDtcbiAgICBmb250LWZhbWlseTogUGxheWZhaXIgRGlzcGxheSwgc2VyaWY7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDE7IH1cbiAgLmNhcmQtYmlvX19zdWJ0aXRsZSB7XG4gICAgY29sb3I6ICM3ZjdlN2U7IH1cbiAgICAuY2FyZC1iaW9fX3N1YnRpdGxlIGgzIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuICAgIC5jYXJkLWJpb19fc3VidGl0bGUgYSB7XG4gICAgICBjb2xvcjogIzI2N2U2NDtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OyB9XG4gICAgICAuY2FyZC1iaW9fX3N1YnRpdGxlIGEgaSB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMyNjdlNjQ7XG4gICAgICAgIHBhZGRpbmc6IDJweDsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAuY2FyZC1iaW9fX3RleHQge1xuICAgICAgdGV4dC1hbGlnbjogbGVmdDsgfSB9XG4gIC5jYXJkLWJpb19fdGV4dCAqICsgKiB7XG4gICAgbWFyZ2luLXRvcDogMXJlbTsgfVxuXG4uY2FyZC1hcnRpY2xlX19ib3gge1xuICBib3gtc2hhZG93OiAwIDFweCAwICMyNjdlNjQ7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIHBhZGRpbmctdG9wOiAyNHB4O1xuICBwYWRkaW5nLWJvdHRvbTogMjRweDsgfVxuICAuY2FyZC1hcnRpY2xlX19ib3ggKiArICoge1xuICAgIG1hcmdpbi10b3A6IDFyZW07IH1cbi5jYXJkLWFydGljbGUgaDIge1xuICBjb2xvcjogIzI2N2U2NDtcbiAgZm9udC1mYW1pbHk6IFBsYXlmYWlyIERpc3BsYXksIHNlcmlmO1xuICBmb250LXNpemU6IDJyZW07XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGxpbmUtaGVpZ2h0OiAxOyB9XG4uY2FyZC1hcnRpY2xlIHNtYWxsIHtcbiAgY29sb3I6ICM2NjY7XG4gIGZvbnQtc2l6ZTogLjc1cmVtOyB9XG5cbi5sb2FkZXJfX25hdiB7XG4gIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gIHBhZGRpbmctdG9wOiAxLjI1cmVtOyB9XG5cbi5jYXJkLXRyaXB0aWMge1xuICBkaXNwbGF5OiB0YWJsZTtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2M7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2NjOyB9XG4gIC5jYXJkLXRyaXB0aWNfX2JveCB7XG4gICAgcGFkZGluZzogMnJlbTtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDc2OXB4KSB7XG4gICAgICAuY2FyZC10cmlwdGljX19ib3g6bnRoLWNoaWxkKDIpIHtcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjY2NjOyB9IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpIHtcbiAgICAgIC5jYXJkLXRyaXB0aWNfX2JveDpudGgtY2hpbGQoMykge1xuICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNjY2M7IH0gfVxuICAuY2FyZC10cmlwdGljX19tZWRpYSB7XG4gICAgaGVpZ2h0OiAxNTBweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07IH1cbiAgLmNhcmQtdHJpcHRpY19faGVhZGluZy1saW5rIHtcbiAgICBjb2xvcjogIzI2N2U2NDtcbiAgICBmb250LWZhbWlseTogUGxheWZhaXIgRGlzcGxheSwgc2VyaWY7XG4gICAgZm9udC1zaXplOiAxLjM3NXJlbTtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgIGNvbG9yOiAjMjY3ZTY0O1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cbiAgICAuY2FyZC10cmlwdGljX19oZWFkaW5nLWxpbms6aG92ZXIge1xuICAgICAgY29sb3I6ICM0NTU2NTI7IH1cbiAgLmNhcmQtdHJpcHRpY19fdGV4dCB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG5cbi5jdGEtY29udGFjdCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlY2VlZTY7XG4gIGRpc3BsYXk6IHRhYmxlO1xuICB3aWR0aDogMTAwJTsgfVxuICAuY3RhLWNvbnRhY3RfX2JveCB7XG4gICAgcGFkZGluZzogMnJlbTsgfVxuICAuY3RhLWNvbnRhY3RfX2JveDpudGgtY2hpbGQoMikge1xuICAgIHBhZGRpbmc6IDJyZW0gMDsgfVxuICAuY3RhLWNvbnRhY3RfX3RleHQge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwIDMuNXJlbSAwIDJyZW07IH1cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgIC5jdGEtY29udGFjdF9fdGV4dCB7XG4gICAgICAgIHBhZGRpbmc6IDA7IH0gfVxuICAuY3RhLWNvbnRhY3RfX2J1dHRvbiB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbjogMCAycmVtIDAgMDsgfVxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgLmN0YS1jb250YWN0X19idXR0b24ge1xuICAgICAgICBtYXJnaW46IDA7IH0gfVxuXG4uY3RhLXRlYXNlciB7XG4gIGRpc3BsYXk6IHRhYmxlO1xuICBwYWRkaW5nOiAxcmVtIDJyZW07IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgLmN0YS10ZWFzZXIge1xuICAgICAgZmxleC1mbG93OiBjb2x1bW47IH0gfVxuICAuY3RhLXRlYXNlcl9fYm94IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAycmVtOyB9XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgICAuY3RhLXRlYXNlcl9fYm94IHtcbiAgICAgICAgcGFkZGluZzogMDsgfSB9XG4gIC5jdGEtdGVhc2VyX190ZXh0IHtcbiAgICBtYXJnaW4tYm90dG9tOiAycmVtOyB9XG4gIC5jdGEtdGVhc2VyX19tZWRpYSB7XG4gICAgaGVpZ2h0OiAzMDBweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuOyB9XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgICAuY3RhLXRlYXNlcl9fbWVkaWEge1xuICAgICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICAgIG1hcmdpbi10b3A6IDJyZW07IH0gfVxuXG4uY3RhLWNlbnRlciB7XG4gIHBhZGRpbmc6IDJyZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuICAuY3RhLWNlbnRlcl9fdGV4dCB7XG4gICAgcGFkZGluZzogMCA4cmVtO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07IH1cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgIC5jdGEtY2VudGVyX190ZXh0IHtcbiAgICAgICAgcGFkZGluZzogMDsgfSB9XG5cbi5jdGEtc3Vic2NyaWJlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2N2U2NDtcbiAgY29sb3I6ICNmZmY7XG4gIHBhZGRpbmctdG9wOiAyNHB4O1xuICBwYWRkaW5nLWJvdHRvbTogMzZweDsgfVxuICAuY3RhLXN1YnNjcmliZV9faGVhZGluZyB7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gIC5jdGEtc3Vic2NyaWJlX19ib3gge1xuICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIHdpZHRoOiA3NSU7IH1cbiAgLmN0YS1zdWJzY3JpYmVfX2lucHV0IHtcbiAgICBwYWRkaW5nOiAuOXJlbTtcbiAgICB3aWR0aDogMTAwJTsgfVxuICAuY3RhLXN1YnNjcmliZV9fYnV0dG9uIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRyYW5zaXRpb246IGFsbCAuMnMgZWFzZTsgfVxuICAgIC5jdGEtc3Vic2NyaWJlX19idXR0b246aG92ZXIge1xuICAgICAgLypUaGVzZSB3aWxsIHRyYW5zaXRpb24gb24gaG92ZXIgKi9cbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICBjb2xvcjogIzI2N2U2NDsgfVxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgLmN0YS1zdWJzY3JpYmVfX2J1dHRvbiB7XG4gICAgICAgIG1hcmdpbjogMXJlbSAwIDAgMDsgfSB9XG4gIC5jdGEtc3Vic2NyaWJlX19tZXNzYWdlIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHBhZGRpbmctdG9wOiAyLjVyZW07IH1cbiAgLmN0YS1zdWJzY3JpYmVfX2Vycm9yIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHBhZGRpbmctdG9wOiAxcmVtOyB9XG4gICAgLmN0YS1zdWJzY3JpYmVfX2Vycm9yLW1zZyB7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cblxuLmN0YS1zaWRlYmFyIHtcbiAgcGFkZGluZzogMXJlbSAwIDAgNXJlbTtcbiAgdmVydGljYWwtYWxpZ246IHRvcDsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAuY3RhLXNpZGViYXIge1xuICAgICAgcGFkZGluZzogM3JlbSAycmVtOyB9IH1cbiAgLmN0YS1zaWRlYmFyX19oZWFkaW5nIHtcbiAgICBmb250LXNpemU6IDEuMjVyZW07XG4gICAgbWFyZ2luLXRvcDogMTJweDtcbiAgICBtYXJnaW4tYm90dG9tOiAxMnB4OyB9XG4gIC5jdGEtc2lkZWJhcl9fYnV0dG9uIHtcbiAgICBtYXJnaW4tdG9wOiAxcmVtOyB9XG5cbi5jdGEtc2lkZWJhcl9fYnV0dG9uICsgLmN0YS1zaWRlYmFyX19oZWFkaW5nLCAuY3RhLXNpZGViYXJfX3RleHQgKyAuY3RhLXNpZGViYXJfX2hlYWRpbmcge1xuICBtYXJnaW4tdG9wOiAycmVtOyB9XG5cbi5jdGEtc29jaWFsIHtcbiAgcGFkZGluZy1sZWZ0OiAxcmVtOyB9XG4gIC5jdGEtc29jaWFsIC5pY29uIHtcbiAgICBmaWxsOiAjMjY3ZTY0OyB9XG4gICAgLmN0YS1zb2NpYWwgLmljb246aG92ZXIge1xuICAgICAgZmlsbDogI2NjYzsgfVxuXG5mb290ZXIge1xuICBwYWRkaW5nLWJvdHRvbTogNXJlbTsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBmb290ZXIge1xuICAgICAgcGFkZGluZzogMDsgfSB9XG5cbi5mb290ZXItY29weXJpZ2h0IHtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlNWU2ZTc7XG4gIGRpc3BsYXk6IHRhYmxlO1xuICBwYWRkaW5nOiAycmVtO1xuICB3aWR0aDogMTAwJTsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAuZm9vdGVyLWNvcHlyaWdodCB7XG4gICAgICBwYWRkaW5nOiAycmVtIDAgMCAwOyB9IH1cbiAgLmZvb3Rlci1jb3B5cmlnaHRfX2xvZ28tYm94IHtcbiAgICB3aWR0aDogNDUwcHg7IH1cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgIC5mb290ZXItY29weXJpZ2h0X19sb2dvLWJveCB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuICAgICAgICAuZm9vdGVyLWNvcHlyaWdodF9fbG9nby1ib3ggLmxvZ29fX3N0YWNrZWQge1xuICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICB3aWR0aDogMjUwcHg7IH0gfVxuICAuZm9vdGVyLWNvcHlyaWdodF9fYm94IHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtaW4td2lkdGg6IDEwMjNweCkge1xuICAgICAgLmZvb3Rlci1jb3B5cmlnaHRfX2JveCB7XG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0OyB9IH1cbiAgICAuZm9vdGVyLWNvcHlyaWdodF9fYm94IHNtYWxsIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IC41cmVtOyB9XG4gICAgICAuZm9vdGVyLWNvcHlyaWdodF9fYm94IHNtYWxsOjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAnfCc7IH1cbiAgICAgIC5mb290ZXItY29weXJpZ2h0X19ib3ggc21hbGw6bnRoLWNoaWxkKDEpOjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAnICc7IH1cbiAgICAgIEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtaW4td2lkdGg6IDEwMjNweCkge1xuICAgICAgICAuZm9vdGVyLWNvcHlyaWdodF9fYm94IHNtYWxsIHtcbiAgICAgICAgICBmb250LXNpemU6IDEycHg7IH0gfVxuICAgIC5mb290ZXItY29weXJpZ2h0X19ib3ggLm5hdi1taW5vciBsaSBhIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDsgfVxuICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSBhbmQgKG1pbi13aWR0aDogMTAyM3B4KSB7XG4gICAgICAgIC5mb290ZXItY29weXJpZ2h0X19ib3ggLm5hdi1taW5vciBsaSBhIHtcbiAgICAgICAgICBmb250LXNpemU6IDEycHg7IH0gfVxuXG4uZm9vdGVyLWRpc2NsYWltZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlOyB9XG4gIC5mb290ZXItZGlzY2xhaW1lcl9fYm94IHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNDU1NjUyO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBtYXJnaW46IDUwcHggYXV0byAxMHB4OyB9XG4gIC5mb290ZXItZGlzY2xhaW1lciBoNiwgLmZvb3Rlci1kaXNjbGFpbWVyIHAsIC5mb290ZXItZGlzY2xhaW1lciB1bCB7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIGFuZCAobWluLXdpZHRoOiAxMDIzcHgpIHtcbiAgICAgIC5mb290ZXItZGlzY2xhaW1lciBoNiwgLmZvb3Rlci1kaXNjbGFpbWVyIHAsIC5mb290ZXItZGlzY2xhaW1lciB1bCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDsgfSB9XG4gIC5mb290ZXItZGlzY2xhaW1lciB1bCB7XG4gICAgbWFyZ2luLXRvcDogMDsgfVxuICAgIC5mb290ZXItZGlzY2xhaW1lciB1bCBsaSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBtYXJnaW46IDAgMTBweDtcbiAgICAgIHBhZGRpbmc6IC41cmVtOyB9XG5cbkBrZXlmcmFtZXMgZmFkZUluIHtcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTogMDsgfVxuXG4gIHRvIHtcbiAgICBvcGFjaXR5OiAxOyB9IH1cblxuLmhlYWRlcl9fbG9nby1ib3gge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNjY2M7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNjY2M7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBtYXgtd2lkdGg6IDEyMDBweDsgfVxuXG4ubm8tY3NzYW5pbWF0aW9ucyAuaGVhZGVyX19sb2dvLWJveCB7XG4gIHBhZGRpbmctdG9wOiAwOyB9XG5cbi5oZWFkZXJfX2xvZ28ge1xuICBiYWNrZ3JvdW5kOiAjZmZmOyB9XG5cbi5sb2dvIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBhZGRpbmc6IDByZW0gMCAwcmVtIDJyZW07XG4gIHdpZHRoOiA2MDBweDsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogODk5cHgpIHtcbiAgICAubG9nbyB7XG4gICAgICB3aWR0aDogNDAwcHg7IH0gfVxuICBAbWVkaWEgKG1heC13aWR0aDogNDk5cHgpIHtcbiAgICAubG9nbyB7XG4gICAgICBwYWRkaW5nOiAxcmVtO1xuICAgICAgd2lkdGg6IDMwMHB4OyB9IH1cblxuLm5vLWNzc2FuaW1hdGlvbnMgLmxvZ28ge1xuICBoZWlnaHQ6IDY4cHg7XG4gIHBhZGRpbmc6IDAgMXJlbTsgfVxuXG5zdmcgcGF0aCwgc3ZnIHBvbHlnb24ge1xuICBmaWxsOiAjMjY3ZTY0OyB9XG5zdmc6aG92ZXIgcGF0aCwgc3ZnOmhvdmVyIHBvbHlnb24ge1xuICBvcGFjaXR5OiAuNztcbiAgdHJhbnNpdGlvbjogZmlsbCAwLjJzIGVhc2U7XG4gIGZpbGwtb3BhY2l0eTogMC43OyB9XG5cbi5sb2dvX19zdHJldGNoZWQge1xuICBkaXNwbGF5OiBibG9jazsgfVxuICBAbWVkaWEgKG1heC13aWR0aDogODk5cHgpIHtcbiAgICAubG9nb19fc3RyZXRjaGVkIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxuXG4ubG9nb19fc3RhY2tlZCB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDg5OXB4KSB7XG4gICAgLmxvZ29fX3N0YWNrZWQge1xuICAgICAgZGlzcGxheTogYmxvY2s7IH0gfVxuXG4ubm8tY3NzYW5pbWF0aW9ucyAubG9nb19fZ2xvYmUgcGF0aCB7XG4gIGZpbGw6ICMyNjdlNjQ7XG4gIG9wYWNpdHk6IDE7IH1cblxuLm1haW4tc3RhbmRhcmQsIC5tYWluLW5ld3MsIC5tYWluLXBvc3Qge1xuICBkaXNwbGF5OiB0YWJsZTtcbiAgcGFkZGluZzogMXJlbSAycmVtOyB9XG5cbi5tYWluLXN0YW5kYXJkIHtcbiAgcGFkZGluZy1ib3R0b206IDVyZW07IH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgLm1haW4tc3RhbmRhcmRfX2NvbnRlbnQge1xuICAgICAgdGV4dC1hbGlnbjogbGVmdDsgfSB9XG4gIC5tYWluLXN0YW5kYXJkX190ZXh0ICogKyAqIHtcbiAgICBtYXJnaW4tdG9wOiAxcmVtOyB9XG4gIC5tYWluLXN0YW5kYXJkX190ZXh0IGgyIHtcbiAgICBjb2xvcjogIzI2N2U2NDtcbiAgICBmb250LWZhbWlseTogUGxheWZhaXIgRGlzcGxheSwgc2VyaWY7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgcGFkZGluZy10b3A6IDI0cHg7XG4gICAgcGFkZGluZy1ib3R0b206IDBweDsgfVxuICAubWFpbi1zdGFuZGFyZF9fdGV4dCB1bCB7XG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xuICAgIGxpc3Qtc3R5bGU6IGRpc2M7IH1cbiAgICAubWFpbi1zdGFuZGFyZF9fdGV4dCB1bCBsaSB7XG4gICAgICBtYXJnaW4tdG9wOiAwLjVyZW07IH1cbiAgLm1haW4tc3RhbmRhcmRfX3RleHQgb2wge1xuICAgIHBhZGRpbmctbGVmdDogMnJlbTsgfVxuICAubWFpbi1zdGFuZGFyZF9fdGV4dCBpbWcge1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIG1heC13aWR0aDogMTAwJTsgfVxuXG4ubWFpbi1iaW9zIHtcbiAgZGlzcGxheTogdGFibGU7XG4gIHBhZGRpbmc6IDJyZW07IH1cblxuLmNpdHktY29sdW1uIHtcbiAgd2lkdGg6IDEzNXB4OyB9XG5cbi5hZGRyZXNzLWNvbHVtbiB7XG4gIHdpZHRoOiAzMzVweDsgfVxuXG4ubG9jYXRpb24tcGhvbmUge1xuICBjb2xvcjogIzQ1NTY1MjsgfVxuICAubG9jYXRpb24tcGhvbmU6aG92ZXIge1xuICAgIGNvbG9yOiAjMjY3ZTY0OyB9XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAubWFpbi1wb3N0X190ZXh0IHtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0OyB9IH1cbi5tYWluLXBvc3RfX3RleHQgKiArICoge1xuICBtYXJnaW4tdG9wOiAxcmVtOyB9XG4ubWFpbi1wb3N0X190ZXh0IGgyIHtcbiAgY29sb3I6ICMyNjdlNjQ7XG4gIGZvbnQtZmFtaWx5OiBQbGF5ZmFpciBEaXNwbGF5LCBzZXJpZjtcbiAgZm9udC1zaXplOiAycmVtO1xuICBmb250LXdlaWdodDogNDAwO1xuICBsaW5lLWhlaWdodDogMTsgfVxuLm1haW4tcG9zdF9fdGV4dCBoMyB7XG4gIGNvbG9yOiAjNDU1NjUyO1xuICBmb250LWZhbWlseTogUGxheWZhaXIgRGlzcGxheSwgc2VyaWY7XG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgbGluZS1oZWlnaHQ6IDE7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIG1hcmdpbi10b3A6IDM2cHg7XG4gIG1hcmdpbi1ib3R0b206IDBweDsgfVxuLm1haW4tcG9zdF9fdGV4dCBmaWdjYXB0aW9uIHtcbiAgY29sb3I6ICNjY2M7XG4gIGZvbnQtc2l6ZTogLjc1cmVtO1xuICBtYXJnaW4tdG9wOiAwOyB9XG4ubWFpbi1wb3N0X190ZXh0IGJsb2NrcXVvdGUge1xuICBjb2xvcjogIzI2N2U2NDtcbiAgZm9udC1mYW1pbHk6IFBsYXlmYWlyIERpc3BsYXksIHNlcmlmO1xuICBmb250LXNpemU6IDEuNXJlbTtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBmb250LXdlaWdodDogNzAwO1xuICBtYXJnaW4tdG9wOiAzNnB4O1xuICBtYXJnaW4tYm90dG9tOiAzNnB4OyB9XG5cbi5mb3JtLXN0YW5kYXJkIHtcbiAgbWFyZ2luLXRvcDogMnJlbTsgfVxuICAuZm9ybS1zdGFuZGFyZCBpbnB1dCwgLmZvcm0tc3RhbmRhcmQgaW5wdXRbdHlwZT1cImVtYWlsXCJdLCAuZm9ybS1zdGFuZGFyZCBpbnB1dFt0eXBlPVwibnVtYmVyXCJdLCAuZm9ybS1zdGFuZGFyZCBpbnB1dFt0eXBlPVwicGFzc3dvcmRcIl0sIC5mb3JtLXN0YW5kYXJkIGlucHV0W3R5cGU9XCJzZWFyY2hcIl0sIC5mb3JtLXN0YW5kYXJkIGlucHV0W3R5cGU9XCJ0ZWxcIl0sIC5mb3JtLXN0YW5kYXJkIGlucHV0W3R5cGU9XCJ0ZXh0XCJdLCAuZm9ybS1zdGFuZGFyZCBpbnB1dFt0eXBlPVwidXJsXCJdLCAuZm9ybS1zdGFuZGFyZCBpbnB1dFt0eXBlPVwiY29sb3JcIl0sIC5mb3JtLXN0YW5kYXJkIGlucHV0W3R5cGU9XCJkYXRlXCJdLCAuZm9ybS1zdGFuZGFyZCBpbnB1dFt0eXBlPVwibmFtZVwiXSwgLmZvcm0tc3RhbmRhcmQgaW5wdXRbdHlwZT1cImRhdGV0aW1lXCJdLCAuZm9ybS1zdGFuZGFyZCBpbnB1dFt0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIl0sIC5mb3JtLXN0YW5kYXJkIGlucHV0W3R5cGU9XCJtb250aFwiXSwgLmZvcm0tc3RhbmRhcmQgaW5wdXRbdHlwZT1cInRpbWVcIl0sIC5mb3JtLXN0YW5kYXJkIGlucHV0W3R5cGU9XCJ3ZWVrXCJdLCAuZm9ybS1zdGFuZGFyZCB0ZXh0YXJlYSB7XG4gICAgY29sb3I6ICMzMzM7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgICBib3JkZXItYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBib3JkZXItcmFkaXVzLWZvbnQtc2l6ZTogMXJlbTtcbiAgICBwYWRkaW5nOiAxcmVtO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlOyB9XG4gIC5mb3JtLXN0YW5kYXJkIGxhYmVsIHtcbiAgICBkaXNwbGF5OiBibG9jazsgfVxuICAuZm9ybS1zdGFuZGFyZCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdLCAuZm9ybS1zdGFuZGFyZCBpbnB1dFt0eXBlPVwicmVzZXRcIl0sIC5mb3JtLXN0YW5kYXJkIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAgIGRpc3BsYXk6IGJsb2NrOyB9XG4gIC5mb3JtLXN0YW5kYXJkX19jaGVja2JveCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7XG4gICAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDsgfVxuICAuZm9ybS1zdGFuZGFyZF9fY2hlY2tib3ggKyBsYWJlbCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luOiAxMHB4IDEwcHggMjBweCAxMHB4ICFpbXBvcnRhbnQ7IH1cbiAgLmZvcm0tc3RhbmRhcmQgLnNlbGVjdGJveCB7XG4gICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgaGVpZ2h0OiA0OHB4OyB9XG4gIC5mb3JtLXN0YW5kYXJkIHNlbGVjdCB7XG4gICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgICBib3gtc2hhZG93OiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgICBjb2xvcjogIzMzMztcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgZm9udC1zaXplOiAxcmVtO1xuICAgIGhlaWdodDogNDVweDtcbiAgICBwYWRkaW5nOiAxcmVtO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogMTAwJTsgfVxuXG4uY29udGFjdC11c19fYnV0dG9uIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VjZWVlNjtcbiAgbWF4LXdpZHRoOiAxODNweDtcbiAgY2xlYXI6IGJvdGg7IH1cblxuXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5abGJtUnZjaTlmYm05eWJXRnNhWHBsTG5OamMzTWlMQ0ppWVhObEwxOTBlWEJ2WjNKaGNHaDVMbk5oYzNNaUxDSmlZWE5sTDE5amIyeHZjbk11YzJGemN5SXNJbUpoYzJVdlgyTnNaV0Z5TFdacGVDNXpZWE56SWl3aVltRnpaUzlmYVcxaFoyVnpMbk5oYzNNaUxDSmlZWE5sTDE5c1lYbHZkWFF1YzJGemN5SXNJbUpoYzJVdlgybHVZMngxWkdVdGJXVmthV0V1YzJGemN5SXNJbUpoYzJVdlgyZHNiMkpoYkM1ellYTnpJaXdpWW1GelpTOWZkR0ZpYkdWekxuTmhjM01pTENKdGIyUjFiR1Z6TDI1aGRpOWZibUYyTFcxcGJtOXlMbk5oYzNNaUxDSnRiMlIxYkdWekwyNWhkaTlmYm1GMkxXMWxaMkV1YzJGemN5SXNJbTF2WkhWc1pYTXZibUYyTDE5dVlYWXRabTl2ZEdWeUxuTmhjM01pTENKdGIyUjFiR1Z6TDJKaGJtNWxjaTlmWDJKaGJtNWxjaTV6WVhOeklpd2liVzlrZFd4bGN5OWpZWEprY3k5ZlgyTmhjbVJ6TG5OaGMzTWlMQ0p0YjJSMWJHVnpMMk4wWVM5ZlgyTjBZUzV6WVhOeklpd2liVzlrZFd4bGN5OW1iMjkwWlhJdlgyWnZiM1JsY2k1ellYTnpJaXdpYlc5a2RXeGxjeTlvWldGa1pYSXZYMmhsWVdSbGNpNXpZWE56SWl3aWJXOWtkV3hsY3k5dFlXbHVMMTl0WVdsdUxuTmhjM01pTENKdGIyUjFiR1Z6TDJadmNtMHZYMlp2Y20wdWMyRnpjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUUwUTBFc1FVRkJVeXhCUVVGUExFRkJRVk1zUVVGQldTeEJRVUZSTEVGQlFWRXNRVUZCVVN4QlFVRlJMRUZCUVVzc1FVRkJVenRGUVZjdlJTeEJRVUZUT3p0QlFVdGlMRUZCUVU4c1FVRkJVVHRGUVVkWUxFRkJRVk03TzBGQlZXSXNRVUZCU3l4QlFVRkxPMFZCUTA0c1FVRkJVenRGUVVOVUxFRkJRVkU3TzBGQlVWb3NRVUZCVlR0RlFVTk9MRUZCUVZNN08wRkJXV0k3UlVGTlNTeEJRVUV3UWp0RlFVTXhRaXhCUVVGelFqczdRVUZsTVVJN1JVRkRTU3hCUVVGUk96dEJRVmxhTzBWQlIwa3NRVUZCV1R0RlFWVm9RaXhCUVVGRExFRkJRVkVzUVVGQlF6dEpRVVZHTEVGQlFWTTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUWkRha0lzUVVGQlNUdEZRVU5CTEVGQlFXVTdPMEZCUzI1Q0xFRkJRVWM3UlVGRlF5eEJRVUZoT3p0QlFWZHFRanRGUVVOSkxFRkJRVms3TzBGQlMyaENPMFZCUTBrc1FVRkJXVHRGUVVOYUxFRkJRVTg3TzBGQlkxZ3NRVUZCVFN4QlFVRkxMRUZCUVVzN1JVRkpXaXhCUVVGaE8wVkJTV0lzUVVGQlZ6czdRVUZMWmp0RlFVTkpMRUZCUVdFN1JVRkRZaXhCUVVGaE8wVkJRMklzUVVGQlZ6czdRVUZMWmp0RlFVTkpMRUZCUVZFN08wRkJaVm9zUVVGQlF5eEJRVUZUTEVGQlFVTTdSVUZGU0N4QlFVRlRPMFZCUTFRc1FVRkJVenM3T3pzN1FVRmhha0lzUVVGQlN6dEZRVVZFTEVGQlFWYzdSVUZEV0N4QlFVRmhPMFZCUTJJc1FVRkJWVHRGUVVOV0xFRkJRV2RDT3p0QlFVZHdRanRGUVVOSkxFRkJRVXM3TzBGQlIxUTdSVUZEU1N4QlFVRlJPenRCUVcxRVdqdEZRVU5KTEVGQlFWRTdPMEZCVVZvc1FVRkJSeXhCUVVGTE8wVkJRMG9zUVVGQlZUczdRVUZUWkR0RlFVTkpMRUZCUVZFN08wRkJaMEphTzBWQlEwa3NRVUZCVVR0RlFVTlNMRUZCUVZFN1JVRkRVaXhCUVVGVE96dEJRVkZpTzBWQlEwa3NRVUZCVVR0RlFVTlNMRUZCUVZNN1JVRkRWQ3hCUVVGaE96dEJRVmRxUWl4QlFVRlJMRUZCUVU4c1FVRkJVVHRGUVVsdVFpeEJRVUZoTzBWQlEySXNRVUZCVnp0RlFVTllMRUZCUVZFN1JVRkRVaXhCUVVGblFqczdRVUZSY0VJc1FVRkJVVHRGUVVOS0xFRkJRV0U3TzBGQlVXcENMRUZCUVZFN1JVRkZTaXhCUVVGblFqczdRVUZYY0VJc1FVRkJVU3hCUVVGTExFRkJRVXNzUVVGQmFVSXNRVUZCU3l4QlFVRm5RaXhCUVVGTE8wVkJTWHBFTEVGQlFXOUNPMFZCUTNCQ0xFRkJRVkU3TzBGQlVWb3NRVUZCVFN4QlFVRlpMRUZCUVVzN1JVRkZia0lzUVVGQlVUczdRVUZQV2l4QlFVRk5MRUZCUVc5Q0xFRkJRVXM3UlVGRGRrSXNRVUZCVVR0RlFVTlNMRUZCUVZNN08wRkJUMnBDTzBWQlEwa3NRVUZCVlR0RlFVTldMRUZCUVdkQ096dEJRVk53UWp0RlFVTkpMRUZCUVdsQ08wVkJRMnBDTEVGQlFXZENPenRCUVUxd1FpeEJRVUZMTzBWQlEwY3NRVUZCYjBJN1JVRkRjRUlzUVVGQmFVSTdSVUZEYWtJc1FVRkJiMEk3UlVGRGNFSXNRVUZCV1R0RlFVbHdRaXhCUVVGTExFRkJRV1VzUVVGQlowTXNRVUZCU3l4QlFVRmxPMGxCUlRWRUxFRkJRVzlDTzBGQlVXaERMRUZCUVVzc1FVRkJiVUlzUVVGQlN6dEZRVVY0UWl4QlFVRlpPMFZCUTFvc1FVRkJVenM3UVVNMVpXUTdSVUV4UW1sQ0xFRkJNa0ptTzBWQlEwRXNRVUZCZVVJN1JVRkRla0lzUVVGQmQwSTdPMEZCUlRGQ08wVkRja0pYTEVGRWMwSlVPMFZCUTBFc1FVRkJZVHRGUVRsQ1NDeEJRU3RDVmp0RlFVTkJMRUZCUVdsQ08wVkJRMnBDTEVGQlFWRTdPMEZCUzFZN1JVTjZRMUVzUVVRd1EwNDdSVUYwUTJVc1FVRjFRMlk3UlVGRFFTeEJRVUZYTzBWQmNFTktMRUZCY1VOUU8wVkJRMEVzUVVGQllUdEZRVU5pTEVGQlFXVTdPMEZCYzBOcVFpeEJRVUZ0UWl4QlFVRkxMRUZCUVdsQ0xFRkJRVXM3UlVGSE5VTXNRVUZCVVR0RlFVTlNMRUZCUVZNN1JVRnlSazBzUVVGelJtWTdSVUZEUVN4QlFVRlhPMFZCUTFnc1FVRkJXVHRGUVVOYUxFRkJRVms3UlVGRFdpeEJRVUZUTzBWQlExUXNRVUZCYVVJN08wVkJSV3BDTEVGQlFXdENPMFZEYWtkYUxFRkVhMGRPT3p0RlFVVkJMRUZCUVZrN1JVRkZaQ3hCUVVGcFFpeEJRVUZSTEVGQlFVc3NRVUZCWlN4QlFVRlJMRUZCUVVzc1FVRkJZenM3U1VOMFIyaEZMRUZFZDBkS08wbERjRWRKTEVGRWNVZEtPenRCUlhwSFNpeEJRVUZUTzBWQlExQXNRVUZCVXp0RlFVTlVMRUZCUVZNN1JVRkRWQ3hCUVVGUE96dEJRMGhVTEVGQlFVc3NRVUZCVVR0RlFVTllMRUZCUVU4N08wRkRSRlE3UlVGRFJTeEJRVUZyUWp0RlFVTnNRaXhCUVVGaE8wVkJRMklzUVVGQll6dEZRVU5rTEVGQlFWRTdSVUZEVWl4QlFVRlhPenRCUVVkaU8wVkJRMFVzUVVGQlV6dEZRVU5VTEVGQlFXZENPMFZEYlVOb1FqdEpSSEpEUmp0TlFVdEpMRUZCUVZNN1RVRkRWQ3hCUVVGWk96dEJRVVZvUWp0RlFVTkZMRUZCUVU4N1JVTTBRbEE3U1VRM1FrWTdUVUZKU1N4QlFVRlBPenRCUVVWWU8wVkJRMFVzUVVGQlR6dEZRM05DVUR0SlJIWkNSanROUVVsSkxFRkJRVTg3TzBGQlJWZzdSVUZEUlN4QlFVRlBPMFZEWjBKUU8wbEVha0pHTzAxQlNVa3NRVUZCVHpzN1FVRkhXRHRGUVVORkxFRkJRVTg3UlVOVFVEdEpSRlpHTzAxQlNVa3NRVUZCVHpzN1FVRkhXRHRGUVVORkxFRkJRVTg3UlVORlVEdEpSRWhHTzAxQlNVa3NRVUZCVHpzN1FVRkhXRHRGUVVORkxFRkJRVTg3UlVOTVVEdEpSRWxHTzAxQlNVa3NRVUZCVHpzN1FVRkhXRHRGUVVORkxFRkJRVTg3UlVOYVVEdEpSRmRHTzAxQlNVa3NRVUZCVHpzN1FVRkhXRHRGUVVORkxFRkJRVTg3UlVOdVFsQTdTVVJyUWtZN1RVRkpTU3hCUVVGUE96dEJRVWRZTzBWQlEwVXNRVUZCVHp0RlF6RkNVRHRKUkhsQ1JqdE5RVWxKTEVGQlFVODdPMEZCUlZnN1JVRkRSU3hCUVVGUE8wVkRhRU5RTzBsRUswSkdPMDFCU1Vrc1FVRkJUenM3UVVGRldEdEZRVU5GTEVGQlFWRTdSVUZEVWl4QlFVRlZPMFZCUlZvc1FVRkJXVHRKU0hSR1NpeEJSM1ZHU2p0SlFVTktMRUZCUVZrc1FVRkJRenROU0haR1FTeEJSM2RHVUR0RlFVTk9MRUZCUVZrN1NVaHNSa29zUVVkdFJrbzdPMEZGTTBaS08wVkJRMFVzUVVGQlVUdEZRVU5TTEVGQlFWTTdSVUZEVkN4QlFVRlpPMFZCUldRc1FVRkJReXhCUVVGVExFRkJRVU03U1VGRFVDeEJRVUZaT3p0QlFVVm9RanRGVEU1UkxFRkxUMDQ3UlVGRFFTeEJRVUZUT3p0QlFVVllPMFZCUTBVc1FVRkJhVUk3TzBGRFdHNUNPMFZCUTBNc1FVRkJVVHRGUVVOU0xFRkJRVTg3TzBGQlJWSTdSVUZEUlN4QlFVRmxPMFZHYzBObU8wbEZka05HTzAxQlNVa3NRVUZCV1R0TlFVVm9RaXhCUVVGRk8xRkJRMGtzUVVGQldUdEZRVVZzUWl4QlFVRkZPMGxPVmswc1FVMVhTanM3UVVGRlNqdEZRVU5GTEVGQlFXZENPMFZCUTJoQ0xFRkJRVk03UlVaNVFsUTdTVVV6UWtZN1RVRkxTU3hCUVVGWk8wMUJRMW9zUVVGQlZUdE5RVU5XTEVGQlFXTTdUVUZGYkVJc1FVRkJSVHRSUVVOSkxFRkJRVlU3VVVGRFZpeEJRVUZMTzFGQlEwd3NRVUZCVFR0UlFVTk9MRUZCUVU4N1VVRkRVQ3hCUVVGbE8xRkJRMllzUVVGQllUdFJRVU5pTEVGUWVrSkxPMDFQTmtKWUxFRkJRVVVzUVVGQlpUdFJRVU5VTEVGQlFWTTdUVUZGYWtJc1FVRkJSU3hCUVVGbE8xRkJRMVFzUVVGQlV6dE5RVVZxUWl4QlFVRkZMRUZCUVdVN1VVRkRWQ3hCUVVGVE96dEJRVVZxUWp0RlRucERVU3hCVFRCRFRqdEZSa2hCTzBsRlMwWXNRVUZCVFR0TlFVZEJMRUZCUVZVN1RVRkRWaXhCUVVGTE8wMUJRMHdzUVVGQlRUdEZRVVZhTEVGQlFVMDdTVUZEUml4QlVHcEVUenRKVDJ0RVVDeEJRVUZaTzBsQlExb3NRVUZCVXpzN1FVWm1XRHRGUldsQ1JpeEJRVUZQTEVGQlFVOHNRVUZCVHl4QlFVRkpMRUZCUVVrN1NVRkZla0lzUVVGQlV6czdRVU5vUldJN1JVRkRSU3hCUVVGVE8wVkJRMVFzUVVGQldUdEZRVVZrTzBsUVFWRXNRVTlEU2p0SlFVTkJMRUZCUVdFN1NVRkRZaXhCUVVGak8wbEJRMlFzUVVGQlVUdEpRVU5TTEVGQlFXVTdTVUZEWml4QlFVRmhPMGxCUTJJc1FVRkJWenRKU0d0RFlqdE5SM3BEUmp0UlFWVk5MRUZCUVZrN1JVRkZiRUlzUVVGQlZ6dEpRVU5RTEVGQlFWTTdTVUZGWWl4QlFVRlhMRUZCUVVVN1RVRkRVQ3hCUVVGVE8wMUJRMVFzUVVGQlV6dE5VSEpDVUN4QlQzTkNSanROUVVOQkxFRkJRVkU3U1VGSlpDeEJRVUZYTEVGQlFVVXNRVUZCWVR0TlFVTnNRaXhCUVVGVE8wbEJSV3BDTEVGQlFWY3NRVUZCUlN4QlFVRlpPMDFCUTJwQ0xFRkJRVms3UlVGRmNFSTdTVkIyUWxjc1FVOTNRbEE3U1VGRFFTeEJRVUZUTzBsQlExUXNRVUZCVXp0SlFVVmlMRUZCUVdkQ08wMVFkRU5TTEVGUGRVTkdPenRCUVVkT0xFRkJRVlU3UlZCb1EwTXNRVTlwUTFBN1JVRkRTaXhCUVVGVkxFRkJRVU03U1ZBMVEwZ3NRVTgyUTBZN08wRkRZazRzUVVGQlF5eEJRVUZaTEVGQlFVODdSVUZEWkN4QlFVRlRPMEZCUTJZc1FVRkJReXhCUVVGWkxFRkJRVTg3UlVGRFpDeEJRVUZQT3p0QlNsVllPMFZKU0VZc1FVRkJTU3hCUVVGWk8wbEJRMVlzUVVGQlZUczdRVUZGYUVJc1FVRkJTeXhCUVVGbE8wVkJRMnhDTEVGQlFWTTdPMEZCUlZnc1FVRkJTeXhCUVVGbExFRkJRVFpDTEVGQlFVc3NRVUZCWlN4QlFVRm5ReXhCUVVGTExFRkJRV1VzUVVGQmFVTXNRVUZCU3l4QlFVRmxPMFZCU1RWTExFRkJRVk03T3pzN096czdRVUZSV0N4QlFVRnJRanM3UlVGSGFFSXNRVUZCVnp0RlFVTllMRUZCUVdFN1JVRkZaaXhCUVVGcFFpeEJRVUZKTEVGQlFXZENPMGxCUTJwRExFRkJRVms3TzBGQlJXaENPMFZCUTBVc1FVRkJWVHRGUVVOV0xFRkJRVms3UlVveFFsbzdTVWsyUWtZc1FVRkJaMEk3VFVGRFZpeEJRVUZYTzBsQlJXcENMRUZCUVdFc1FVRkJaMEk3VFVGRGRrSXNRVUZCVnpzN1FVRkZha0k3UlZRMVJXbENMRUZUTmtWbU8wVkJRMEVzUVVGQlZUdEZRVU5XTEVGQlFWazdSVXAwUTFvN1NVbDVRMFlzUVVGQlpUdE5RVU5VTEVGQlFWYzdTVUZGYWtJc1FVRkJZU3hCUVVGbE8wMUJRM1JDTEVGQlFWYzdPMEZCUldwQ08wVkJRMFVzUVVGQldUdEZRWEJHU2l4QlFYRkdVanM3UVVGRlJqdEZRV2hIYTBJc1FVRnBSMmhDTzBWU04wWk5MRUZST0VaT08wVkJlRVpqTEVGQmVVWmtPMFZCUlVFc1FVRkJaVHRGUVVWcVFpeEJRVUZqT3p0SlFVVldMRUZCUVZVN1NVRkRWaXhCUVVGTE8wbEJRMHdzUVVGQlRUdEpRVU5PTEVGQlFVODdSVW92UkZRN1NVbHRSRVk3VFVFdlJtdENMRUZCT0Vka08wMUJkRVpLTEVGQlFXVTdVVUZEV0N4QlFVRlRPMUZCUTFRc1FVRkJVenRSUVVOVUxFRkJRVTg3TzBGQmMwWllPMFZCUTBVc1FVRkJWVHRGUVVOV0xFRkJRVXM3UlVGRFRDeEJRVUZOTzBWQlJWSXNRVUZCVXp0SlFVTk1MRUZCUVZNN1JVb3pSVmc3U1VrNFJVWXNRVUZCWVR0TlFVTlFMRUZCUVUwN1RVRkRUaXhCUVVGUE8wVkthRVpZTzBsSmNVVkdPMDFCWTBrc1FVRkJTenROUVVOTUxFRkJRVTA3TzBGQlJWWTdSVUZEUlN4QlFVRlZPMFZCUTFZc1FVRkJVenRGUVVOVUxFRkJRVXM3UlVGRFRDeEJRVUZQTzBWQlJWUXNRVUZCYlVJN1NVRkRaaXhCUVVGVE8wVktOMFpZTzBsSlowZEdMRUZCUVdFN1RVRkRVQ3hCUVVGUE8wMUJRMUFzUVVGQlRUdE5RVU5hTEVGQlFXRXNRVUZCYlVJN1VVRkRlRUlzUVVGQlR6dEZTbkJIWWp0SlNYTkdSanROUVdsQ1NTeEJRVUZMTzAxQlEwd3NRVUZCVHpzN1FVRkZXQ3hCUVVGdlFqdEZRVVZzUWl4QlFVRlZPMFZCUTFZc1FVRkJVenRGUVVOVUxFRkJRVTg3UlVGRFVDeEJRVUZSTzBWQlExSXNRVUZCVlR0RlFVTldMRUZCUVdFN08wVkJSV0lzUVVGQlR6dEZRWFJLVHl4QlFYVktaRHM3UVVGSFJpeEJRVUZyUWl4QlFVRlZMRUZCUVd0Q096dEZRVVV4UXl4QlFVRlRPMFZCUTFRc1FVRkJWVHRGUVVOV0xFRkJRVms3TzBWQlJWb3NRVUZCVnp0RlFVTllMRUZCUVhGQ08wRkJSWHBDTEVGQlFXdENPenRGUVVWa0xFRkJRVXM3UlVGRFRDeEJRVUZOTzBWQlEwNHNRVUZCVHp0RlFVTlFMRUZCUVZFN1JVRkRVaXhCUVVGbE8wVkJRMllzUVVGQlVUdEJRVVZhTEVGQlFXdENPenRGUVVWa0xFRkJRVkU3UlVGRFVpeEJRVUZQTzBWU2VFeEZMRUZSZVV4VU8wVkJRMEVzUVVGQlVUdEZRVU5TTEVGQlFVODdSVUZEVUN4QlFVRlhPMEZCUTJZc1FVRkJiVUk3TzBWQlJXWXNRVUZCVlR0RlFVTldMRUZCUVZFN1JVRkRVaXhCUVVGUE8wVkJRMUFzUVVGQlN6dEZRVU5NTEVGQlFVMDdRVUZEVml4QlFVRnRRaXhCUVVGSkxFRkJRVlVzUVVGQmJVSXNRVUZCU1RzN1JVRkZjRVFzUVVGQlV6dEZRVU5VTEVGQlFWVTdSVUZEVml4QlFVRlRPMFZCUTFRc1FVRkJVVHRGUVVOU0xFRkJRVTg3UlVGRFVDeEJRVUZMTzBWQlEwd3NRVUZCV1R0RlFVTmFMRUZCUVUwN1JVRkRUaXhCUVVGaE8wVlNPVTFLTEVGUkswMVVPMFZCUTBFc1FVRkJVenM3UlVGRlZDeEJRVUZYTzBWQlExZ3NRVUZCY1VJN1JVRkRja0lzUVVGQmIwSTdRVUZGZUVJc1FVRkJiVUlzUVVGQlNUdEZRVU51UWl4QlFVRlhPMEZCUldZc1FVRkJiVUlzUVVGQlNUdEZRVU51UWl4QlFVRlhPMEZCUjJZc1FVRkJhMElzUVVGQmEwSXNRVUZCVlN4QlFVRnJRaXhCUVVGclFqczdSVUZGTlVVc1FVRkJVenRCUVVObUxFRkJRV3RDTEVGQlFXMUNMRUZCUVVrc1FVRkJWU3hCUVVGclFpeEJRVUZ0UWl4QlFVRkpPenRGUVVWMFJpeEJRVUZUTzBGQlEyWXNRVUZCYTBJc1FVRkJiVUlzUVVGQlNUdEZRVU51UXl4QlFVRlhPMEZCUTJwQ0xFRkJRV3RDTEVGQlFXMUNMRUZCUVVrN1JVRkRia01zUVVGQlZ6czdRVUZIYWtJc1FVRkJaMElzUVVGQlRTeEJRVUZuUWl4QlFVRkpMRUZCUVZVc1FVRkJaMElzUVVGQlNUczdSVUZGY0VVc1FVRkJWVHRGUVVOV0xFRkJRVk03UlVGRFZDeEJRVUZSTzBWQlExSXNRVUZCVHp0RlVqbFBSU3hCVVN0UFZEdEJRVU5LTEVGQlFXZENPenRGUVVWYUxFRkJRVlU3UlVGRFZpeEJRVUZMTzBWQlEwd3NRVUZCVHp0RlFVTlFMRUZCUVZrN1JVRkRXaXhCUVVGWk8wRkJRMmhDTEVGQlFXZENMRUZCUVVrc1FVRkJWU3hCUVVGblFpeEJRVUZKT3p0RlFVVTVReXhCUVVGVE8wVkJRMVFzUVVGQlR6czdSVUZGVUN4QlFVRlhPMFZCUTFnc1FVRkJjVUk3UlVGRGNrSXNRVUZCYTBJN1JVRkRiRUlzUVVGQldUdEJRVU5vUWl4QlFVRm5RaXhCUVVGSk96dEZRVVZvUWl4QlFVRkxPMEZCUTFRc1FVRkJaMElzUVVGQlNUczdSVUZGYUVJc1FVRkJTenRCUVVWVUxFRkJRV1VzUVVGQlowSTdPMFZCUlhwQ0xFRkJRVms3UVVGRGJFSXNRVUZCWlN4QlFVRm5RaXhCUVVGSkxFRkJRVlVzUVVGQlpTeEJRVUZuUWl4QlFVRkpPenRGUVVVeFJTeEJRVUZaTzBGQlEyeENMRUZCUVdVc1FVRkJaMElzUVVGQlNUdEZRVU0zUWl4QlFVRjVRanRCUVVNdlFpeEJRVUZsTEVGQlFXZENMRUZCUVVrN1JVRkROMElzUVVGQmVVSTdRVXB3VHpkQ08wVkpORXhHTzBsQk1FTkpMRUZCUVZNN08wRkJSMklzUVVGQmFVSXNRVUZCWjBJN1JVRkZMMElzUVVGQlZUdEZRVU5XTEVGQlFVczdSVUZEVEN4QlFVRlBPMFZCUTFBc1FVRkJVVHRGUVhoU1NTeEJRWGxTV2p0RlVqTlNWeXhCVVRSU1dEdEZRVU5CTEVGQlFWVTdSVUZEVml4QlFVRTBRanRGUVhaU1pDeEJRWGRTWkRzN1JVRkhRU3hCUVVGWE8wVkJRMWdzUVVGQlZ6dEZRVU5ZTEVGQlFWazdSVUZGWkN4QlFVRm5RaXhCUVVGSExFRkJRV2RDTEVGQlFVYzdTVUZEYkVNc1FVRkJVenRKUVVOVUxFRkJRVmM3U1VGRFdDeEJRVUZSTzBsQlExSXNRVUZCWVR0SlFVTmlMRUZCUVZNN1NWSjRVMHdzUVZGNVUwbzdTVUZEUVN4QlFVRjNRanRKUVVONFFpeEJRVUY1UWp0SlFVTjZRaXhCUVVGVk8wbEJRMVlzUVVGQlpUdEpRVU5tTEVGQlFXRTdTVUZEWWl4QlFVRmxPMGxCUTJZc1FVRkJWenRKUVVOWUxFRkJRV0U3U1VGRFlpeEJRVUZ6UWp0RlFVVXhRaXhCUVVGbExFRkJRVmtzUVVGQlowSXNRVUZCUlRzN1NVRkZla01zUVVGQlZ6dEZRVVZtTEVGQlFXVXNRVUZCWVN4QlFVRkxMRUZCUVVjc1FVRkJaMElzUVVGQlJTeEJRVUZoTEVGQlFVczdPMGxCUlhCRkxFRkJRVmM3U1VGRFdDeEJRVUZUT3p0QlNteFNXRHRGU1hGU1JpeEJRVUZoTEVGQlFXbENMRUZCUVdFc1FVRkJaMEk3U1VGRmRrUXNRVUZCVHp0SlFVTlFMRUZCUVUwN08wRkJTVllzUVVGQlowSXNRVUZCVXpzN1JWSjZWV3BDTEVGUk1sVktPMEZCUlVvc1FVRkJaMElzUVVGQlowSXNRVUZCWXl4QlFVRm5RaXhCUVVGak96dEZRVWQ0UlN4QlFVRlJPMFZCUTFJc1FVRkJZVHRGUVVWcVFpeEJRVUZuUWl4QlFVRm5RaXhCUVVGaExFRkJRVWtzUVVGQlowSXNRVUZCWXl4QlFVRmhPMGxCUTNSR0xFRkJRVlU3U1VGRFZpeEJRVUZsTzBGQlNYSkNMRUZCUVdkQ0xFRkJRV2RDTEVGQlFXRTdSVUZEZGtNc1FVRkJWVHRGUVVOV0xFRkJRVk03UlVGRFZDeEJRVUZSTzBWQlExSXNRVUZCVHp0RlFVTlFMRUZCUVUwN1JVRkRUaXhCUVVGTE8wVkJRMHdzUVVGQldUdEZTbTVVYUVJN1NVazBVMFlzUVVGQlowSXNRVUZCWjBJc1FVRkJZVHROUVZWeVF5eEJRVUZUTzBGQlJXcENMRUZCUVdkQ0xFRkJRV003UlVGRE1VSXNRVUZCWXp0RlFVVnNRaXhCUVVGblFpeEJRVUZqTEVGQlFXRTdTVkoyVnpsQ0xFRlJkMWRRTzBsQlEwRXNRVUZCVnpzN1NVRkZXQ3hCUVVGVE8wVkJSV1lzUVVGQlowSXNRVUZCWXl4QlFVRlpPenRKUVVWd1F5eEJRVUZUTzBsQlExUXNRVUZCVXp0SlFVTlVMRUZCUVZVN1NVRkRWaXhCUVVGTk8wbEJRMDRzUVVGQlN6dEpRVU5NTEVGQlFWazdTVUZEV2l4QlFVRlBPMGxCUTFBc1FVRkJVVHRKUVVOU0xFRkJRVzFDTzBsQlEyNUNMRUZCUVhGQ08wbEJRM0pDTEVGQlFXbENPMFZCUlhaQ0xFRkJRV2RDTEVGQlFXTXNRVUZCV1N4QlFVRlBPMGxCUXpORExFRkJRV3RDTzBWQlEzaENMRUZCUVdkQ0xFRkJRV01zUVVGQldTeEJRVUZQTzBsQlF6TkRMRUZCUVd0Q08wVkJRM2hDTEVGQlFXZENMRUZCUVdNc1FVRkJXU3hCUVVGUE8wbEJRek5ETEVGQlFXdENPMFZCUTNoQ0xFRkJRV2RDTEVGQlFXTXNRVUZCV1N4QlFVRlBPMGxCUXpORExFRkJRV3RDTzBWQlEzaENMRUZCUVdkQ0xFRkJRV01zUVVGQldTeEJRVUZQTzBsQlF6TkRMRUZCUVd0Q08wVkJRM2hDTEVGQlFXZENMRUZCUVdNc1FVRkJXU3hCUVVGUE8wbEJRek5ETEVGQlFXdENPMFZCUTNoQ0xFRkJRV2RDTEVGQlFXTXNRVUZCV1N4QlFVRlBPMGxCUXpORExFRkJRV3RDTzBWQlEzaENMRUZCUVdkQ0xFRkJRV01zUVVGQldTeEJRVUZQTzBsQlF6TkRMRUZCUVd0Q08wRktPVlowUWp0RlNUSlNSanM3U1VGMVJVa3NRVUZCV1R0SlFVTmFMRUZCUVZrN1NVRkRhRUlzUVVGQlpUdE5RVU5VTEVGQlFWazdUVUZEV2l4QlFVRlpPenRCU25SWGFFSTdSVWt3VjBZN1NVRkRTU3hCUVVGVk8wbEJRMVlzUVVGQlV6dEpRVU5VTEVGQlFWRTdTVUZEVWl4QlFVRlBPMGxCUTFBc1FVRkJWVHRKUVVOV0xFRkJRVms3U1VGRFdpeEJRVUZaTzBsQmNsbG9RaXhCUVVGbE8wMUJRMWdzUVVGQlV6dE5RVU5VTEVGQlFWTTdUVUZEVkN4QlFVRlBPMGxCYzFsWUxFRkJRV1VzUVVGQllTeEJRVUZMT3p0TlFVVXpRaXhCUVVGWE8wMUJRMWdzUVVGQlV6dEpRVVZtTEVGQlFXZENPMDFCUTFZc1FVRkJWVHROUVVOV0xFRkJRVkU3VFVGRFVpeEJRVUZQTzAxQlExQXNRVUZCV1R0TlFVTmFMRUZCUVZVN1RVRkRWaXhCUVVGWk8wMUJibUZHTEVGQmIyRldPMDFCUlU0c1FVRkJaMElzUVVGQlJUczdVVUZGVml4QlFVRlhPMDFCUlc1Q0xFRkJRV2RDTEVGQlFVVXNRVUZCWVN4QlFVRkxPenRSUVVVMVFpeEJRVUZYTzFGQlExZ3NRVUZCVXp0SlFVVnFRaXhCUVVGclFqdE5RVU5hTEVGQlFWTTdUVUZEVkN4QlFVRmhPMGxCUlc1Q0xFRkJRV3RDTEVGQlFVczdPMDFCUldwQ0xFRkJRVlU3VFVGRFZpeEJRVUZUTzAxQkwySkhMRUZCWjJOYU8wMUJhR05aTEVGQmFXTmFPMDFCUTBFc1FVRkJVenROVW14alJpeEJVVzFqVUR0TlFVTkJMRUZCUVZVN1RVRkRWaXhCUVVGbE8wMUJRMllzUVVGQmEwSTdUVUZGZUVJc1FVRkJhMElzUVVGQlN5eEJRVUZETzFGU2VtTm9RaXhCVVRCalFUdE5RVU5TTEVGQlFXdENMRUZCUVVzc1FVRkJRenRSVWpOamFFSXNRVkUwWTBFN1VVRkRRU3hCUVVGWk8wbEJSWEJDTEVGQlFXZENMRUZCUVZVc1FVRkJaMEk3VFVGRGNFTXNRVUZCVXp0SlFVVm1MRUZCUVdkQ0xFRkJRVzFDTEVGQlFXZENMRUZCUVdsQ0xFRkJRV2RDT3p0TlFVazVSU3hCUVVGVk8wMUJjbVJGTEVGQmMyUmFPMDFCUTBFc1FVRkJUenROVW5Ca1RDeEJVWEZrUmp0TlFVTkJMRUZCUVZNN1RVRkRWQ3hCUVVFd1FqdE5RVU14UWl4QlFVRlhPMDFCUjFnc1FVRkJkMEk3VFVGMFl6bENMRUZCUVdkQ0xFRkJRV2xDTEVGQlFWRXNRVUZCWjBJc1FVRkJaU3hCUVVGUkxFRkJRV2RDTEVGQlFXRTdVVUZEZWtjc1FVRkJVenRSUVVOVUxFRkJRVk03VVVGRFZDeEJRVUZQTzAxQmNXTllMRUZCUVdkQ0xFRkJRV2xDTEVGQlFWa3NRVUZCWjBJc1FVRkJaU3hCUVVGWkxFRkJRV2RDTEVGQlFXRTdVVUZETjBjc1FVRkJVenRSUVVOVUxFRkJRVms3VVVGRFdpeEJRVUYzUWp0TlFVVm9ReXhCUVVGblFpeEJRVUZ2UWl4QlFVRlZMRUZCUVdkQ0xFRkJRV3RDTEVGQlFWVXNRVUZCWjBJc1FVRkJaMEk3TzFGQlJXeElMRUZCUVZNN1VVRkRWQ3hCUVVGVk8xRkJRMVlzUVVGQlRUdFJRVU5PTEVGQlFWRTdVVUZEVWl4QlFVRlJPMUZCUTFJc1FVRkJUenRSUVVOUUxFRkJRVlU3TzFGQlJWWXNRVUZCVVR0UlFVTlNMRUZCUVZNN1VVRkZha0lzUVVGQlowSXNRVUZCYjBJc1FVRkJVeXhCUVVGSExFRkJRV2RDTEVGQlFXdENMRUZCUVZNc1FVRkJSeXhCUVVGblFpeEJRVUZuUWl4QlFVRlRPMVZCUXpkSUxFRkJRVlU3VlVGRFZpeEJRVUZQTzFWQlExQXNRVUZCVVR0VlFVTlNMRUZCUVVzN1ZVRkRUQ3hCUVVGTk8xVkJRMDRzUVVGQlZ6dFZRVU5ZTEVGQlFXRTdWVUZEWWl4QlFVRlpPMVZCUTFvc1FVRkJZVHRWUVVOaUxFRkJRVms3TzFWQlJWb3NRVUZCWlR0VlFVTm1MRUZCUVZFN1ZVRkRVaXhCUVVGVE8xVkJRMVFzUVVGQmEwSTdWVUZGTlVJc1FVRkJaMElzUVVGQmIwSXNRVUZCVXl4QlFVRkRMRUZCUVZFc1FVRkJaMElzUVVGQmEwSXNRVUZCVXl4QlFVRkRMRUZCUVZFc1FVRkJaMElzUVVGQlowSXNRVUZCVXl4QlFVRkRPMWxTYm1kQ2Rra3NRVkZ2WjBKRU8xbFNjR2RDUXl4QlVYRm5Ra1E3V1ZKc1owSktMRUZSYldkQ1NUdEpRVWxhTEVGQlFXZENMRUZCUVc5Q096dE5RVVUxUWl4QlFVRlJPenROUVhobVpDeEJRVUZQTzAxQlJHOURMRUZCUlRORE8wMUJNR1pOTEVGQlFXTTdUVUZEWkN4QlFVRmpPMDFCUTJRc1FVRkJWVHROUVVOV0xFRkJRVms3VFVGRFdpeEJRVUZaTzAxQlExb3NRVUZCTkVJN1RVRkZjRU1zUVVGQlowSXNRVUZCYjBJc1FVRkJSVHM3VVVGRk5VSXNRVUZCWXp0UlFVTmtMRUZCUVdNN1RVRkZlRUlzUVVGQlowSXNRVUZCYjBJc1FVRkJTenM3VVZJMWFFSnFReXhCVVRob1FrVTdVVUZEUVN4QlFVRmhPMUZCUTJJc1FVRkJWenRSUVVOWUxFRkJRV1U3U1VGRmVrSXNRVUZCWjBJc1FVRkJhMEk3VFVGRE1VSXNRVUZCVVR0TlFVTlNMRUZCUVdFN1RVRkRZaXhCUVVGVE8wMVNjbWxDU2l4QlVYTnBRa3c3VFVGRFFTeEJRVUZsTzAxQlEyWXNRVUZCVnp0TlFVVnVRaXhCUVVGblFpeEJRVUZyUWl4QlFVRkRPMUZTTTJsQ00wSXNRVkUwYVVKRk8wbEJSVllzUVVGQlowSXNRVUZCYTBJN08wMUJSVEZDTEVGQlFWYzdTVUZGYmtJc1FVRkJaMElzUVVGQmEwSXNRVUZCUnpzN1RVRkZOMElzUVVGQlZUdE5RVU5XTEVGQlFVczdUVUZEVEN4QlFVRk5PMDFCUTA0c1FVRkJVVHROUVVOU0xFRkJRVTg3VFVGRlppeEJRVUZuUWl4QlFVRnJRaXhCUVVGSExFRkJRVVU3VVVGRE4wSXNRVUZCVnp0TlFVVnlRaXhCUVVGblFpeEJRVUZyUWl4QlFVRkhMRUZCUVVjN1VVRkRPVUlzUVVGQlV6dFJRVVZ1UWl4QlFVRm5RaXhCUVVGclFpeEJRVUZITEVGQlFVY3NRVUZCVXp0VlFVTnlReXhCUVVGUE8wMUJSVzVDTEVGQlFXZENMRUZCUVd0Q0xFRkJRVWNzUVVGQlJ6dFJRVU01UWl4QlFVRlRPMGxCUlc1Q0xFRkJRV2RDTEVGQlFXdENMRUZCUVdFc1FVRkJTenM3VFVGRk5VTXNRVUZCVnp0SlFVVnVRaXhCUVVGblFqdE5RVU5XTEVGQlFWazdUVUZGYkVJc1FVRkJaMElzUVVGQlowSTdPMUZCUjNoQ0xFRkJRVTg3VVVGRFVDeEJRVUZQTzFGQlExQXNRVUZCVXp0UlFVVnFRaXhCUVVGblFpeEJRVUZuUWl4QlFVRkZPenROUVVkc1F5eEJRVUZuUWl4QlFVRm5RanRSUVVONFFpeEJRVUZsTzFGQlEyWXNRVUZCVXp0UlFVTlVMRUZCUVZFN1VVRkRVaXhCUVVGaE8xRkJSWEpDTEVGQlFXZENMRUZCUVdkQ0xFRkJRV0U3VlVGRGJrTXNRVUZCVlR0VlFVTldMRUZCUVZrN1ZVRkRXaXhCUVVGUk8xVkJRMUlzUVVGQlR6dFZRVU5RTEVGQlFXVTdVVUZGZWtJc1FVRkJaMElzUVVGQlowSXNRVUZCWVR0VlVuQnRRbkpETEVGUmNXMUNSVHRWUVVOQkxFRkJRV0U3VlVGRFlpeEJRVUZYTzFWQlExZ3NRVUZCVXp0SlFVbHVRaXhCUVVGblFpeEJRVUZqT3p0TlFYWnNRalZDTEVGQlFVODdUVUZFYjBNc1FVRkZNME03VFVGNWJFSk5MRUZCUVZFN1RVRkRhRUlzUVVGQlowSXNRVUZCWXl4QlFVRkZPenRSUVVWMFFpeEJRVUZqTzBsQlEzaENMRUZCUVdkQ0xFRkJRV003VFVGRGRFSXNRVUZCWlR0TlFVTm1MRUZCUVZFN1RVRkRVaXhCUVVGaE8wMUJRMklzUVVGQlV6dE5RVU5xUWl4QlFVRm5RaXhCUVVGakxFRkJRVms3VVVGRGFFTXNRVUZCV1R0TlFVTjBRaXhCUVVGblFpeEJRVUZqTEVGQlFXRTdVVkl4YmtKdVF5eEJVVEp1UWtVN1VVRkRRU3hCUVVGaE8wMUJRM1pDTEVGQlFXZENMRUZCUVdNc1FVRkJZVHRSUVVOcVF5eEJRVUZUTzAxQlEyNUNMRUZCUVdkQ0xFRkJRV01zUVVGQldUdFJRVU5vUXl4QlFVRk5PenRCUVVkb1FpeEJRVUZuUWl4QlFVRkhMRUZCUVZNN1JVRkRNVUlzUVVGQlZUdEZRVU5hTEVGQlFXZENMRUZCUVVNc1FVRkJWU3hCUVVGblFpeEJRVUZETEVGQlFWTXNRVUZCVXl4QlFVRkRMRUZCUVZVc1FVRkJVeXhCUVVGRE96dEpRVVV2UlN4QlFVRlRPMGxCUTFRc1FVRkJWVHRKUVVOV0xFRkJRVXM3U1VGRFRDeEJRVUZaTzBsQlExb3NRVUZCVXp0SlFVTlVMRUZCUVZFN1NVRkRVaXhCUVVGUE8wbEJRMUFzUVVGQldUdEpRVVZhTEVGQlFYRkNPMFZCUTNwQ0xFRkJRV2RDTEVGQlFVTXNRVUZCVlN4QlFVRlRMRUZCUVVNN1NVRkRha01zUVVGQlZ6dEZRVU5tTEVGQlFXZENMRUZCUVVNc1FVRkJVeXhCUVVGVExFRkJRVU03U1VGRGFFTXNRVUZCVnp0RlNuWnRRbUk3U1VsNWJVSkdMRUZCUVdkQ0xFRkJRVU1zUVVGQlZTeEJRVUZuUWl4QlFVRkRMRUZCUVZNc1FVRkJVeXhCUVVGRExFRkJRVlVzUVVGQlV5eEJRVUZETzAxQlF6ZEZMRUZCUVZrN1NVRkRiRUlzUVVGQlowSXNRVUZCUXl4QlFVRk5MRUZCUVZVc1FVRkJaMElzUVVGQlF5eEJRVUZOTEVGQlFWTXNRVUZCVXl4QlFVRkRMRUZCUVUwc1FVRkJWU3hCUVVGVExFRkJRVU1zUVVGQlRUdE5Vbmh3UW01SExFRlJlWEJDUmpzN1FVRkZUaXhCUVVGblFqdEZRVU5rTEVGQlFXVTdSVUZEYWtJc1FVRkJaMElzUVVGQlF5eEJRVUZWTEVGQlFXZENMRUZCUVVNN08wbEJSWGhETEVGQlFVODdTVUZEVUN4QlFVRnJRanM3UVVGRmRFSXNRVUZCWjBJc1FVRkJVenRGUVVOMlFpeEJRVUZqTzBWQlEyaENMRUZCUVdkQ0xFRkJRVk1zUVVGQlF5eEJRVUZWTEVGQlFXZENMRUZCUVZNc1FVRkJRenM3U1VGRk1VUXNRVUZCVFR0SlFVTk9MRUZCUVd0Q096dEJTakZ1UW5CQ08wVkpPRzVDUml4QlFVRm5RaXhCUVVGRExFRkJRVlVzUVVGQlowSXNRVUZCUXp0SlFVTjBReXhCUVVGUE8wVkJRMklzUVVGQmEwSXNRVUZCWjBJN08wbEJSVGxDTEVGQlFXVTdTVUZEYmtJc1FVRkJhMElzUVVGQlowSXNRVUZCUXl4QlFVRlZMRUZCUVd0Q0xFRkJRV2RDTEVGQlFVTTdUVUZETVVVc1FVRkJUenROUVVOUUxFRkJRV3RDTzAxQlEyeENMRUZCUVZrN1RVRkZXaXhCUVVGeFFqdE5RVU55UWl4QlFVRnJRanRKUVVONFFpeEJRVUZyUWl4QlFVRm5RaXhCUVVGRE8wMUJRemRDTEVGQlFVODdTVUZEWWl4QlFVRnJRaXhCUVVGblFpeEJRVUZETzAxQlF6ZENMRUZCUVU4N1NVRkRZaXhCUVVGclFpeEJRVUZuUWl4QlFVRkRMRUZCUVZNc1FVRkJWU3hCUVVGclFpeEJRVUZuUWl4QlFVRkRMRUZCUVZNN1RVRkROVVlzUVVGQlR6dEpRVU5pTEVGQlFXdENMRUZCUVdkQ0xFRkJRVU1zUVVGQlV6dE5RVU4wUXl4QlFVRjVRanRKUVVNdlFpeEJRVUZyUWl4QlFVRm5RaXhCUVVGRExFRkJRVk03VFVGRGRFTXNRVUZCVnp0RlFVTnFRaXhCUVVGdlFpeEJRVUZuUWl4QlFVRkRMRUZCUVZVc1FVRkJiMElzUVVGQlowSXNRVUZCUXpzN1NVRkZhRVlzUVVGQlV6dEZRVU5pTEVGQlFXZENMRUZCUVZNN1NVRkRja0lzUVVGQll6dEpRVU5zUWl4QlFVRm5RaXhCUVVGVExFRkJRVU1zUVVGQlZTeEJRVUZuUWl4QlFVRlRMRUZCUVVNN1RVRkRlRVFzUVVGQlRUczdRVUZMV2p0RlFVTkZMRUZCUVUwN1JVRkpVaXhCUVVGWE8wbEJRMUFzUVVGQlV6dEZRVU5pTEVGQlFWY3NRVUZCU3p0SlFVTmFMRUZCUVd0Q08wbEJRMnhDTEVGQlFXMUNPMGxCUTI1Q0xFRkJRV3RDTzBsQlEyeENMRUZCUVZNN1NVRkRWQ3hCUVVGaE8wbEJRMklzUVVGQlVUdEpRVU5TTEVGQlFVODdTVUZEVUN4QlFVRnZRanRKUVVOd1FpeEJRVUZSTzBsQlExSXNRVUZCVlR0SlFVTldMRUZCUVVzN1NVRkRUQ3hCUVVGUE8wbEJRMUFzUVVGQmFVSTdSVUZGY2tJc1FVRkJWeXhCUVVGTE8wbEJRMW9zUVVGQllUdEpRVU5pTEVGQlFWazdTVUZEV2l4QlFVRlJPMGxCUlZvc1FVRkJWeXhCUVVGTExFRkJRV1VzUVVGQk5rSXNRVUZCVnl4QlFVRkxMRUZCUVdVc1FVRkJiMElzUVVGQlZ5eEJRVUZMTEVGQlFXVTdUVUZIZUVrc1FVRkJUenRKUVVWaUxFRkJRVmNzUVVGQlN5eEJRVUZsTzAxQlEzcENMRUZCUVZNN1JVRkZaaXhCUVVGVk8wbEJRMDRzUVVGQlV6dEpRVU5VTEVGQlFWazdTVUZEV2l4QlFVRjNRanRGUVVVMVFpeEJRVUZqTzBsQlExWXNRVUZCVlRzN1FVRlRaRHM3UlVGRlJTeEJRVUZWTzBWQlExWXNRVUZCVXp0RlFVTlVMRUZCUVZFN1JVRkRVaXhCUVVGUE8wVkJRMUFzUVVGQlN6dEZRVU5NTEVGQlFVMDdSVUZEVGl4QlFVRlJPMFZCUTFJc1FVRkJXVHRGUVVOYUxFRkJRVk03UlVGRFZDeEJRVUZ4UWp0RlFVTnlRaXhCUVVGNVFqdEZRVVV6UWl4QlFVRlhPMGxCUTFBc1FVRkJVenRKUVVOVUxFRkJRVms3U1VGRFdpeEJRVUY1UWp0RlNteDFRak5DTzBsSmNYVkNSaXhCUVVGWE8wMUJRMHdzUVVGQlZ6dEpRVVZxUWl4QlFVRmhMRUZCUVZjN1RVRkRiRUlzUVVGQlZ6dEpRVVZxUWl4QlFVRlhMRUZCUVZjc1FVRkJiMElzUVVGQllTeEJRVUZYTEVGQlFWYzdUVUZGZGtVc1FVRkJWenM3T3pzN096dEJRVkZxUWl4QlFVRlBPMFZCUTB3c1FVRkJWVHRGUVVOV0xFRkJRVkU3UlVGRFVpeEJRVUZQTzBWQlExQXNRVUZCVlR0RlFVTldMRUZCUVZrN1JVRTVlRUpLTEVGQkszaENVanM3UVVGRlJpeEJRVUZQTzBWQlEwd3NRVUZCVlR0RlFVTldMRUZCUVVzN1JVRkRUQ3hCUVVGVE8wVkJRMVFzUVVGQldUczdRVXBxZDBKYU8wVkpiM2RDUml4QlFVRlBPMGxCUTBnc1FVRkJWVHRKUVhoNVFrVXNRVUY1ZVVKYU8wbEJRMEVzUVVGQlV6dEpRVU5VTEVGQlFVODdTVUZEVUN4QlFVRkxPMGxCUTB3c1FVRkJUenRKUVVOUUxFRkJRVk03UlVGRFlpeEJRVUZQTEVGQlFXTTdTVUZEYWtJc1FVRkJWVHM3UVVNeGVrSmtPMFZCUTBNc1FVRkJVenRGUVVOVUxFRkJRVms3UlV3eVExZzdTVXMzUTBZN1RVRkxSU3hCUVVGVE8wVkJSVmc3U1ZaS1dTeEJWVXRXTzBsQlEwRXNRVUZCVnp0SlZrTk9MRUZWUVV3N1NVRkRRU3hCUVVGbE8wbEJSV3BDTEVGQlFYRkNPMDFVU0ZZc1FWTkpVanROUVVOSUxFRkJRWEZDTEVGQlFVTTdVVlJtWkN4QlUyZENTanRGUVVWS08wbEJRMFVzUVVGQlZ6dEZRVVZpTzBsQlEwVXNRVUZCVXp0SlFVTlVMRUZCUVdkQ08wVkJSV3hDTzBsQlEwVXNRVUZCVXp0SlFVTlVMRUZCUVdkQ08wVkJSV3hDTzBsQlEwVXNRVUZCWXp0SlZEbENVaXhCVXl0Q1RqdEpRVU5CTEVGQlFWYzdTVUZEV0N4QlFVRmxPMGxCUTJZc1FVRkJVenRKUVVOVUxFRkJRVTg3UlVGSFZEdEpRVU5GTEVGQlFWYzdTVUZGWWl4QlFVRjFRanROVkM5Q1dpeEJVMmREVWp0TlFVTklMRUZCUVhWQ0xFRkJRVU03VVZRelEyaENMRUZUTkVOS08wbEJSVW9zUVVGQmRVSXNRVUZCUlR0TlZqTkRZaXhCVlRSRFZEdE5RVU5CTEVGQlFWYzdUVlowUTFBc1FWVjFRMG83VFVGRFFTeEJRVUZsT3p0QlEyeEViRUk3UlVGRFJTeEJRVUZyUWp0RlFVTnNRaXhCUVVGeFFqdEZRVU55UWl4QlFVRnBRanRGUVVOcVFpeEJRVUZSTzBWQlExSXNRVUZCVlR0RlRuZERWanRKVFRkRFJqdE5RVkZKTEVGQlFWRTdSVUZIV2p0SlFVTkpMRUZCUVZFN1NWWlNTaXhCVlZOS08wbEJRMEVzUVVGQllUdEpRVU5pTEVGQlFWYzdTVmhRVGl4QlYxRk1PMGxCUTBFc1FVRkJUVHRKUVVOT0xFRkJRV0U3U1VGRFlpeEJRVUZWTzBsQlExWXNRVUZCVVR0SlFVTlNMRUZCUVdFN1NVNTNRbVk3VFUxc1EwWTdVVUZoVFN4QlFVRlZPMUZCUTFZc1FVRkJWenRSUVVOWUxFRkJRVk03TzBGQlJXWTdSVlkxUWxFc1FWVTJRazQ3UlZaNlFrMHNRVlV3UWs0N1JVRkRRU3hCUVVGVE8wVkJRMVFzUVVGQlVUdEZRVVZXTEVGQlFXbENPMGxCUTJJc1FVRkJVenRGUVVWaU8wbEJRMGtzUVVGQlV6dEZRVVZpTzBsV2NFTlJMRUZWY1VOS08wVkJTVW83U1ZZelExRXNRVlUwUTBvN08wRkJVVW83UlVGRFJTeEJRVUZyUWp0RlFVTnNRaXhCUVVGeFFqdEZRVU55UWl4QlFVRnBRanRGUVVOcVFpeEJRVUZST3p0QlF6RkVWanRGUVVORkxFRkJRVk03UlVGRFZDeEJRVUZaTzBWQlExb3NRVUZCWlR0RlVEQkRaanRKVHpkRFJqdE5UbWxDU1N4QlFVRlhPMFZOVm1ZN1NVRkRTU3hCUVVGVE8wbEJRMVFzUVVGQlowSTdTVUZGYUVJc1FVRkJVenRKVUd0RFdEdE5UM1JEUmp0UlFVOU5MRUZCUVZNN1NWQXJRbUk3VFU4M1FrWXNRVUZCYVVJN1VVRkZWQ3hCUVVGaE8xRkJRMklzUVVGQlV6dEZRVVZxUWp0SlFVTkpMRUZCUVZrN1JVRkZhRUk3U1ZoNFFsRXNRVmQ1UWtvN1NVRkRRU3hCUVVGUk8wbEJRMUlzUVVGQlZUdEpRVU5XTEVGQlFXVTdSVUZGYmtJN1NVRkRTU3hCUVVGWk8wbEJRMW9zUVVGQlpUdEZRVVZ1UWl4QlFVRmhPMGxCUTFRc1FVRkJXVHRKUVVOYUxFRkJRVms3U1VGRmFFSXNRVUZCWVN4QlFVRkhPMDFCUTFZc1FVRkJVenROUVVOVUxFRkJRVk03VFVGRFZDeEJRVUZQTzBWQlIySTdTVmcxUTFFc1FWYzJRMG83U1VGRFFTeEJRVUZUTzBsYU1VTkpMRUZaTWtOaU8wbEJRMEVzUVVGQlV6dEpRVU5pTEVGQlFXdENPMDFZTjBKWExFRlhPRUoyUWpzN1FVRkhUanRGUVVORkxFRkJRV2RDTzBWUVZHaENPMGxQVVVZN1RVRkpTU3hCUVVGbE8wMUJRMllzUVVGQlpUdEZRVVZ1UWp0SlFVTkpMRUZCUVdkQ08wbFFhRUpzUWp0TlQyVkdPMUZCU1Uwc1FVRkJaVHRSUVVObUxFRkJRVms3U1ZCd1FtaENPMDFQYzBKR0xFRkJRV2xDTzFGQlJWUXNRVUZCVXp0UlFVTlVMRUZCUVU4N1JVRkZaanRKUVVOSkxFRkJRV003U1VGRFpDeEJRVUZoTzBsQlEySXNRVUZCWjBJN1NWQTVRbXhDTzAxUE1rSkdPMUZCVFUwc1FVRkJVenRGUVVWbU8wbFlhRVpSTEVGRWEwUk9PMGxCT1VObExFRkJLME5tTzBsQlEwRXNRVUZCVnp0SlFUVkRTaXhCUVRaRFVEdEpRVU5CTEVGQlFXRTdSVmsyUW1ZN1NWZ3pSVkVzUVZjMFJVbzdTVUZGU2l4QlFVRnZRanROUVVOa0xFRkJRVk03U1VGRFppeEJRVUZ2UWp0TldIaEdXaXhCVjNsR1JqdE5RVU5CTEVGQlFXRTdUVUZEYmtJc1FVRkJiMElzUVVGQlJUdFJRVU5rTEVGQlFVODdVVUZEVUN4QlFVRlRPMFZRYUVSbU8wbFBhMFJHTzAxQlIwMHNRVUZCV1R0RlFVVnNRaXhCUVVGblFpeEJRVUZKTzBsQlEyUXNRVUZCV1RzN1FVRk5iRUk3UlVGRFNTeEJRVUZaTzBWQlExb3NRVUZCVXp0RlduWkdXQ3hCUVVGaE8wVkJRMklzUVVGQlowSTdSVmw1Um14Q0xFRkJRVzFDTEVGQlFVazdTVUZEYWtJc1FVRkJXVHRCUVVWc1FpeEJRVUZqTzBWWWJraE9MRUZFYTBST08wVkJPVU5sTEVGQkswTm1PMFZCUTBFc1FVRkJWenRGUVRWRFNpeEJRVFpEVUR0RlFVTkJMRUZCUVdFN1FWbG5SV1lzUVVGQll6dEZRVU5XTEVGQlFVODdSVUZEVUN4QlFVRlhPenRCUVVsbU8wVkJRMFVzUVVGQlV6dEZRVU5VTEVGQlFXRTdPMEZCUjJZN1JVRkRSU3hCUVVGVE8wVkJRMVFzUVVGQldUdEZRVU5hTEVGQlFXVTdSVUZGYWtJN1NVRkRTU3hCUVVGVE8wbEJRMVFzUVVGQlowSTdTVkF6Um14Q08wMVBOa1pHTEVGQlFXdENPMUZCUlZZc1FVRkJZVHRKVUM5R2JrSTdUVTlwUjBZc1FVRkJhMEk3VVVGRlZpeEJRVUZoTzBWQlJYSkNPMGxCUTBrc1FVRkJVVHRKUVVOU0xFRkJRVlU3U1VGRFZpeEJRVUZsTzBWQlNXNUNPMGxZZWtwUkxFRkViMFZPTzBsQmFFVmxMRUZCYVVWbU8wbEJRMEVzUVVGQlZ6dEpRVGxFU2l4QlFTdEVVRHRKUVVOQkxFRkJRV0U3U1VONFJWQXNRVmN5U2tvN1NVRkRRU3hCUVVGVE8wbEJRMVFzUVVGQldUdEpRVVZvUWl4QlFVRXlRanROV0ROSlJTeEJWelJKZGtJN1JVRkZUanRKUVVOSkxFRkJRVms3TzBGRGJFdG9RanRGV2tOUkxFRlpRVTQ3UlVGRFFTeEJRVUZUTzBWQlExUXNRVUZCVHp0RlFVVlVPMGxCUTBrc1FVRkJVenRGUVVWaUxFRkJRV2xDTzBsQlEySXNRVUZCVXp0RlFVZGlPMGxCUTBrc1FVRkJVVHRKUVVOU0xFRkJRVk03U1ZJNFFsZzdUVkZvUTBZN1VVRkxUU3hCUVVGVE8wVkJSV1k3U1VGRFNTeEJRVUZUTzBsQlExUXNRVUZCVVR0SlVuVkNWanROVVhwQ1JqdFJRVXROTEVGQlFWRTdPMEZCUjJRN1JVRkRSU3hCUVVGVE8wVkJRMVFzUVVGQlV6dEZVbVZVTzBsUmFrSkdPMDFCUzBrc1FVRkJWenRGUVVWbU8wbEJRMGtzUVVGQlpUdEpVbE5xUWp0TlVWWkdPMUZCU1Uwc1FVRkJVenRGUVVsbU8wbEJRMGtzUVVGQlpUdEZRVWR1UWp0SlFVTkpMRUZCUVZFN1NVRkRVaXhCUVVGVk8wbFNTbG83VFZGRlJqdFJRVXROTEVGQlFWRTdVVUZEVWl4QlFVRlpPenRCUVVkc1FqdEZRVU5GTEVGQlFWTTdSVUZEVkN4QlFVRlpPMFZCU1dRN1NVRkRTU3hCUVVGVE8wbEJRMVFzUVVGQlpUdEpVbTVDYWtJN1RWRnBRa1k3VVVGTFRTeEJRVUZUT3p0QlFVMW1PMFZhZWtWUkxFRlpNRVZPTzBWYWRFVk5MRUZaZFVWT08wVmlja1JCTEVGQlFXRTdSVUZEWWl4QlFVRm5RanRGWVhWRWJFSTdTVm94UlZFc1FWa3lSVW83U1VGRFFTeEJRVUZaTzBWQlJXaENPMGxCUTBrc1FVRkJVenRKUVVOVUxFRkJRVkU3U1VGRFVpeEJRVUZQTzBWQlMxZzdTVUZEU1N4QlFVRlRPMGxCUTFRc1FVRkJUenRGUVVWWU8wbEJRMGtzUVVGQlVUdEpXak5HU2l4QldUUkdTanRKUVVOQkxFRkJRVmM3U1VGRFdDeEJRVUZoTzBsQlEySXNRVUZCVHp0SlFVTlFMRUZCUVZrN1NVRkZhRUlzUVVGQmMwSTdPMDFhYkVka0xFRlpiMGRHTzAxYWVFZEZMRUZaZVVkR08wbFNOVVJLTzAxUmFVUkdPMUZCWTAwc1FVRkJVVHRGUVVWa08wbEJRMGtzUVVGQlV6dEpRVU5VTEVGQlFXRTdSVUZGYWtJN1NVRkRTU3hCUVVGVE8wbEJRMVFzUVVGQllUdEpRVVZxUWp0TlFVTk5MRUZCUVZrN08wRkJSMnhDTzBWQlEwVXNRVUZCVXp0RlFVTlVMRUZCUVdkQ08wVlNMMFZvUWp0SlVUWkZSanROUVV0SkxFRkJRVk03UlVGVFlqdEpRVU5KTEVGQlFWYzdTV0oyU0dJc1FVRkJXVHRKUVVOYUxFRkJRV1U3UldFeVNHcENPMGxCUTBrc1FVRkJXVHM3UVVGRmFFSXNRVUZCZFVJc1FVRkJkVUlzUVVGQmNVSTdSVUZGYWtVc1FVRkJXVHM3UVVGSlpEdEZRVU5GTEVGQlFXTTdSVUZGYUVJc1FVRkJXVHRKV2pGS1NpeEJXVEpLU2p0SlFVVktMRUZCUVZrc1FVRkJTenROV25SS1RpeEJXWFZLVERzN1FVTTFTazQ3UlVGRFF5eEJRVUZuUWp0RlZEQkRaanRKVXpORFJqdE5RVWxGTEVGQlFWTTdPMEZCUjFnN1JVRkRReXhCUVVGWk8wVkJRMW9zUVVGQlV6dEZRVU5VTEVGQlFWTTdSVUZEVkN4QlFVRlBPMFZVWjBOT08wbFRjRU5HTzAxQlQwVXNRVUZCVXp0RlFVVllPMGxCUTBVc1FVRkJUenRKVkRCQ1VEdE5Vek5DUmp0UlFVbEhMRUZCUVZNN1VVRkZXaXhCUVVFMFFqdFZRVU40UWl4QlFVRlRPMVZCUTFRc1FVRkJUenRGUVVkWU8wbEJRMFVzUVVGQldUdEpWR1ZhTzAxVGFFSkdPMUZCU1Vjc1FVRkJXVHRKUVVWbUxFRkJRWFZDTzAxQlEzQkNMRUZCUVZNN1RVRkRWQ3hCUVVGWE8wMUJRMWdzUVVGQlpUdE5RVVZzUWl4QlFVRjFRaXhCUVVGTE8xRkJRM2hDTEVGQlFWTTdUVUZIWWl4QlFVRjFRaXhCUVVGTExFRkJRV0U3VVVGRGNFTXNRVUZCVXp0TlZFRmFPMUZUVmtZc1FVRkJkVUk3VlVGamJrSXNRVUZCVnp0SlFVdG1MRUZCUVhWQ0xFRkJRVmNzUVVGQlJ6dE5RVU01UWl4QlFVRlhPMDFVVm1oQ08xRlRVMFlzUVVGQmRVSXNRVUZCVnl4QlFVRkhPMVZCU1RWQ0xFRkJRVmM3TzBGQlJYQkNPMFZCUTBNc1FVRkJXVHRGUVVOYUxFRkJRVTg3UlVGRlVqdEpRVU5GTEVGQlFWRTdTVUZEVWl4QlFVRlRPMGxCUTFRc1FVRkJXVHRKUVVOYUxFRkJRVk03U1VGRFZDeEJRVUZSTzBWQlJWWXNRVUZCYlVJc1FVRkJTU3hCUVVGdFFpeEJRVUZITEVGQlFXMUNPMGxCUXpsRUxFRkJRVmM3U1VGRFdDeEJRVUZsTzBsVU5VSm1PMDFUTUVKR0xFRkJRVzFDTEVGQlFVa3NRVUZCYlVJc1FVRkJSeXhCUVVGdFFqdFJRVXMzUkN4QlFVRlhPMFZCUldRc1FVRkJiVUk3U1VGRmFrSXNRVUZCV1R0SlFVVmtMRUZCUVcxQ0xFRkJRVWM3VFVGRGJrSXNRVUZCVXp0TlFVTlVMRUZCUVZFN1RVRkRVaXhCUVVGVE96dFhRM0JHUkR0RlFVTllPMGxCUTBrc1FVRkJVenM3UlVGRFlqdEpRVU5KTEVGQlFWTTdPMEZCUldJN1JXUklVU3hCWTBsT08wVkJRMEVzUVVGQllUdEZRVU5pTEVGQlFXTTdSVUZEWkN4QlFVRlJPMFZCUTFJc1FVRkJWenM3UVVGRllpeEJRVUZyUWp0RlFVTm9RaXhCUVVGaE96dEJRVVZtTzBWa1lsRXNRV05qVGpzN1FVRkhSanRGUVVORkxFRkJRVk03UlVGRFZDeEJRVUZUTzBWQlExUXNRVUZCVHp0RlZuRkNVRHRKVlhoQ1JqdE5RVTFKTEVGQlFVODdSVlpyUWxRN1NWVjRRa1k3VFVGVFNTeEJRVUZUTzAxQlExUXNRVUZCVHpzN1FVRkZXQ3hCUVVGclFqdEZRVU5vUWl4QlFVRlJPMFZCUTFJc1FVRkJVenM3UVVGTFdDeEJRVUZKTEVGQlFVMHNRVUZCU1R0RlpIaERUaXhCWTNsRFNqdEJRVVZLTEVGQlFVY3NRVUZCVHl4QlFVRk5MRUZCUVVjc1FVRkJUenRGUVVWMFFpeEJRVUZUTzBWQlExUXNRVUZCV1R0RlFVTmFMRUZCUVdNN08wRkJSV3hDTzBWQlEwVXNRVUZCVXp0RlZreFVPMGxWU1VZN1RVRkpTU3hCUVVGVE96dEJRVVZpTzBWQlEwVXNRVUZCVXp0RlZsaFVPMGxWVlVZN1RVRkpTU3hCUVVGVE96dEJRWGRDWWl4QlFVRnJRaXhCUVVGaE8wVmtia1oyUWl4QlkyOUdTanRGUVVOQkxFRkJRVk03TzBGRGNFWk9MRUZCUVdkQ0xFRkJRVms3UlVGRGFrTXNRVUZCVXp0RlFVTlVMRUZCUVZNN08wRkJSVmc3UlVGRlJTeEJRVUZuUWp0RldITkRhRUk3U1Zkd1EwWTdUVUZIVFN4QlFVRlpPMFZCU1d4Q0xFRkJRWEZDTEVGQlFVazdTVUZEYmtJc1FVRkJXVHRGUVVWc1FpeEJRVUZ4UWp0SlptNUNZaXhCUkd0RVRqdEpRVGxEWlN4QlFTdERaanRKUVVOQkxFRkJRVmM3U1VFMVEwb3NRVUUyUTFBN1NVRkRRU3hCUVVGaE8wbEJhRU5pTEVGQlFXRTdTVUZEWWl4QlFVRm5RanRGWjBKQmJFSXNRVUZCY1VJN1NVRkRaaXhCUVVGak8wbEJRMlFzUVVGQldUdEpRVVZzUWl4QlFVRnhRaXhCUVVGSE8wMUJRMmhDTEVGQlFWazdSVUZGY0VJc1FVRkJjVUk3U1VGRFppeEJRVUZqTzBWQlJYQkNMRUZCUVhGQ08wbEJRMllzUVVGQlR6dEpRVU5RTEVGQlFWVTdPMEZCUjJoQ08wVkJRMFVzUVVGQlV6dEZRVU5VTEVGQlFWTTdPMEZCVFZnN1JVRkRSU3hCUVVGTk96dEJRVU5TTzBWQlEwVXNRVUZCVFRzN1FVRkhVanRGWm01RVlTeEJaVzlFV0R0RlFVTkdMRUZCUVdVN1NXWjBSRkFzUVdWMVJFbzdPMEZZVmtZN1JWZG5Ra1k3U1VGSFRTeEJRVUZaTzBGQlJXeENMRUZCUVdsQ0xFRkJRVWs3UlVGRFppeEJRVUZaTzBGQlJXeENMRUZCUVdsQ08wVm1ja1ZVTEVGRWEwUk9PMFZCT1VObExFRkJLME5tTzBWQlEwRXNRVUZCVnp0RlFUVkRTaXhCUVRaRFVEdEZRVU5CTEVGQlFXRTdRV2RDYTBKbUxFRkJRV2xDTzBWbWRrVktMRUZFZVVSWU8wVkJkRVJsTEVGQmRVUm1PMFZCUTBFc1FVRkJWenRGUVd4RVRpeEJRVzFFVER0RlFVTkJMRUZCUVdFN1JVRkRZaXhCUVVGblFqdEZRVGREYUVJc1FVRkJXVHRGUVVOYUxFRkJRV1U3UVdkQ2QwUnFRaXhCUVVGcFFqdEZabkJGVGl4QlpYRkZURHRGUVVOQkxFRkJRVmM3UlVGRFdDeEJRVUZaTzBGQlJXeENMRUZCUVdsQ08wVm1hRVpVTEVGRU5FVk9PMFZCZUVWbExFRkJlVVZtTzBWQlEwRXNRVUZCVnp0RlFVTllMRUZCUVZrN1JVRnlSVkFzUVVGelJVdzdSVUU1UkVFc1FVRkJXVHRGUVVOYUxFRkJRV1U3TzBGcFFtNUNha0k3UlVGRFJTeEJRVUZaTzBWQlJXUXNRVUZCWlN4QlFVRlBMRUZCUVdVc1FVRkJTeXhCUVVGblFpeEJRVUZsTEVGQlFVc3NRVUZCYVVJc1FVRkJaU3hCUVVGTExFRkJRVzFDTEVGQlFXVXNRVUZCU3l4QlFVRnBRaXhCUVVGbExFRkJRVXNzUVVGQll5eEJRVUZsTEVGQlFVc3NRVUZCWlN4QlFVRmxMRUZCUVVzc1FVRkJZeXhCUVVGbExFRkJRVXNzUVVGQlowSXNRVUZCWlN4QlFVRkxMRUZCUVdVc1FVRkJaU3hCUVVGTExFRkJRV1VzUVVGQlpTeEJRVUZMTEVGQlFXMUNMRUZCUVdVc1FVRkJTeXhCUVVGNVFpeEJRVUZsTEVGQlFVc3NRVUZCWjBJc1FVRkJaU3hCUVVGTExFRkJRV1VzUVVGQlpTeEJRVUZMTEVGQlFXVXNRVUZCWlR0SmFFSlBPV3BDTEVGblFsVlNPMGxCUTBFc1FVRkJVVHRKUVVGVkxFRkJRMHc3U1VGRFlpeEJRVUZsTzBsQlFVRXNRVUZEU0R0SlFVTmFMRUZCUVZNN1NVRkRWQ3hCUVVGVE8wbEJRMVFzUVVGQlR6dEZRVWRXTEVGQlFXVTdTVUZEV0N4QlFVRlRPMFZCUldJc1FVRkJaU3hCUVVGTExFRkJRV2xDTEVGQlFXVXNRVUZCU3l4QlFVRm5RaXhCUVVGbExFRkJRVXM3U1VGSGVrWXNRVUZCVXp0RlFVZGlPMGxCUTBrc1FVRkJVenRKUVVOVUxFRkJRVTg3U1VGRFVDeEJRVUZQTzBWQlJWZ3NRVUZCTWtJN1NVRkRka0lzUVVGQlV6dEpRVU5VTEVGQlFVODdTVUZEVUN4QlFVRlJPMFZCUjFvc1FVRkJaVHRKYUVJNVExQXNRV2RDSzBOS08wbEJRMEVzUVVGQlpUdEpRVU5tTEVGQlFWRTdTVUZEVWl4QlFVRlZPMGxCUTFZc1FVRkJVVHRGUVVkYUxFRkJRV1U3U1doQ2RFUlFMRUZuUW5WRVNqdEpRVU5CTEVGQlFWazdTVUZEV2l4QlFVRmxPMGxCUTJZc1FVRkJVVHRKYUVKd1JFUXNRV2RDY1VSUU8wbEJRMEVzUVVGQlVUdEpRVU5TTEVGQlFWTTdTVUZEVkN4QlFVRlhPMGxCUTFnc1FVRkJVVHRKUVVOU0xFRkJRVk03U1VGRFZDeEJRVUZWTzBsQlExWXNRVUZCVHpzN1FVRkZXRHRGYUVKMFJWRXNRV2RDZFVWT08wVkJRMEVzUVVGQlZUdEZRVU5XTEVGQlFVMGlMQ0ptYVd4bElqb2ljM1I1YkdVdVkzTnpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmk4dklFNXZjbTFoYkdsNlpTNXpZM056SUdKaGMyVmtJRzl1SUU1cFkyOXNZWE1nUjJGc2JHRm5hR1Z5SUdGdVpDQktiMjVoZEdoaGJpQk9aV0ZzSjNOY2JpOHZJRzV2Y20xaGJHbDZaUzVqYzNNZ2RqSXVNUzR6SUh3Z1RVbFVJRXhwWTJWdWMyVWdmQ0JuYVhRdWFXOHZibTl5YldGc2FYcGxYRzR2THlBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1WEc0dkx5QTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFZ4dUx5OGdUbTl5YldGc2FYcGxMbk5qYzNNZ2MyVjBkR2x1WjNOY2JpOHZJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNWNibHh1THk4Z1UyVjBJSFJ2SUhSeWRXVWdhV1lnZVc5MUlIZGhiblFnZEc4Z1lXUmtJSE4xY0hCdmNuUWdabTl5SUVsRk5pQmhibVFnU1VVM1hHNHZMeUJPYjNScFkyVTZJSE5sZEhScGJtY2dkRzhnZEhKMVpTQnRhV2RvZENCeVpXNWtaWElnYzI5dFpTQmxiR1Z0Wlc1MGMxeHVMeThnYzJ4cFoyaDBiSGtnWkdsbVptVnlaVzUwYkhrZ2RHaGhiaUIzYUdWdUlITmxkQ0IwYnlCbVlXeHpaVnh1Skd4bFoyRmplVjl6ZFhCd2IzSjBYMlp2Y2w5cFpUb2dabUZzYzJVZ0lXUmxabUYxYkhRN0lDOHZJRlZ6WldRZ1lXeHpieUJwYmlCRGIyMXdZWE56WEc1Y2JseHVMeThnVTJWMElIUm9aU0JrWldaaGRXeDBJR1p2Ym5RZ1ptRnRhV3g1SUdobGNtVWdjMjhnZVc5MUlHUnZiaWQwSUdoaGRtVWdkRzhnYjNabGNuSnBaR1VnYVhRZ2JHRjBaWEpjYmlSdWIzSnRZV3hwZW1Wa1gyWnZiblJmWm1GdGFXeDVPaUJ6WVc1ekxYTmxjbWxtSUNGa1pXWmhkV3gwTzF4dVhHNGtibTl5YldGc2FYcGxYMmhsWVdScGJtZHpPaUIwY25WbElDRmtaV1poZFd4ME8xeHVYRzRrYURGZlptOXVkRjl6YVhwbE9pQXlaVzBnSVdSbFptRjFiSFE3WEc0a2FESmZabTl1ZEY5emFYcGxPaUF4TGpWbGJTQWhaR1ZtWVhWc2REdGNiaVJvTTE5bWIyNTBYM05wZW1VNklERXVNVGRsYlNBaFpHVm1ZWFZzZER0Y2JpUm9ORjltYjI1MFgzTnBlbVU2SURGbGJTQWhaR1ZtWVhWc2REdGNiaVJvTlY5bWIyNTBYM05wZW1VNklEQXVPRE5sYlNBaFpHVm1ZWFZzZER0Y2JpUm9ObDltYjI1MFgzTnBlbVU2SURBdU56VmxiU0FoWkdWbVlYVnNkRHRjYmx4dUpHZ3hYMjFoY21kcGJqb2dNQzQyTjJWdElEQWdJV1JsWm1GMWJIUTdYRzRrYURKZmJXRnlaMmx1T2lBd0xqZ3paVzBnTUNBaFpHVm1ZWFZzZER0Y2JpUm9NMTl0WVhKbmFXNDZJREZsYlNBd0lDRmtaV1poZFd4ME8xeHVKR2cwWDIxaGNtZHBiam9nTVM0ek0yVnRJREFnSVdSbFptRjFiSFE3WEc0a2FEVmZiV0Z5WjJsdU9pQXhMalkzWlcwZ01DQWhaR1ZtWVhWc2REdGNiaVJvTmw5dFlYSm5hVzQ2SURJdU16TmxiU0F3SUNGa1pXWmhkV3gwTzF4dVhHNGtZbUZqYTJkeWIzVnVaRG9nSTJabVppQWhaR1ZtWVhWc2REdGNiaVJqYjJ4dmNqb2dJekF3TUNBaFpHVm1ZWFZzZER0Y2JseHVMeThnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNiaTh2SUVoVVRVdzFJR1JwYzNCc1lYa2daR1ZtYVc1cGRHbHZibk5jYmk4dklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc1Y2JpOHZJRU52Y25KbFkzUnpJR0pzYjJOcklHUnBjM0JzWVhrZ2JtOTBJR1JsWm1sdVpXUWdhVzRnU1VVMkx6Y3ZPQzg1SUNZZ1JrWXpYRzVjYm1GeWRHbGpiR1VzWEc1aGMybGtaU3hjYm1SbGRHRnBiSE1zWEc1bWFXZGpZWEIwYVc5dUxGeHVabWxuZFhKbExGeHVabTl2ZEdWeUxGeHVhR1ZoWkdWeUxGeHVhR2R5YjNWd0xGeHVibUYyTEZ4dWMyVmpkR2x2Yml4Y2JuTjFiVzFoY25rZ2UxeHVJQ0FnSUdScGMzQnNZWGs2SUdKc2IyTnJPMXh1ZlZ4dVhHNHZMeUJEYjNKeVpXTjBjeUJwYm14cGJtVXRZbXh2WTJzZ1pHbHpjR3hoZVNCdWIzUWdaR1ZtYVc1bFpDQnBiaUJKUlRZdk55ODRMemtnSmlCR1JqTmNibHh1WVhWa2FXOHNYRzVqWVc1MllYTXNYRzUyYVdSbGJ5QjdYRzRnSUNBZ1pHbHpjR3hoZVRvZ2FXNXNhVzVsTFdKc2IyTnJPMXh1SUNBZ0lFQnBaaUFrYkdWbllXTjVYM04xY0hCdmNuUmZabTl5WDJsbElIdGNiaUFnSUNBZ0lDQWdLbVJwYzNCc1lYazZJR2x1YkdsdVpUdGNiaUFnSUNBZ0lDQWdLbnB2YjIwNklERTdYRzRnSUNBZ2ZWeHVmVnh1WEc0dkx5QXhMaUJRY21WMlpXNTBjeUJ0YjJSbGNtNGdZbkp2ZDNObGNuTWdabkp2YlNCa2FYTndiR0Y1YVc1bklDZGhkV1JwYnljZ2QybDBhRzkxZENCamIyNTBjbTlzYzF4dUx5OGdNaTRnVW1WdGIzWmxJR1Y0WTJWemN5Qm9aV2xuYUhRZ2FXNGdhVTlUTlNCa1pYWnBZMlZ6WEc1Y2JtRjFaR2x2T201dmRDaGJZMjl1ZEhKdmJITmRLU0I3WEc0Z0lDQWdaR2x6Y0d4aGVUb2dibTl1WlRzZ0x5OGdNVnh1SUNBZ0lHaGxhV2RvZERvZ01Ec2dMeThnTWx4dWZWeHVYRzR2TDF4dUx5OGdRV1JrY21WemN5QmdXMmhwWkdSbGJsMWdJSE4wZVd4cGJtY2dibTkwSUhCeVpYTmxiblFnYVc0Z1NVVWdPQzg1TGx4dUx5OGdTR2xrWlNCMGFHVWdZSFJsYlhCc1lYUmxZQ0JsYkdWdFpXNTBJR2x1SUVsRkxDQlRZV1poY21rc0lHRnVaQ0JHYVhKbFptOTRJRHdnTWpJdVhHNHZMMXh1WEc1YmFHbGtaR1Z1WFN3Z2RHVnRjR3hoZEdVZ2UxeHVJQ0FnSUdScGMzQnNZWGs2SUc1dmJtVTdYRzU5WEc1Y2JpOHZJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNHZMeUJDWVhObFhHNHZMeUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVYRzR2THlBeExpQkRiM0p5WldOMGN5QjBaWGgwSUhKbGMybDZhVzVuSUc5a1pHeDVJR2x1SUVsRk5pODNJSGRvWlc0Z1ltOWtlU0JtYjI1MExYTnBlbVVnYVhNZ2MyVjBJSFZ6YVc1bklHVnRJSFZ1YVhSelhHNHZMeUFnSUNCb2RIUndPaTh2WTJ4aFoyNTFkQzVqYjIwdllteHZaeTh6TkRndkkyTTNPVEJjYmk4dklESXVJRkJ5WlhabGJuUnpJR2xQVXlCMFpYaDBJSE5wZW1VZ1lXUnFkWE4wSUdGbWRHVnlJRzl5YVdWdWRHRjBhVzl1SUdOb1lXNW5aU3dnZDJsMGFHOTFkQ0JrYVhOaFlteHBibWNnZFhObGNpQjZiMjl0WEc0dkx5QWdJQ0IzZDNjdU5EVTJZbVZ5WldGemRISmxaWFF1WTI5dEwyRnlZMmhwZG1Vdk1qQXhNREV5TDJOdmJuUnliMnhzYVc1blgzUmxlSFJmYzJsNlpWOXBibDl6WVdaaGNtbGZabTl5WDJsdmMxOTNhWFJvYjNWMFgyUnBjMkZpYkdsdVoxOTFjMlZ5WDNwdmIyMHZYRzVjYm1oMGJXd2dlMXh1SUNBZ0lFQnBaaUFrYkdWbllXTjVYM04xY0hCdmNuUmZabTl5WDJsbElIdGNiaUFnSUNBZ0lDQWdabTl1ZEMxemFYcGxPaUF4TURBbE95QXZMeUF4WEc0Z0lDQWdmVnh1WEhSY2RDOHZZbUZqYTJkeWIzVnVaRG9nSkdKaFkydG5jbTkxYm1RN1hHNWNkRngwTHk5amIyeHZjam9nSkdOdmJHOXlPMXh1SUNBZ0lDMTNaV0pyYVhRdGRHVjRkQzF6YVhwbExXRmthblZ6ZERvZ01UQXdKVHNnTHk4Z01seHVJQ0FnSUMxdGN5MTBaWGgwTFhOcGVtVXRZV1JxZFhOME9pQXhNREFsT3lBdkx5QXlYRzU5WEc1Y2JpOHZJRUZrWkhKbGMzTmxjeUJtYjI1MExXWmhiV2xzZVNCcGJtTnZibk5wYzNSbGJtTjVJR0psZEhkbFpXNGdKM1JsZUhSaGNtVmhKeUJoYm1RZ2IzUm9aWElnWm05eWJTQmxiR1Z0Wlc1MGN5NWNibHh1YUhSdGJDeGNibUoxZEhSdmJpeGNibWx1Y0hWMExGeHVjMlZzWldOMExGeHVkR1Y0ZEdGeVpXRWdlMXh1SUNBZ0lDOHZabTl1ZEMxbVlXMXBiSGs2SUNSdWIzSnRZV3hwZW1Wa1gyWnZiblJmWm1GdGFXeDVPMXh1ZlZ4dVhHNHZMeUJCWkdSeVpYTnpaWE1nYldGeVoybHVjeUJvWVc1a2JHVmtJR2x1WTI5eWNtVmpkR3g1SUdsdUlFbEZOaTgzWEc1Y2JtSnZaSGtnZTF4dUlDQWdJRzFoY21kcGJqb2dNRHRjYm4xY2JseHVMeThnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNiaTh2SUV4cGJtdHpYRzR2THlBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1WEc0dkx5QXhMaUJTWlcxdmRtVWdkR2hsSUdkeVlYa2dZbUZqYTJkeWIzVnVaQ0JqYjJ4dmNpQm1jbTl0SUdGamRHbDJaU0JzYVc1cmN5QnBiaUJKUlNBeE1DNWNiaTh2SURJdUlFRmtaSEpsYzNObGN5QnZkWFJzYVc1bElHUnBjM0JzWVhsbFpDQnZaR1JzZVNCcGJpQkRhSEp2YldWY2JpOHZJRE11SUVsdGNISnZkbVZ6SUhKbFlXUmhZbWxzYVhSNUlIZG9aVzRnWm05amRYTmxaQ0JoYm1RZ1lXeHpieUJ0YjNWelpTQm9iM1psY21Wa0lHbHVJR0ZzYkNCaWNtOTNjMlZ5YzF4dUx5OGdJQ0FnY0dWdmNHeGxMbTl3WlhKaExtTnZiUzl3WVhSeWFXTnJiQzlsZUhCbGNtbHRaVzUwY3k5clpYbGliMkZ5WkM5MFpYTjBYRzVjYm1FZ2UxeHVJQ0FnSUM4dklERmNibHh1SUNBZ0lHSmhZMnRuY205MWJtUTZJSFJ5WVc1emNHRnlaVzUwTzF4dVhHNGdJQ0FnTHk4Z01seHVYRzRnSUNBZ0pqcG1iMk4xY3lCN1hHNGdJQ0FnSUNBZ0lDOHZiM1YwYkdsdVpUb2dkR2hwYmlCa2IzUjBaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnTTF4dVhHNGdJQ0FnSmpwb2IzWmxjaXhjYmlBZ0lDQW1PbUZqZEdsMlpTQjdYRzRnSUNBZ0lDQWdJRzkxZEd4cGJtVTZJREE3WEc0Z0lDQWdmVnh1ZlZ4dVhHNHZMeUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVMeThnVkhsd2IyZHlZWEJvZVZ4dUx5OGdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQxY2JseHVMeThnUVdSa2NtVnpjMlZ6SUdadmJuUWdjMmw2WlhNZ1lXNWtJRzFoY21kcGJuTWdjMlYwSUdScFptWmxjbVZ1ZEd4NUlHbHVJRWxGTmk4M1hHNHZMeUJCWkdSeVpYTnpaWE1nWm05dWRDQnphWHBsY3lCM2FYUm9hVzRnSjNObFkzUnBiMjRuSUdGdVpDQW5ZWEowYVdOc1pTY2dhVzRnUmtZMEt5d2dRMmh5YjIxbExDQlROVnh1WEc0dktpQkFhV1lnWEZ3a2JtOXliV0ZzYVhwbFgyaGxZV1JwYm1keklEMDlJSFJ5ZFdVZ2UxeHVJQ0FnSUdneElIdGNiaUFnSUNBZ0lDQWdabTl1ZEMxemFYcGxPaUJjWENSb01WOW1iMjUwWDNOcGVtVTdYRzRnSUNBZ0lDQWdJRzFoY21kcGJqb2dYRndrYURGZmJXRnlaMmx1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2d5SUh0Y2JpQWdJQ0FnSUNBZ1ptOXVkQzF6YVhwbE9pQmNYQ1JvTWw5bWIyNTBYM05wZW1VN1hHNGdJQ0FnSUNBZ0lHMWhjbWRwYmpvZ1hGd2thREpmYldGeVoybHVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHZ3pJSHRjYmlBZ0lDQWdJQ0FnWm05dWRDMXphWHBsT2lCY1hDUm9NMTltYjI1MFgzTnBlbVU3WEc0Z0lDQWdJQ0FnSUcxaGNtZHBiam9nWEZ3a2FETmZiV0Z5WjJsdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdnMElIdGNiaUFnSUNBZ0lDQWdabTl1ZEMxemFYcGxPaUJjWENSb05GOW1iMjUwWDNOcGVtVTdYRzRnSUNBZ0lDQWdJRzFoY21kcGJqb2dYRndrYURSZmJXRnlaMmx1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2cxSUh0Y2JpQWdJQ0FnSUNBZ1ptOXVkQzF6YVhwbE9pQmNYQ1JvTlY5bWIyNTBYM05wZW1VN1hHNGdJQ0FnSUNBZ0lHMWhjbWRwYmpvZ1hGd2thRFZmYldGeVoybHVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHZzJJSHRjYmlBZ0lDQWdJQ0FnWm05dWRDMXphWHBsT2lCY1hDUm9ObDltYjI1MFgzTnBlbVU3WEc0Z0lDQWdJQ0FnSUcxaGNtZHBiam9nWEZ3a2FEWmZiV0Z5WjJsdU8xeHVJQ0FnSUgxY2JuMGdLaTljYmx4dUx5OGdRV1JrY21WemMyVnpJSE4wZVd4cGJtY2dibTkwSUhCeVpYTmxiblFnYVc0Z1NVVWdPQzg1TENCVE5Td2dRMmh5YjIxbFhHNWNibUZpWW5KYmRHbDBiR1ZkSUh0Y2JpQWdJQ0JpYjNKa1pYSXRZbTkwZEc5dE9pQXhjSGdnWkc5MGRHVmtPMXh1ZlZ4dVhHNHZMeUJCWkdSeVpYTnpaWE1nYzNSNWJHVWdjMlYwSUhSdklDZGliMnhrWlhJbklHbHVJRVpHTXlzc0lGTTBMelVzSUVOb2NtOXRaVnh1WEc1aUxGeHVjM1J5YjI1bklIdGNiaUFnSUNCbWIyNTBMWGRsYVdkb2REb2dZbTlzWkR0Y2JuMWNibHh1UUdsbUlDUnNaV2RoWTNsZmMzVndjRzl5ZEY5bWIzSmZhV1VnZTF4dUlDQWdJR0pzYjJOcmNYVnZkR1VnZTF4dUlDQWdJQ0FnSUNCdFlYSm5hVzQ2SURGbGJTQTBNSEI0TzF4dUlDQWdJSDFjYm4xY2JseHVMeThnUVdSa2NtVnpjMlZ6SUhOMGVXeHBibWNnYm05MElIQnlaWE5sYm5RZ2FXNGdVelVzSUVOb2NtOXRaVnh1WEc1a1ptNGdlMXh1SUNBZ0lHWnZiblF0YzNSNWJHVTZJR2wwWVd4cFl6dGNibjFjYmx4dUx5OGdRV1JrY21WemMyVnpJSE4wZVd4cGJtY2dibTkwSUhCeVpYTmxiblFnYVc0Z1NVVTJMemN2T0M4NVhHNWNibTFoY21zZ2UxeHVJQ0FnSUdKaFkydG5jbTkxYm1RNklDTm1aakE3WEc0Z0lDQWdZMjlzYjNJNklDTXdNREE3WEc1OVhHNWNiaTh2SUVGa1pISmxjM05sY3lCdFlYSm5hVzV6SUhObGRDQmthV1ptWlhKbGJuUnNlU0JwYmlCSlJUWXZOMXh1UUdsbUlDUnNaV2RoWTNsZmMzVndjRzl5ZEY5bWIzSmZhV1VnZTF4dUlDQWdJSEFzWEc0Z0lDQWdjSEpsSUh0Y2JpQWdJQ0FnSUNBZ2JXRnlaMmx1T2lBeFpXMGdNRHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHZJRU52Y25KbFkzUnpJR1p2Ym5RZ1ptRnRhV3g1SUhObGRDQnZaR1JzZVNCcGJpQkpSVFlzSUZNMEx6VXNJRU5vY205dFpWeHVMeThnWlc0dWQybHJhWEJsWkdsaExtOXlaeTkzYVd0cEwxVnpaWEk2UkdGMmFXUm5iM1JvWW1WeVp5OVVaWE4wTlRsY2JseHVZMjlrWlN4Y2JtdGlaQ3hjYm5CeVpTeGNibk5oYlhBZ2UxeHVJQ0FnSUdadmJuUXRabUZ0YVd4NU9pQnRiMjV2YzNCaFkyVXNJSE5sY21sbU8xeHVJQ0FnSUVCcFppQWtiR1ZuWVdONVgzTjFjSEJ2Y25SZlptOXlYMmxsSUh0Y2JpQWdJQ0FnSUNBZ1gyWnZiblF0Wm1GdGFXeDVPaUFuWTI5MWNtbGxjaUJ1WlhjbkxDQnRiMjV2YzNCaFkyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdadmJuUXRjMmw2WlRvZ01XVnRPMXh1ZlZ4dVhHNHZMeUJKYlhCeWIzWmxjeUJ5WldGa1lXSnBiR2wwZVNCdlppQndjbVV0Wm05eWJXRjBkR1ZrSUhSbGVIUWdhVzRnWVd4c0lHSnliM2R6WlhKelhHNWNibkJ5WlNCN1hHNGdJQ0FnZDJocGRHVXRjM0JoWTJVNklIQnlaVHRjYmlBZ0lDQjNhR2wwWlMxemNHRmpaVG9nY0hKbExYZHlZWEE3WEc0Z0lDQWdkMjl5WkMxM2NtRndPaUJpY21WaGF5MTNiM0prTzF4dWZWeHVYRzR2THlCVFpYUWdZMjl1YzJsemRHVnVkQ0J4ZFc5MFpTQjBlWEJsY3k1Y2JseHVjU0I3WEc0Z0lDQWdjWFZ2ZEdWek9pQmNJbHhjTWpBeFExd2lJRndpWEZ3eU1ERkVYQ0lnWENKY1hESXdNVGhjSWlCY0lseGNNakF4T1Z3aU8xeHVmVnh1WEc0dkx5QXhMaUJCWkdSeVpYTnpaWE1nUTFOVElIRjFiM1JsY3lCdWIzUWdjM1Z3Y0c5eWRHVmtJR2x1SUVsRk5pODNYRzR2THlBeUxpQkJaR1J5WlhOelpYTWdjWFZ2ZEdVZ2NISnZjR1Z5ZEhrZ2JtOTBJSE4xY0hCdmNuUmxaQ0JwYmlCVE5GeHVYRzR2THlBeFhHNUFhV1lnSkd4bFoyRmplVjl6ZFhCd2IzSjBYMlp2Y2w5cFpTQjdYRzRnSUNBZ2NTQjdYRzRnSUNBZ0lDQWdJSEYxYjNSbGN6b2dibTl1WlR0Y2JpQWdJQ0I5WEc1OVhHNWNiaTh2SURKY2JuRWdlMXh1SUNBZ0lDWTZZbVZtYjNKbExGeHVJQ0FnSUNZNllXWjBaWElnZTF4dUlDQWdJQ0FnSUNCamIyNTBaVzUwT2lBbkp6dGNiaUFnSUNBZ0lDQWdZMjl1ZEdWdWREb2dibTl1WlR0Y2JpQWdJQ0I5WEc1OVhHNWNiaTh2SUVGa1pISmxjM01nYVc1amIyNXphWE4wWlc1MElHRnVaQ0IyWVhKcFlXSnNaU0JtYjI1MElITnBlbVVnYVc0Z1lXeHNJR0p5YjNkelpYSnpMbHh1WEc0dktpQXZjMjFoYkd3Z2UxeHVJQ0FnSUdadmJuUXRjMmw2WlRvZ09EQWxPMXh1ZlNBcUwxeHVYRzR2THlCUWNtVjJaVzUwY3lCemRXSWdZVzVrSUhOMWNDQmhabVpsWTNScGJtY2diR2x1WlMxb1pXbG5hSFFnYVc0Z1lXeHNJR0p5YjNkelpYSnpYRzR2THlCbmFYTjBMbWRwZEdoMVlpNWpiMjB2TkRFek9UTXdYRzVjYm5OMVlpeGNibk4xY0NCN1hHNGdJQ0FnWm05dWRDMXphWHBsT2lBM05TVTdYRzRnSUNBZ2JHbHVaUzFvWldsbmFIUTZJREE3WEc0Z0lDQWdjRzl6YVhScGIyNDZJSEpsYkdGMGFYWmxPMXh1SUNBZ0lIWmxjblJwWTJGc0xXRnNhV2R1T2lCaVlYTmxiR2x1WlR0Y2JuMWNibHh1YzNWd0lIdGNiaUFnSUNCMGIzQTZJQzB3TGpWbGJUdGNibjFjYmx4dWMzVmlJSHRjYmlBZ0lDQmliM1IwYjIwNklDMHdMakkxWlcwN1hHNTlYRzVjYmk4dklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc0dkx5Qk1hWE4wYzF4dUx5OGdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQxY2JseHVMeThnUVdSa2NtVnpjMlZ6SUcxaGNtZHBibk1nYzJWMElHUnBabVpsY21WdWRHeDVJR2x1SUVsRk5pODNYRzVBYVdZZ0pHeGxaMkZqZVY5emRYQndiM0owWDJadmNsOXBaU0I3WEc0Z0lDQWdaR3dzWEc0Z0lDQWdiV1Z1ZFN4Y2JpQWdJQ0J2YkN4Y2JpQWdJQ0IxYkNCN1hHNGdJQ0FnSUNBZ0lDOHZiV0Z5WjJsdU9pQXhaVzBnTUR0Y2JpQWdJQ0I5WEc1OVhHNWNia0JwWmlBa2JHVm5ZV041WDNOMWNIQnZjblJmWm05eVgybGxJSHRjYmlBZ0lDQmtaQ0I3WEc0Z0lDQWdJQ0FnSUcxaGNtZHBiam9nTUNBd0lEQWdOREJ3ZUR0Y2JpQWdJQ0I5WEc1OVhHNWNiaTh2SUVGa1pISmxjM05sY3lCd1lXUmthVzVuY3lCelpYUWdaR2xtWm1WeVpXNTBiSGtnYVc0Z1NVVTJMemRjYmtCcFppQWtiR1ZuWVdONVgzTjFjSEJ2Y25SZlptOXlYMmxsSUh0Y2JpQWdJQ0J0Wlc1MUxGeHVJQ0FnSUc5c0xGeHVJQ0FnSUhWc0lIdGNiaUFnSUNBZ0lDQWdMeTl3WVdSa2FXNW5PaUF3SURBZ01DQTBNSEI0TzF4dUlDQWdJSDFjYm4xY2JseHVMeThnUTI5eWNtVmpkSE1nYkdsemRDQnBiV0ZuWlhNZ2FHRnVaR3hsWkNCcGJtTnZjbkpsWTNSc2VTQnBiaUJKUlRkY2JseHVibUYySUh0Y2JpQWdJQ0IxYkN4Y2JpQWdJQ0J2YkNCN1hHNGdJQ0FnSUNBZ0lFQnBaaUFrYkdWbllXTjVYM04xY0hCdmNuUmZabTl5WDJsbElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dmJHbHpkQzF6ZEhsc1pTMXBiV0ZuWlRvZ2JtOXVaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JseHVMeThnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNiaTh2SUVWdFltVmtaR1ZrSUdOdmJuUmxiblJjYmk4dklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc1Y2JpOHZJREV1SUZKbGJXOTJaWE1nWW05eVpHVnlJSGRvWlc0Z2FXNXphV1JsSUNkaEp5QmxiR1Z0Wlc1MElHbHVJRWxGTmk4M0x6Z3ZPU3dnUmtZelhHNHZMeUF5TGlCSmJYQnliM1psY3lCcGJXRm5aU0J4ZFdGc2FYUjVJSGRvWlc0Z2MyTmhiR1ZrSUdsdUlFbEZOMXh1THk4Z0lDQWdZMjlrWlM1bWJHbGphM0l1WTI5dEwySnNiMmN2TWpBd09DOHhNUzh4TWk5dmJpMTFhUzF4ZFdGc2FYUjVMWFJvWlMxc2FYUjBiR1V0ZEdocGJtZHpMV05zYVdWdWRDMXphV1JsTFdsdFlXZGxMWEpsYzJsNmFXNW5MMXh1WEc1cGJXY2dlMXh1SUNBZ0lHSnZjbVJsY2pvZ01Ec2dMeThnTVZ4dUlDQWdJRUJwWmlBa2JHVm5ZV041WDNOMWNIQnZjblJmWm05eVgybGxJSHRjYmlBZ0lDQWdJQ0FnTFcxekxXbHVkR1Z5Y0c5c1lYUnBiMjR0Ylc5a1pUb2dZbWxqZFdKcFl6c2dMeThnTWx4dUlDQWdJSDFjYm4xY2JseHVMeThnUTI5eWNtVmpkSE1nYjNabGNtWnNiM2NnWkdsemNHeGhlV1ZrSUc5a1pHeDVJR2x1SUVsRk9WeHVYRzV6ZG1jNmJtOTBLRHB5YjI5MEtTQjdYRzRnSUNBZ2IzWmxjbVpzYjNjNklHaHBaR1JsYmp0Y2JuMWNibHh1THk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmk4dklFWnBaM1Z5WlhOY2JpOHZJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNWNiaTh2SUVGa1pISmxjM05sY3lCdFlYSm5hVzRnYm05MElIQnlaWE5sYm5RZ2FXNGdTVVUyTHpjdk9DODVMQ0JUTlN3Z1R6RXhYRzVjYm1acFozVnlaU0I3WEc0Z0lDQWdiV0Z5WjJsdU9pQXdPMXh1ZlZ4dVhHNHZMeUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVMeThnUm05eWJYTmNiaTh2SUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzVjYmk4dklFTnZjbkpsWTNSeklHMWhjbWRwYmlCa2FYTndiR0Y1WldRZ2IyUmtiSGtnYVc0Z1NVVTJMemRjYmtCcFppQWtiR1ZuWVdONVgzTjFjSEJ2Y25SZlptOXlYMmxsSUh0Y2JpQWdJQ0JtYjNKdElIdGNiaUFnSUNBZ0lDQWdiV0Z5WjJsdU9pQXdPMXh1SUNBZ0lIMWNibjFjYmx4dUx5OGdSR1ZtYVc1bElHTnZibk5wYzNSbGJuUWdZbTl5WkdWeUxDQnRZWEpuYVc0c0lHRnVaQ0J3WVdSa2FXNW5YRzVjYm1acFpXeGtjMlYwSUh0Y2JpQWdJQ0JpYjNKa1pYSTZJREZ3ZUNCemIyeHBaQ0FqWXpCak1HTXdPMXh1SUNBZ0lHMWhjbWRwYmpvZ01DQXljSGc3WEc0Z0lDQWdjR0ZrWkdsdVp6b2dNQzR6TldWdElEQXVOakkxWlcwZ01DNDNOV1Z0TzF4dWZWeHVYRzR2THlBeExpQkRiM0p5WldOMGN5QmpiMnh2Y2lCdWIzUWdZbVZwYm1jZ2FXNW9aWEpwZEdWa0lHbHVJRWxGTmk4M0x6Z3ZPVnh1THk4Z01pNGdVbVZ0YjNabElIQmhaR1JwYm1jZ2MyOGdjR1Z2Y0d4bElHRnlaVzRuZENCallYVm5hSFFnYjNWMElHbG1JSFJvWlhrZ2VtVnlieUJ2ZFhRZ1ptbGxiR1J6WlhSekxseHVMeThnTXk0Z1EyOXljbVZqZEhNZ2RHVjRkQ0J1YjNRZ2QzSmhjSEJwYm1jZ2FXNGdSa1l6WEc0dkx5QTBMaUJEYjNKeVpXTjBjeUJoYkdsbmJtMWxiblFnWkdsemNHeGhlV1ZrSUc5a1pHeDVJR2x1SUVsRk5pODNYRzVjYm14bFoyVnVaQ0I3WEc0Z0lDQWdZbTl5WkdWeU9pQXdPeUF2THlBeFhHNGdJQ0FnY0dGa1pHbHVaem9nTURzZ0x5OGdNbHh1SUNBZ0lIZG9hWFJsTFhOd1lXTmxPaUJ1YjNKdFlXdzdJQzh2SUROY2JpQWdJQ0JBYVdZZ0pHeGxaMkZqZVY5emRYQndiM0owWDJadmNsOXBaU0I3WEc0Z0lDQWdJQ0FnSUNwdFlYSm5hVzR0YkdWbWREb2dMVGR3ZURzZ0x5OGdORnh1SUNBZ0lIMWNibjFjYmx4dUx5OGdNUzRnUTI5eWNtVmpkQ0JtYjI1MElHWmhiV2xzZVNCdWIzUWdZbVZwYm1jZ2FXNW9aWEpwZEdWa0lHbHVJR0ZzYkNCaWNtOTNjMlZ5Y3k1Y2JpOHZJREl1SUVOdmNuSmxZM1J6SUdadmJuUWdjMmw2WlNCdWIzUWdZbVZwYm1jZ2FXNW9aWEpwZEdWa0lHbHVJR0ZzYkNCaWNtOTNjMlZ5YzF4dUx5OGdNeTRnUVdSa2NtVnpjMlZ6SUcxaGNtZHBibk1nYzJWMElHUnBabVpsY21WdWRHeDVJR2x1SUVsRk5pODNMQ0JHUmpNckxDQlROU3dnUTJoeWIyMWxYRzR2THlBMExpQkpiWEJ5YjNabGN5QmhjSEJsWVhKaGJtTmxJR0Z1WkNCamIyNXphWE4wWlc1amVTQnBiaUJoYkd3Z1luSnZkM05sY25OY2JseHVZblYwZEc5dUxGeHVhVzV3ZFhRc1hHNXpaV3hsWTNRc1hHNTBaWGgwWVhKbFlTQjdYRzRnSUNBZ1ptOXVkQzFtWVcxcGJIazZJR2x1YUdWeWFYUTdJQzh2SURGY2JpQWdJQ0JtYjI1MExYTnBlbVU2SURFd01DVTdJQzh2SURKY2JpQWdJQ0J0WVhKbmFXNDZJREE3SUM4dklETmNiaUFnSUNCMlpYSjBhV05oYkMxaGJHbG5iam9nWW1GelpXeHBibVU3SUM4dklEUmNiaUFnSUNCQWFXWWdKR3hsWjJGamVWOXpkWEJ3YjNKMFgyWnZjbDlwWlNCN1hHNGdJQ0FnSUNBZ0lDcDJaWEowYVdOaGJDMWhiR2xuYmpvZ2JXbGtaR3hsT3lBdkx5QTBYRzRnSUNBZ2ZWeHVmVnh1WEc0dkx5QkJaR1J5WlhOelpYTWdSa1l6THpRZ2MyVjBkR2x1WnlCc2FXNWxMV2hsYVdkb2RDQnZiaUFuYVc1d2RYUW5JSFZ6YVc1bklDRnBiWEJ2Y25SaGJuUWdhVzRnZEdobElGVkJJSE4wZVd4bGMyaGxaWFJjYmx4dVluVjBkRzl1TENCcGJuQjFkQ0I3WEc0Z0lDQWdiR2x1WlMxb1pXbG5hSFE2SUc1dmNtMWhiRHRjYm4xY2JseHVMeThnUVdSa2NtVnpjeUJwYm1OdmJuTnBjM1JsYm5RZ1lIUmxlSFF0ZEhKaGJuTm1iM0p0WUNCcGJtaGxjbWwwWVc1alpTQm1iM0lnWUdKMWRIUnZibUFnWVc1a0lHQnpaV3hsWTNSZ0xseHVMeThnUVd4c0lHOTBhR1Z5SUdadmNtMGdZMjl1ZEhKdmJDQmxiR1Z0Wlc1MGN5QmtieUJ1YjNRZ2FXNW9aWEpwZENCZ2RHVjRkQzEwY21GdWMyWnZjbTFnSUhaaGJIVmxjeTVjYmk4dklFTnZjbkpsWTNRZ1lHSjFkSFJ2Ym1BZ2MzUjViR1VnYVc1b1pYSnBkR0Z1WTJVZ2FXNGdRMmh5YjIxbExDQlRZV1poY21rZ05Tc3NJR0Z1WkNCSlJTQTRLeTVjYmk4dklFTnZjbkpsWTNRZ1lITmxiR1ZqZEdBZ2MzUjViR1VnYVc1b1pYSnBkR0Z1WTJVZ2FXNGdSbWx5WldadmVDQTBLeUJoYm1RZ1QzQmxjbUV1WEc1Y2JtSjFkSFJ2Yml4Y2JuTmxiR1ZqZENCN1hHNGdJQ0FnZEdWNGRDMTBjbUZ1YzJadmNtMDZJRzV2Ym1VN1hHNTlYRzVjYmk4dklERXVJRUYyYjJsa0lIUm9aU0JYWldKTGFYUWdZblZuSUdsdUlFRnVaSEp2YVdRZ05DNHdMaW9nZDJobGNtVWdLRElwSUdSbGMzUnliM2x6SUc1aGRHbDJaU0JnWVhWa2FXOWdYRzR2THlBZ0lDQmhibVFnWUhacFpHVnZZQ0JqYjI1MGNtOXNjMXh1THk4Z01pNGdRMjl5Y21WamRITWdhVzVoWW1sc2FYUjVJSFJ2SUhOMGVXeGxJR05zYVdOcllXSnNaU0FuYVc1d2RYUW5JSFI1Y0dWeklHbHVJR2xQVTF4dUx5OGdNeTRnU1cxd2NtOTJaWE1nZFhOaFltbHNhWFI1SUdGdVpDQmpiMjV6YVhOMFpXNWplU0J2WmlCamRYSnpiM0lnYzNSNWJHVWdZbVYwZDJWbGJpQnBiV0ZuWlMxMGVYQmxYRzR2THlBZ0lDQW5hVzV3ZFhRbklHRnVaQ0J2ZEdobGNuTmNiaTh2SURRdUlGSmxiVzkyWlhNZ2FXNXVaWElnYzNCaFkybHVaeUJwYmlCSlJUY2dkMmwwYUc5MWRDQmhabVpsWTNScGJtY2dibTl5YldGc0lIUmxlSFFnYVc1d2RYUnpYRzR2THlBZ0lDQkxibTkzYmlCcGMzTjFaVG9nYVc1dVpYSWdjM0JoWTJsdVp5QnlaVzFoYVc1eklHbHVJRWxGTmx4dVhHNWlkWFIwYjI0c1hHNW9kRzFzSUdsdWNIVjBXM1I1Y0dVOVhDSmlkWFIwYjI1Y0lsMHNJQzh2SURGY2JtbHVjSFYwVzNSNWNHVTlYQ0p5WlhObGRGd2lYU3hjYm1sdWNIVjBXM1I1Y0dVOVhDSnpkV0p0YVhSY0lsMGdlMXh1SUNBZ0lDMTNaV0pyYVhRdFlYQndaV0Z5WVc1alpUb2dZblYwZEc5dU95QXZMeUF5WEc0Z0lDQWdZM1Z5YzI5eU9pQndiMmx1ZEdWeU95QXZMeUF6WEc0Z0lDQWdRR2xtSUNSc1pXZGhZM2xmYzNWd2NHOXlkRjltYjNKZmFXVWdlMXh1SUNBZ0lDQWdJQ0FxYjNabGNtWnNiM2M2SUhacGMybGliR1U3SUNBdkx5QTBYRzRnSUNBZ2ZWeHVmVnh1WEc0dkx5QlNaUzF6WlhRZ1pHVm1ZWFZzZENCamRYSnpiM0lnWm05eUlHUnBjMkZpYkdWa0lHVnNaVzFsYm5SelhHNWNibUoxZEhSdmJsdGthWE5oWW14bFpGMHNYRzVwYm5CMWRGdGthWE5oWW14bFpGMGdlMXh1SUNBZ0lHTjFjbk52Y2pvZ1pHVm1ZWFZzZER0Y2JuMWNibHh1THk4Z1VtVnRiM1psY3lCcGJtNWxjaUJ3WVdSa2FXNW5JR0Z1WkNCaWIzSmtaWElnYVc0Z1JrWXpLMXh1THk4Z2QzZDNMbk5wZEdWd1pXNHVZMjl0TDJKc2IyY3ZNakF3T0M4d05TOHhOQzkwYUdVdFpHVjJhV3h6TFdsdUxYUm9aUzFrWlhSaGFXeHpMV1pwZUdsdVp5MWtiMnB2Y3kxMGIyOXNZbUZ5TFdKMWRIUnZibk12WEc1Y2JtSjFkSFJ2Yml3Z2FXNXdkWFFnZTF4dUlDQWdJQ1k2T2kxdGIzb3RabTlqZFhNdGFXNXVaWElnZTF4dUlDQWdJQ0FnSUNCaWIzSmtaWEk2SURBN1hHNGdJQ0FnSUNBZ0lIQmhaR1JwYm1jNklEQTdYRzRnSUNBZ2ZWeHVmVnh1WEc0dkx5QXhMaUJTWlcxdmRtVnpJR1JsWm1GMWJIUWdkbVZ5ZEdsallXd2djMk55YjJ4c1ltRnlJR2x1SUVsRk5pODNMemd2T1Z4dUx5OGdNaTRnU1cxd2NtOTJaWE1nY21WaFpHRmlhV3hwZEhrZ1lXNWtJR0ZzYVdkdWJXVnVkQ0JwYmlCaGJHd2dZbkp2ZDNObGNuTmNibHh1ZEdWNGRHRnlaV0VnZTF4dUlDQWdJRzkyWlhKbWJHOTNPaUJoZFhSdk95QXZMeUF4WEc0Z0lDQWdkbVZ5ZEdsallXd3RZV3hwWjI0NklIUnZjRHNnTHk4Z01seHVmVnh1WEc0dkx5QTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFZ4dUx5OGdWR0ZpYkdWelhHNHZMeUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVYRzR2THlCU1pXMXZkbVVnYlc5emRDQnpjR0ZqYVc1bklHSmxkSGRsWlc0Z2RHRmliR1VnWTJWc2JITmNibHh1ZEdGaWJHVWdlMXh1SUNBZ0lHSnZjbVJsY2kxamIyeHNZWEJ6WlRvZ1kyOXNiR0Z3YzJVN1hHNGdJQ0FnWW05eVpHVnlMWE53WVdOcGJtYzZJREE3WEc1OVhHNWNibWx1Y0hWMElIdGNiaUFnSUNBdkx5QXhMaUJCWkdSeVpYTnpaWE1nWVhCd1pXRnlZVzVqWlNCelpYUWdkRzhnYzJWaGNtTm9abWxsYkdRZ2FXNGdVelVzSUVOb2NtOXRaVnh1SUNBZ0lDOHZJREl1SUVGa1pISmxjM05sY3lCaWIzZ3RjMmw2YVc1bklITmxkQ0IwYnlCaWIzSmtaWEl0WW05NElHbHVJRk0xTENCRGFISnZiV1VnS0dsdVkyeDFaR1VnTFcxdmVpQjBieUJtZFhSMWNtVXRjSEp2YjJZcFhHNGdJQ0FnSmx0MGVYQmxQVndpYzJWaGNtTm9YQ0pkSUh0Y2JpQWdJQ0FnSUNBZ0xYZGxZbXRwZEMxaGNIQmxZWEpoYm1ObE9pQjBaWGgwWm1sbGJHUTdJQzh2SURGY2JpQWdJQ0FnSUNBZ0xXMXZlaTFpYjNndGMybDZhVzVuT2lCamIyNTBaVzUwTFdKdmVEdGNiaUFnSUNBZ0lDQWdMWGRsWW10cGRDMWliM2d0YzJsNmFXNW5PaUJqYjI1MFpXNTBMV0p2ZURzZ0x5OGdNbHh1SUNBZ0lDQWdJQ0JpYjNndGMybDZhVzVuT2lCamIyNTBaVzUwTFdKdmVEdGNibHh1SUNBZ0lGeDBMeThnVW1WdGIzWmxJR2x1Ym1WeUlIQmhaR1JwYm1jZ1lXNWtJSE5sWVhKamFDQmpZVzVqWld3Z1luVjBkRzl1SUdsdUlGTmhabUZ5YVNBMUlHRnVaQ0JEYUhKdmJXVmNiaUFnSUNBZ0lDQWdMeThnYjI0Z1QxTWdXQzVjYmlBZ0lDQWdJQ0FnSmpvNkxYZGxZbXRwZEMxelpXRnlZMmd0WTJGdVkyVnNMV0oxZEhSdmJpeGNiaUFnSUNBZ0lDQWdKam82TFhkbFltdHBkQzF6WldGeVkyZ3RaR1ZqYjNKaGRHbHZiaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXRkMlZpYTJsMExXRndjR1ZoY21GdVkyVTZJRzV2Ym1VN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QXhMaUJCWkdSeVpYTnpJR0p2ZUNCemFYcHBibWNnYzJWMElIUnZJR0JqYjI1MFpXNTBMV0p2ZUdBZ2FXNGdTVVVnT0M4NUx6RXdMbHh1SUNBZ0lDOHZJREl1SUZKbGJXOTJaU0JsZUdObGMzTWdjR0ZrWkdsdVp5QnBiaUJKUlNBNEx6a3ZNVEF1WEc0Z0lDQWdMeThnTXk0Z1VtVnRiM1psY3lCbGVHTmxjM01nY0dGa1pHbHVaeUJwYmlCSlJUZGNiaUFnSUNBdkx5QWdJQ0JMYm05M2JpQnBjM04xWlRvZ1pYaGpaWE56SUhCaFpHUnBibWNnY21WdFlXbHVjeUJwYmlCSlJUWmNiaUFnSUNBbVczUjVjR1U5WENKamFHVmphMkp2ZUZ3aVhTeGNiaUFnSUNBbVczUjVjR1U5WENKeVlXUnBiMXdpWFNCN1hHNGdJQ0FnWEhSaWIzZ3RjMmw2YVc1bk9pQmliM0prWlhJdFltOTRPeUF2THlBeFhHNGdJQ0FnWEhSd1lXUmthVzVuT2lBd095QXZMeUF5WEc0Z0lDQWdYSFJBYVdZZ0pHeGxaMkZqZVY5emRYQndiM0owWDJadmNsOXBaU0I3WEc0Z0lDQWdJQ0FnSUZ4MEttaGxhV2RvZERvZ01UTndlRHNnTHk4Z00xeHVJQ0FnSUNBZ0lDQmNkQ3AzYVdSMGFEb2dNVE53ZURzZ0x5OGdNMXh1SUNBZ0lGeDBmVnh1SUNBZ0lIMWNibjFjYmlJc0lpOHZJRlpoY25OY2JpUmlZWE5sTFdadmJuUXRjMmw2WlRvZ01UWndlRnh1SkdKaGMyVXRiR2x1WlMxb1pXbG5hSFE2SURFdU5WeHVYRzR2THlCVWVYQmxabUZqWlhOY2JpUnpZVzV6T2lCT1pYZHpJRU41WTJ4bExDQnpZVzV6TFhObGNtbG1YRzRrYzJWeWFXWTZJRkJzWVhsbVlXbHlJRVJwYzNCc1lYa3NJSE5sY21sbVhHNWNiaTh2SUVadmJuUWdkMlZwWjJoMGMxeHVKSGhzYVdkb2REb2dNakF3WEc0a2JHbG5hSFE2SURNd01GeHVKRzV2Y20xaGJEb2dOREF3WEc0a2MyVnRhV0p2YkdRNklEWXdNRnh1SkdKdmJHUTZJRGN3TUZ4dVhHNHZMeUJNYVc1bElHaGxhV2RvZENCbWRXNWpkR2x2Ymx4dVFHWjFibU4wYVc5dUlHeHBibVV0YUdWcFoyaDBLQ2xjYmlBZ1FISmxkSFZ5YmlBa1ltRnpaUzFtYjI1MExYTnBlbVVnS2lBa1ltRnpaUzFzYVc1bExXaGxhV2RvZEZ4dVhHNHZMeUJXWVhJZ2JYVnpkQ0JpWlNCemNHVmphV1pwWldRZ1lXWjBaWElnY21WMGRYSnVhVzVuSUhSb1pTQnNhVzVsTFdobGFXZG9kQ0JtZFc1amRHbHZibHh1SkdOaGJDMXNhVzVsTFdobGFXZG9kRG9nYkdsdVpTMW9aV2xuYUhRb0tWeHVYRzR2THlCTmFYaHBibk5jYmoxMlpYSjBMVzFoY21kcGJpZ2tkRzl3T2lBeExDQWtZbTkwZEc5dE9pQXhLVnh1SUNCdFlYSm5hVzR0ZEc5d09pQWtZMkZzTFd4cGJtVXRhR1ZwWjJoMElDb2dKSFJ2Y0Z4dUlDQnRZWEpuYVc0dFltOTBkRzl0T2lBa1kyRnNMV3hwYm1VdGFHVnBaMmgwSUNvZ0pHSnZkSFJ2YlZ4dVhHNDlkbVZ5ZEMxd1lXUmthVzVuS0NSMGIzQTZJREVzSUNSaWIzUjBiMjA2SURFcFhHNGdJSEJoWkdScGJtY3RkRzl3T2lBa1kyRnNMV3hwYm1VdGFHVnBaMmgwSUNvZ0pIUnZjRnh1SUNCd1lXUmthVzVuTFdKdmRIUnZiVG9nSkdOaGJDMXNhVzVsTFdobGFXZG9kQ0FxSUNSaWIzUjBiMjFjYmx4dVhHNW9kRzFzWEc0Z0lHWnZiblF0YzJsNlpUb2dKR0poYzJVdFptOXVkQzF6YVhwbFhHNGdJQzF0YjNvdGIzTjRMV1p2Ym5RdGMyMXZiM1JvYVc1bk9pQm5jbUY1YzJOaGJHVmNiaUFnTFhkbFltdHBkQzFtYjI1MExYTnRiMjkwYUdsdVp6b2dZVzUwYVdGc2FXRnpaV1JjYmx4dVltOWtlVnh1SUNCamIyeHZjam9nSkdOb1lYSmpiMkZzWEc0Z0lHeHBibVV0YUdWcFoyaDBPaUF4TGpWY2JpQWdabTl1ZEMxbVlXMXBiSGs2SUNSellXNXpYRzRnSUM4dlltRmphMmR5YjNWdVpDMXBiV0ZuWlRvZ2JHbHVaV0Z5TFdkeVlXUnBaVzUwS0hSeVlXNXpjR0Z5Wlc1MExDQjBjbUZ1YzNCaGNtVnVkQ0JzYVc1bExXaGxhV2RvZENncElDMGdNWEI0TENBa1ozSmxaVzRnTVhCNElDd2dkSEpoYm5Od1lYSmxiblFwWEc0Z0lHSmhZMnRuY205MWJtUXRjMmw2WlRvZ1lYVjBieUJzYVc1bExXaGxhV2RvZENncFhHNGdJRzFoY21kcGJqb2dNRnh1WEc1Y2JpOHZXMk5zWVhOektqMG5YMTlvWldGa2JHbHVaU2RkWEc1Y2JseHVMeThnVlhObFpDQnBiaUJoY25ScFkyeGxJR2hsWVdSbGNuTWdhVzRnZEdobElDNU5ZV2x1SUdOdmJIVnRibk5jYmx0amJHRnpjeW85SjE5ZmFHVmhaR2x1WnlkZFhHNGdJR052Ykc5eU9pQWtaM0psWlc1Y2JpQWdabTl1ZEMxbVlXMXBiSGs2SUNSelpYSnBabHh1SUNCbWIyNTBMWE5wZW1VNklESXVOWEpsYlZ4dUlDQm1iMjUwTFhkbGFXZG9kRG9nSkc1dmNtMWhiRnh1SUNCc2FXNWxMV2hsYVdkb2REb2dNVnh1SUNCdFlYSm5hVzR0WW05MGRHOXRPaUF5Y21WdFhHNWNiajF6ZEdGdVpHRnlaQzFvWldGa2FXNW5LQ2xjYmlBZ1kyOXNiM0k2SUNSbmNtVmxibHh1SUNCbWIyNTBMV1poYldsc2VUb2dKSE5sY21sbVhHNGdJR1p2Ym5RdGMybDZaVG9nTW5KbGJWeHVJQ0JtYjI1MExYZGxhV2RvZERvZ0pHNXZjbTFoYkZ4dUlDQnNhVzVsTFdobGFXZG9kRG9nTVZ4dVhHNWNiaTh2SUVadmRXNWtJR2x1SUhSb1pTQk5ZV2x1SUVKc2IyY2dVRzl6ZEhOY2JqMXRhVzV2Y2kxb1pXRmthVzVuS0NsY2JpQWdZMjlzYjNJNklDUnVhV2RvZEdkeVpXVnVYRzRnSUdadmJuUXRabUZ0YVd4NU9pQWtjMlZ5YVdaY2JpQWdabTl1ZEMxemFYcGxPaUF4TGpJMWNtVnRYRzRnSUdadmJuUXRkMlZwWjJoME9pQWtZbTlzWkZ4dUlDQnNhVzVsTFdobGFXZG9kRG9nTVZ4dUlDQjBaWGgwTFhSeVlXNXpabTl5YlRvZ2RYQndaWEpqWVhObFhHNGdJQ3QyWlhKMExXMWhjbWRwYmlneExqVXNNQ2xjYmx4dVhHNHZMeUJWYzJWa0lHbHVJR0Z5ZEdsamJHVWdhR1ZoWkdWeWN5QnBiaUIwYUdVZ0xrMWhhVzRnWTI5c2RXMXVjMXh1UFhOdFlXeHNMV2hsWVdScGJtY29LVnh1SUNCamIyeHZjam9nSkdkeVpXVnVYRzRnSUdadmJuUXRabUZ0YVd4NU9pQWtjMlZ5YVdaY2JpQWdabTl1ZEMxemFYcGxPaUF4TGpNM05YSmxiVnh1SUNCbWIyNTBMWGRsYVdkb2REb2dKRzV2Y20xaGJGeHVJQ0JzYVc1bExXaGxhV2RvZERvZ01WeHVYRzVjYmk4dklFWnZkVzVrSUdsdUlIUm9aU0JOWVdsdUlFSnNiMmNnVUc5emRITmNiajFpYkc5amEzRjFiM1JsS0NsY2JpQWdZMjlzYjNJNklDUm5jbVZsYmx4dUlDQm1iMjUwTFdaaGJXbHNlVG9nSkhObGNtbG1YRzRnSUdadmJuUXRjMmw2WlRvZ01TNDFjbVZ0WEc0Z0lHWnZiblF0YzNSNWJHVTZJR2wwWVd4cFkxeHVJQ0JtYjI1MExYZGxhV2RvZERvZ0pHSnZiR1JjYmlBZ0szWmxjblF0YldGeVoybHVLREV1TlN3eExqVXBYRzVjYmx4dUx5OXBibkIxZEZ0MGVYQmxQVndpYzNWaWJXbDBYQ0pkWEc1Y2JsdGpiR0Z6Y3lvOVgxOWlkWFIwYjI1ZExGeHVhVzV3ZFhSYmRIbHdaVDFjSW1KMWRIUnZibHdpWFN4Y2JtbHVjSFYwVzNSNWNHVTlYQ0p5WlhObGRGd2lYVnh1SUNCaWIzSmtaWEk2SURGd2VDQnpiMnhwWkNBa1ozSmxaVzVjYmlBZ1pHbHpjR3hoZVRvZ2FXNXNhVzVsTFdKc2IyTnJYRzRnSUdadmJuUXRabUZ0YVd4NU9pQWtjMlZ5YVdaY2JpQWdabTl1ZEMxemFYcGxPaUF4TGpKeVpXMWNiaUFnWm05dWRDMXpkSGxzWlRvZ2FYUmhiR2xqWEc0Z0lIUmxlSFF0WVd4cFoyNDZJR05sYm5SbGNseHVJQ0J3WVdSa2FXNW5PaUF1TnpWeVpXMGdNM0psYlZ4dUlDQjBaWGgwTFdSbFkyOXlZWFJwYjI0NklHNXZibVZjYmlBZ0x5cEpkR1Z0Y3lCbWIzSWdkSEpoYm5OcGRHbHZibHh1SUNCaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lCMGNtRnVjM0JoY21WdWRGeHVJQ0JqYjJ4dmNqb2dKR2R5WldWdVhHNGdJQzhxVkhKaGJuTnBkR2x2YmlCelpYUjBhVzVuYzF4dUlDQjBjbUZ1YzJsMGFXOXVPaUJoYkd3Z0xqSnpJR1ZoYzJWY2JseHVJQ0FtT21odmRtVnlYRzRnSUNBZ0x5cFVhR1Z6WlNCM2FXeHNJSFJ5WVc1emFYUnBiMjRnYjI0Z2FHOTJaWEpjYmlBZ0lDQmlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWtaM0psWlc1Y2JpQWdJQ0JqYjJ4dmNqb2dKSGRvYVhSbFhHNWNibHh1THk4Z2FXNGdjSEp2WjNKbGMzTmNibHh1THk4Z1RXbDRhVzV6WEc0OVluVjBkRzl1S0NSaVlXTnJaM0p2ZFc1a0xDQWtZMjlzYjNJc0lDUmliM0prWlhJdFkyOXNiM0lwWEc0Z0lHSnZjbVJsY2pvZ01YQjRJSE52Ykdsa0lDUmliM0prWlhJdFkyOXNiM0pjYmlBZ1ptOXVkQzFtWVcxcGJIazZJQ1J6WlhKcFpseHVJQ0JtYjI1MExYTnBlbVU2SURFdU1uSmxiVnh1SUNCbWIyNTBMWE4wZVd4bE9pQnBkR0ZzYVdOY2JpQWdjR0ZrWkdsdVp6b2dMalZ5WlcwZ01YSmxiVnh1SUNCMFpYaDBMV1JsWTI5eVlYUnBiMjQ2SUc1dmJtVmNiaUFnTHlwSmRHVnRjeUJtYjNJZ2RISmhibk5wZEdsdmJseHVJQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlPaUIwY21GdWMzQmhjbVZ1ZEZ4dUlDQmpiMnh2Y2pvZ0pHTnZiRzl5WEc0Z0lDOHFWSEpoYm5OcGRHbHZiaUJ6WlhSMGFXNW5jMXh1SUNCMGNtRnVjMmwwYVc5dU9pQmhiR3dnTGpKeklHVmhjMlZjYmlBZ0pqcG9iM1psY2x4dUlDQWdJQzhxVkdobGMyVWdkMmxzYkNCMGNtRnVjMmwwYVc5dUlHOXVJR2h2ZG1WeVhHNGdJQ0FnWW1GamEyZHliM1Z1WkMxamIyeHZjam9nSkdkeVpXVnVYRzRnSUNBZ1kyOXNiM0k2SUNSamIyeHZjbHh1SWl3aUx5OGdVMmwwWlNCamIyeHZjaUJ3WVd4bGRIUmxYRzRrWjNKbFpXNDZJQ015TmpkbE5qUmNiaVJ1YVdkb2RHZHlaV1Z1T2lBak5EVTFOalV5WEc0a2MyeGhkR1U2SUNObFkyVmxaVFpjYmx4dUx5OGdOVEFnYzJoaFpHVnpJRzltSUdkeVlYbGNiaVIzYUdsMFpUb2dJMlptWmx4dUpITjBaV0Z0T2lBalpqaG1PR1k0WEc0a1kyeHZkV1E2SUNObE5XVTJaVGRjYmlSbmNtRndhR2wwWlRvZ0kyTmpZMXh1SkhOMGIyNWxPaUFqTjJZM1pUZGxYRzRrYkdWaFpEb2dJelpsTm1JMlkxeHVKR05vWVhKamIyRnNPaUFqTXpNelhHNGtZbXhoWTJzNklDTXdNREJjYmx4dVhHNGtiVzlpYVd4bExXNWhkaTFpZEc0NklDUnpiR0YwWlZ4dVhHNHZMMEp2Y21SbGNpQkRiMnh2Y2x4dUpHSnZjbVJsY2tOdmJHOXlPaUFrWjNKaGNHaHBkR1ZjYmx4dUx5OGdVMmwwWlNCaVlYTmxJSFJsZUhRZ1kyOXNiM0p6WEc0a2MybDBaUzEwWlhoMExXTnZiRzl5T2lBa1kyaGhjbU52WVd4Y2JpUnphWFJsTFhSbGVIUXRZMjlzYjNJdGJHbHVhem9nSkdkeVpXVnVYRzRrYzJsMFpTMTBaWGgwTFdOdmJHOXlMV3hwYm1zdGFHOTJaWEk2SUNNME5UVTJOVEpjYmx4dVhHNHZMeUJHYjI5MFpYSWdZMjlzYjNKelhHNGtabTl2ZEdWeUxYUmxlSFE2SUNSdWFXZG9kR2R5WldWdVhHNGtabTl2ZEdWeUxYUmxlSFF0YkdsdWF6b2dKRzVwWjJoMFozSmxaVzVjYmlSbWIyOTBaWEl0ZEdWNGRDMXNhVzVyTFdodmRtVnlPaUFrWjNKbFpXNWNiaUlzSWk4dklHaDBkSEE2THk5amMzTnRiMnB2TG1OdmJTOXNZWFJsYzNSZmJtVjNYMk5zWldGeVptbDRYM052WDJaaGNpOWNiaTVqYkdWaGNtWnBlRHBoWm5SbGNseHVJQ0JqYjI1MFpXNTBPaUJjSWx3aVhHNGdJR1JwYzNCc1lYazZJSFJoWW14bFhHNGdJR05zWldGeU9pQmliM1JvWEc0aUxDSXZMeUJTUlZOUVQwNVRTVlpGSUVsTlFVZEZVMXh1YVcxbkxDQnBabkpoYldVc0lHVnRZbVZrWEc0Z0lIZHBaSFJvT2lBeE1EQWxYRzRpTENJdVkyOXVkR0ZwYm1WeVhHNGdJR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1aY2JpQWdZbTl5WkdWeUxXeGxablE2SURGd2VDQnpiMnhwWkNBa1ltOXlaR1Z5UTI5c2IzSmNiaUFnWW05eVpHVnlMWEpwWjJoME9pQXhjSGdnYzI5c2FXUWdKR0p2Y21SbGNrTnZiRzl5WEc0Z0lHMWhjbWRwYmpvZ01DQmhkWFJ2WEc0Z0lHMWhlQzEzYVdSMGFEb2dNVEl3TUhCNFhHNWNibHh1VzJOc1lYTnpLajBuWTI5c0xTZGRYRzRnSUdScGMzQnNZWGs2SUhSaFlteGxMV05sYkd4Y2JpQWdkbVZ5ZEdsallXd3RZV3hwWjI0NklHMXBaR1JzWlZ4dVhHNGdJQ3R0WldScFlTaGNJanc5ZEdGaWJHVjBYQ0lwWEc0Z0lDQWdaR2x6Y0d4aGVUb2dhVzVzYVc1bExXSnNiMk5yWEc0Z0lDQWdkR1Y0ZEMxaGJHbG5iam9nWTJWdWRHVnlYRzVjYmk4dk1pQmpiMngxYlc1eklIZHBaR1ZjYmk4dklGUm9hWE1nYVhNZ2RYTmxaQ0JwYmlCMGFHVWdabTl2ZEdWeUlHWnZjaUJ1WVhKeWIzZGxjaUJqYjJ4MWJXNXpJRzltSUd4cGJtdHpYRzR1WTI5c0xUSXRNVEpjYmlBZ2QybGtkR2c2SURJdk1USWdLaUF4TURBbFhHNWNiaUFnSzIxbFpHbGhLRndpUEQxMFlXSnNaWFJjSWlsY2JpQWdJQ0IzYVdSMGFEb2dNVEF3SlZ4dVhHNHZMek1nWTI5c2RXMXVjeUIzYVdSbFhHNHZMeUJVYUdseklHbHpJSFZ6WldRZ2FXNGdkR2hsSUdadmIzUmxjaUJtYjNJZ1ptRjBkR1Z5SUdOdmJIVnRibk1nYjJZZ2JHOXVaMlZ5TFhScGRHeGxaQ0JzYVc1cmMxeHVMbU52YkMwekxURXlYRzRnSUhkcFpIUm9PaUF6THpFeUlDb2dNVEF3SlZ4dVhHNGdJQ3R0WldScFlTaGNJanc5ZEdGaWJHVjBYQ0lwWEc0Z0lDQWdkMmxrZEdnNklERXdNQ1ZjYmx4dUx5OGdOQ0JqYjJ4MWJXNXpJSGRwWkdVdVhHNHZMeUJVYUdseklHbHpJSFZ6WldRZ2FXNGdkR2hsSUV4bFlXUmxjbk5vYVhBZ2NHRm5aUzVjYmk1amIyd3ROQzB4TWx4dUlDQjNhV1IwYURvZ05DOHhNaUFxSURFd01DVmNibHh1SUNBcmJXVmthV0VvWENJOFBYUmhZbXhsZEZ3aUtWeHVJQ0FnSUhkcFpIUm9PaUF4TURBbFhHNWNibHh1THk4Z05TQmpiMngxYlc1eklIZHBaR1V1WEc0dkx5QlVhR2x6SUdseklIVnpaV1FnYVc0Z2JXOXpkQ0J2WmlCMGFHVWdZbUZ1Ym1WeWN5NWNiaTh2SUVsMElHbHpJR0ZzYzI4Z2RYTmxaQ0JwYmlCMGFHVWdUV0ZwYmlCdGIyUjFiR1VnWVhKbFlTQjBhR0YwSUdsdVkyeDFaR1Z6SUhSb1pTQnphV1JsWW1GeUxseHVMbU52YkMwMUxURXlYRzRnSUhkcFpIUm9PaUExTHpFeUlDb2dNVEF3SlZ4dVhHNGdJQ3R0WldScFlTaGNJanc5ZEdGaWJHVjBYQ0lwWEc0Z0lDQWdkMmxrZEdnNklERXdNQ1ZjYmx4dVhHNHZMeUEySUdOdmJIVnRibk1nZDJsa1pTNWNiaTh2SUZSb2FYTWdkMmxzYkNCemNHRnVJR2hoYkdZZ2RHaGxJR0YyWVdsc1lXSnNaU0IzYVdSMGFGeHVMeThnVkdobElFTmhjbVFnVFc5a2RXeGxJRzl1SUhSb1pTQm9iMjFsY0dGblpTQjFjMlZ6SUhSb2FYTmNiaTVqYjJ3dE5pMHhNbHh1SUNCM2FXUjBhRG9nTmk4eE1pQXFJREV3TUNWY2JseHVJQ0FyYldWa2FXRW9YQ0k4UFhSaFlteGxkRndpS1Z4dUlDQWdJSGRwWkhSb09pQXhNREFsWEc1Y2JseHVMeThnTnlCamIyeDFiVzV6SUhkcFpHVXVYRzR2THlCVWFHbHpJR2x6SUhWelpXUWdhVzRnYlc5emRDQnZaaUIwYUdVZ1ltRnVibVZ5Y3k1Y2JpOHZJRWwwSUdseklHRnNjMjhnZFhObFpDQnBiaUIwYUdVZ1RXRnBiaUJ0YjJSMWJHVWdZWEpsWVNCMGFHRjBJR2x1WTJ4MVpHVnpJSFJvWlNCemFXUmxZbUZ5TGx4dUx5OGdXMk5zWVhOektqMG5MUzFqYjJ3dE55MHhNaWRkWEc0dVkyOXNMVGN0TVRKY2JpQWdkMmxrZEdnNklEY3ZNVElnS2lBeE1EQWxYRzVjYmlBZ0syMWxaR2xoS0Z3aVBEMTBZV0pzWlhSY0lpbGNiaUFnSUNCM2FXUjBhRG9nTVRBd0pWeHVYRzVjYmk4dklEZ2dZMjlzZFcxdWN5QjNhV1JsTGx4dUx5OGdWR2hwY3lCcGN5QjFjMlZrSUdsdUlIUm9aU0JNWldGa1pYSnphR2x3SUhCaFoyVXVYRzR1WTI5c0xUZ3RNVEpjYmlBZ2QybGtkR2c2SURndk1USWdLaUF4TURBbFhHNWNiaUFnSzIxbFpHbGhLRndpUEQxMFlXSnNaWFJjSWlsY2JpQWdJQ0IzYVdSMGFEb2dNVEF3SlZ4dVhHNWNiaTVqYjJ3dE9TMHhNbHh1SUNCM2FXUjBhRG9nT1M4eE1pQXFJREV3TUNWY2JseHVJQ0FyYldWa2FXRW9YQ0k4UFhSaFlteGxkRndpS1Z4dUlDQWdJSGRwWkhSb09pQXhNREFsWEc1Y2JseHVMbU52YkMweE1DMHhNbHh1SUNCM2FXUjBhRG9nTVRBdk1USWdLaUF4TURBbFhHNWNiaUFnSzIxbFpHbGhLRndpUEQxMFlXSnNaWFJjSWlsY2JpQWdJQ0IzYVdSMGFEb2dNVEF3SlZ4dVhHNHVZMjlzTFRFeExURXlYRzRnSUhkcFpIUm9PaUF4TVM4eE1pQXFJREV3TUNWY2JseHVJQ0FyYldWa2FXRW9YQ0k4UFhSaFlteGxkRndpS1Z4dUlDQWdJSGRwWkhSb09pQXhNREFsWEc1Y2JpNWljbVZoWkdOeWRXMWlYRzRnSUhCaFpHUnBibWM2TVhKbGJTQXljbVZ0SURBZ01uSmxiVHRjYmlBZ1ptOXVkQzF6YVhwbE9qRTBjSGc3WEc1Y2JpQWdZVnh1SUNBZ0lHTnZiRzl5T2lSbmNtVmxibHh1SUNBZ0lDWTZhRzkyWlhKY2JpQWdJQ0FnSUdOdmJHOXlPaVJ1YVdkb2RHZHlaV1Z1WEc0Z0lITndZVzRnWEc0Z0lDQWdZMjlzYjNJNkpITjBiMjVsWEc0aUxDSXZMMXh1WEhRZ1h5QWdJQ0FnSUNBZ0lDQWdJRjhnSUNBZ0lDQWdJQ0FnSUY4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZklGOWNibHgwS0Y4cElDQWdJQ0FnSUNBZ0lId2dmQ0FnSUNBZ0lDQWdJSHdnZkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4SUNoZktWeHVYSFFnWHlCZklGOWZJQ0FnWDE5ZmZDQjhYeUFnSUY4Z0lGOWZmQ0I4SUY5Zlh5QWdJRjhnWDE4Z1gxOWZJQ0FnWDE5ZklDQmZYM3dnZkY4Z0lGOWZJRjljYmx4MGZDQjhJQ2RmSUZ4Y0lDOGdYMTk4SUh3Z2ZDQjhJSHd2SUY5Z0lId3ZJRjhnWEZ3Z2ZDQW5YeUJnSUY4Z1hGd2dMeUJmSUZ4Y0x5QmZZQ0I4SUh3dklGOWdJSHhjYmx4MGZDQjhJSHdnZkNCOElDaGZYM3dnZkNCOFgzd2dmQ0FvWDN3Z2ZDQWdYMTh2SUh3Z2ZDQjhJSHdnZkNCOElDQmZYeThnS0Y5OElId2dmQ0FvWDN3Z2ZGeHVYSFI4WDN4ZmZDQjhYM3hjWEY5ZlgzeGZmRnhjWDE4c1gzeGNYRjlmTEY5OFhGeGZYMTk4SUh4ZmZDQjhYM3dnZkY5OFhGeGZYMTk4WEZ4Zlh5eGZmRjk4WEZ4Zlh5eGZmRnh1WEc1Y2RGTnBiWEJzWlN3Z1pXeGxaMkZ1ZENCaGJtUWdiV0ZwYm5SaGFXNWhZbXhsSUcxbFpHbGhJSEYxWlhKcFpYTWdhVzRnVTJGemMxeHVYRzVjZEdoMGRIQTZMeTlwYm1Oc2RXUmxMVzFsWkdsaExtTnZiVnh1WEc0Z0lFRjFkR2h2Y2pvZ1JXUjFZWEprYnlCQ2IzVmpZWE1nUEcxaGFXeEFaV1IxWVhKa2IySnZkV05oY3k1amIyMCtYRzVjYmx4dUlDQkRjbVZoZEdWeklHRWdiR2x6ZENCdlppQm5iRzlpWVd3Z1luSmxZV3R3YjJsdWRITmNibHh1SUNCQVlYVjBhRzl5SUVWa2RXRnlaRzhnUW05MVkyRnpYRzVjYmlBZ1FHVjRZVzF3YkdVZ2MyTnpjeUF0SUVOeVpXRjBaWE1nWVNCemFXNW5iR1VnWW5KbFlXdHdiMmx1ZENCM2FYUm9JSFJvWlNCc1lXSmxiQ0JnY0dodmJtVmdYRzRnSUNSaWNtVmhhM0J2YVc1MGN6b2dLQ2R3YUc5dVpTYzZJRE15TUhCNEtUdGNibHh1SkdKeVpXRnJjRzlwYm5Sek9pQW9YQ0p3YUc5dVpWd2lPaUF6TWpCd2VDd2dYQ0owWVdKc1pYUmNJam9nTnpZNGNIZ3NJRndpWkdWemEzUnZjRndpT2lBeE1ESXpjSGdwSUNGa1pXWmhkV3gwWEc1Y2JpOHZYRzRnSUVOeVpXRjBaWE1nWVNCc2FYTjBJRzltSUhOMFlYUnBZeUJsZUhCeVpYTnphVzl1Y3lCdmNpQnRaV1JwWVNCMGVYQmxjMXh1WEc0Z0lFQmhkWFJvYjNJZ1JXUjFZWEprYnlCQ2IzVmpZWE5jYmx4dUlDQkFaWGhoYlhCc1pTQnpZM056SUMwZ1EzSmxZWFJsY3lCaElITnBibWRzWlNCdFpXUnBZU0IwZVhCbElDaHpZM0psWlc0cFhHNGdJQ0FrYldWa2FXRXRaWGh3Y21WemMybHZibk02SUNnbmMyTnlaV1Z1SnpvZ0ozTmpjbVZsYmljcE8xeHVYRzRnSUVCbGVHRnRjR3hsSUhOamMzTWdMU0JEY21WaGRHVnpJR0VnYzNSaGRHbGpJR1Y0Y0hKbGMzTnBiMjRnZDJsMGFDQnNiMmRwWTJGc0lHUnBjMnAxYm1OMGFXOXVJQ2hQVWlCdmNHVnlZWFJ2Y2lsY2JpQWdJQ1J0WldScFlTMWxlSEJ5WlhOemFXOXVjem9nS0Z4dUlDQmNkRngwSjNKbGRHbHVZVEo0SnpvZ0tGeHVJQ0JjZEZ4MFhIUW5LQzEzWldKcmFYUXRiV2x1TFdSbGRtbGpaUzF3YVhobGJDMXlZWFJwYnpvZ01pa25MRnh1SUNCY2RGeDBYSFFuS0cxcGJpMXlaWE52YkhWMGFXOXVPaUF4T1RKa2NHa3BKMXh1SUNCY2RGeDBLVnh1SUNCY2RDazdYRzVjYmlSdFpXUnBZUzFsZUhCeVpYTnphVzl1Y3pvZ0tGd2ljMk55WldWdVhDSTZJRndpYzJOeVpXVnVYQ0lzSUZ3aWNISnBiblJjSWpvZ1hDSndjbWx1ZEZ3aUxDQmNJbWhoYm1Sb1pXeGtYQ0k2SUZ3aWFHRnVaR2hsYkdSY0lpd2dYQ0p5WlhScGJtRXllRndpT2lBb1hDSW9MWGRsWW10cGRDMXRhVzR0WkdWMmFXTmxMWEJwZUdWc0xYSmhkR2x2T2lBeUtWd2lMQ0JjSWlodGFXNHRjbVZ6YjJ4MWRHbHZiam9nTVRreVpIQnBLVndpS1N3Z1hDSnlaWFJwYm1FemVGd2lPaUFvWENJb0xYZGxZbXRwZEMxdGFXNHRaR1YyYVdObExYQnBlR1ZzTFhKaGRHbHZPaUF6S1Z3aUxDQmNJaWh0YVc0dGNtVnpiMngxZEdsdmJqb2dNelV3WkhCcEtWd2lLU2tnSVdSbFptRjFiSFJjYmx4dUx5OWNiaUFnUkdWbWFXNWxjeUJoSUc1MWJXSmxjaUIwYnlCaVpTQmhaR1JsWkNCdmNpQnpkV0owY21GamRHVmtJR1p5YjIwZ1pXRmphQ0IxYm1sMElIZG9aVzRnWkdWamJHRnlhVzVuSUdKeVpXRnJjRzlwYm5SeklIZHBkR2dnWlhoamJIVnphWFpsSUdsdWRHVnlkbUZzYzF4dVhHNGdJRUJoZFhSb2IzSWdSV1IxWVhKa2J5QkNiM1ZqWVhOY2JseHVJQ0JBWlhoaGJYQnNaU0J6WTNOeklDMGdTVzUwWlhKMllXd2dabTl5SUhCcGVHVnNjeUJwY3lCa1pXWnBibVZrSUdGeklHQXhZQ0JpZVNCa1pXWmhkV3gwWEc0Z0lDQkFhVzVqYkhWa1pTQnRaV1JwWVNoY0lqNHhNamh3ZUZ3aUtTQjdmVnh1WEc0Z0lFZGxibVZ5WVhSbGN6cGNiaUFnUUcxbFpHbGhJQ2h0YVc0dGQybGtkR2c2SURFeU9YQjRLU0I3ZlZ4dVhHNGdJRUJsZUdGdGNHeGxJSE5qYzNNZ0xTQkpiblJsY25aaGJDQm1iM0lnWlcxeklHbHpJR1JsWm1sdVpXUWdZWE1nWURBdU1ERmdJR0o1SUdSbFptRjFiSFJjYmlBZ0lFQnBibU5zZFdSbElHMWxaR2xoS0Z3aVBqSXdaVzFjSWlrZ2UzMWNibHh1SUNCSFpXNWxjbUYwWlhNNlhHNGdJRUJ0WldScFlTQW9iV2x1TFhkcFpIUm9PaUF5TUM0d01XVnRLU0I3ZlZ4dVhHNGdJRUJsZUdGdGNHeGxJSE5qYzNNZ0xTQkpiblJsY25aaGJDQm1iM0lnY21WdGN5QnBjeUJrWldacGJtVmtJR0Z6SUdBd0xqRmdJR0o1SUdSbFptRjFiSFFzSUhSdklHSmxJSFZ6WldRZ2QybDBhQ0JnWm05dWRDMXphWHBsT2lBMk1pNDFKVHRnWEc0Z0lDQkFhVzVqYkhWa1pTQnRaV1JwWVNoY0lqNHlMakJ5WlcxY0lpa2dlMzFjYmx4dUlDQkhaVzVsY21GMFpYTTZYRzRnSUVCdFpXUnBZU0FvYldsdUxYZHBaSFJvT2lBeUxqRnlaVzBwSUh0OVhHNWNiaVIxYm1sMExXbHVkR1Z5ZG1Gc2N6b2dLRndpY0hoY0lqb2dNU3dnWENKbGJWd2lPaUF3TGpBeExDQmNJbkpsYlZ3aU9pQXdMakVwSUNGa1pXWmhkV3gwWEc1Y2JpOHZYRzRnSUVkbGJtVnlZWFJsY3lCaElHMWxaR2xoSUhGMVpYSjVJR0poYzJWa0lHOXVJR0VnYkdsemRDQnZaaUJqYjI1a2FYUnBiMjV6WEc1Y2JpQWdRR0YxZEdodmNpQkZaSFZoY21SdklFSnZkV05oYzF4dVhHNGdJRUJ3WVhKaGJTQjdUR2x6ZEgwZ0lDQWtZMjl1WkdsMGFXOXVjeUFnTFNCTlpXUnBZU0J4ZFdWeWVTQmpiMjVrYVhScGIyNXpYRzVjYmlBZ1FHVjRZVzF3YkdVZ2MyTnpjeUF0SUZkcGRHZ2dZU0J6YVc1bmJHVWdjMlYwSUdKeVpXRnJjRzlwYm5SY2JpQWdJRUJwYm1Oc2RXUmxJRzFsWkdsaEtGd2lQbkJvYjI1bFhDSXBJSHNnZlZ4dVhHNGdJRUJsZUdGdGNHeGxJSE5qYzNNZ0xTQlhhWFJvSUhSM2J5QnpaWFFnWW5KbFlXdHdiMmx1ZEhOY2JpQWdJRUJwYm1Oc2RXUmxJRzFsWkdsaEtGd2lQbkJvYjI1bFhDSXNJRndpUEQxMFlXSnNaWFJjSWlrZ2V5QjlYRzVjYmlBZ1FHVjRZVzF3YkdVZ2MyTnpjeUF0SUZkcGRHZ2dZM1Z6ZEc5dElIWmhiSFZsYzF4dUlDQWdRR2x1WTJ4MVpHVWdiV1ZrYVdFb1hDSStQVE0xT0hCNFhDSXNJRndpUERnMU1IQjRYQ0lwSUhzZ2ZWeHVYRzRnSUVCbGVHRnRjR3hsSUhOamMzTWdMU0JYYVhSb0lITmxkQ0JpY21WaGEzQnZhVzUwY3lCM2FYUm9JR04xYzNSdmJTQjJZV3gxWlhOY2JpQWdJRUJwYm1Oc2RXUmxJRzFsWkdsaEtGd2lQbVJsYzJ0MGIzQmNJaXdnWENJOFBURXpOVEJ3ZUZ3aUtTQjdJSDFjYmx4dUlDQkFaWGhoYlhCc1pTQnpZM056SUMwZ1YybDBhQ0JoSUhOMFlYUnBZeUJsZUhCeVpYTnphVzl1WEc0Z0lDQkFhVzVqYkhWa1pTQnRaV1JwWVNoY0luSmxkR2x1WVRKNFhDSXBJSHNnZlZ4dVhHNGdJRUJsZUdGdGNHeGxJSE5qYzNNZ0xTQk5hWGhwYm1jZ1pYWmxjbmwwYUdsdVoxeHVJQ0FnUUdsdVkyeDFaR1VnYldWa2FXRW9YQ0krUFRNMU1IQjRYQ0lzSUZ3aVBIUmhZbXhsZEZ3aUxDQmNJbkpsZEdsdVlUTjRYQ0lwSUhzZ2ZWeHVYRzVjYmoxdFpXUnBZU2drWTI5dVpHbDBhVzl1Y3k0dUxpbGNiaUFnUUdadmNpQWthU0JtY205dElERWdkR2h5YjNWbmFDQnNaVzVuZEdnb0pHTnZibVJwZEdsdmJuTXBYRzRnSUNBZ0pHTnZibVJwZEdsdmJuTTZJSE5sZEMxdWRHZ29KR052Ym1ScGRHbHZibk1zSUNScExDQndZWEp6WlMxbGVIQnlaWE56YVc5dUtHNTBhQ2drWTI5dVpHbDBhVzl1Y3l3Z0pHa3BLU2xjYmlBZ0pHSnlZVzVqYUdWek9pQm5aWFF0Y1hWbGNua3RZbkpoYm1Ob1pYTW9KR052Ym1ScGRHbHZibk1wWEc0Z0lDUnhkV1Z5ZVRvZ1hDSmNJbHh1SUNCQVpXRmphQ0FrWW5KaGJtTm9JR2x1SUNSaWNtRnVZMmhsYzF4dUlDQWdJRUJwWmlCemRISXRiR1Z1WjNSb0tDUnhkV1Z5ZVNrZ0lUMGdNRnh1SUNBZ0lDQWdKSEYxWlhKNU9pQWtjWFZsY25rZ0t5QmNJaXdnWENKY2JpQWdJQ0FrY1hWbGNuazZJQ1J4ZFdWeWVTQXJJQ1JpY21GdVkyaGNiaUFnUUcxbFpHbGhJQ043SkhGMVpYSjVmVnh1SUNBZ0lFQmpiMjUwWlc1MFhHNWNiaTh2WEc0Z0lGSmxZV1J6SUdFZ2JHbHpkQ0J2WmlCdFpXUnBZU0J4ZFdWeWVTQmxlSEJ5WlhOemFXOXVjeUJoYm1RZ2MyVndZWEpoZEdWeklHeHZaMmxqWVd3Z1pHbHphblZ1WTNScGIyNXpJR2x1ZEc4Z1pHbG1abVZ5Wlc1MElHSnlZVzVqYUdWelhHNWNiaUFnUUdGMWRHaHZjaUJGWkhWaGNtUnZJRUp2ZFdOaGMxeHVJQ0JBY0dGeVlXMGdlMHhwYzNSOUlDQWdKR1Y0Y0hKbGMzTnBiMjV6SUNBdElHeHBjM1FnYjJZZ1pYaHdjbVZ6YzJsdmJuTmNiaUFnUUhSb2NtOTNjeUJnSkdWNGNISmxjM05wYjI1Z0lHbHpJRzV2ZENCaElIWmhiR2xrSUdWNGNISmxjM05wYjI1Y2JseHVJQ0JBY21WMGRYSnVJSHRNYVhOMElId2dUblZzYkgxY2JseHVYRzVBWm5WdVkzUnBiMjRnWjJWMExYRjFaWEo1TFdKeVlXNWphR1Z6S0NSbGVIQnlaWE56YVc5dWN5bGNiaUFnSkhKbGMzVnNkRG9nWENKY0lseHVJQ0FrYUdGekxXZHliM1Z3Y3pvZ1ptRnNjMlZjYmlBZ0x5OGdSMlYwZEdsdVp5QnBibWwwYVdGc0lITnVZWEJ6YUc5MElHRnVaQ0JzYjI5cmFXNW5JR1p2Y2lCbmNtOTFjSE5jYmlBZ1FHVmhZMmdnSkdWNGNISmxjM05wYjI0Z2FXNGdKR1Y0Y0hKbGMzTnBiMjV6WEc0Z0lDQWdRR2xtSUhOMGNpMXNaVzVuZEdnb0pISmxjM1ZzZENrZ0lUMGdNRnh1SUNBZ0lDQWdKSEpsYzNWc2REb2dKSEpsYzNWc2RDQXJJRndpSUdGdVpDQmNJbHh1SUNBZ0lFQnBaaUIwZVhCbExXOW1LQ1JsZUhCeVpYTnphVzl1S1NBOVBTQmNJbk4wY21sdVoxd2lYRzRnSUNBZ0lDQWtjbVZ6ZFd4ME9pQWtjbVZ6ZFd4MElDc2dKR1Y0Y0hKbGMzTnBiMjVjYmlBZ0lDQkFaV3h6WlNCcFppQjBlWEJsTFc5bUtDUmxlSEJ5WlhOemFXOXVLU0E5UFNCY0lteHBjM1JjSWx4dUlDQWdJQ0FnSkhKbGMzVnNkRG9nSkhKbGMzVnNkQ0FySUc1MGFDZ2taWGh3Y21WemMybHZiaXdnTVNsY2JpQWdJQ0FnSUNSb1lYTXRaM0p2ZFhCek9pQjBjblZsWEc0Z0lDQWdRR1ZzYzJWY2JpQWdJQ0FnSUVCM1lYSnVJRndpSTNza1pYaHdjbVZ6YzJsdmJuMGdhWE1nYm05MElHRWdkbUZzYVdRZ1pYaHdjbVZ6YzJsdmJpNWNJbHh1SUNBdkx5QkpaaUIzWlNCb1lYWmxJR2R5YjNWd2N5d2dkMlVnYUdGMlpTQjBieUJqY21WaGRHVWdZV3hzSUhCdmMzTnBZbXhsSUdOdmJXSnBibUYwYVc5dWMxeHVJQ0JBYVdZZ0pHaGhjeTFuY205MWNITmNiaUFnSUNCQVpXRmphQ0FrWlhod2NtVnpjMmx2YmlCcGJpQWtaWGh3Y21WemMybHZibk5jYmlBZ0lDQWdJRUJwWmlCMGVYQmxMVzltS0NSbGVIQnlaWE56YVc5dUtTQTlQU0JjSW14cGMzUmNJbHh1SUNBZ0lDQWdJQ0FrWm1seWMzUTZJRzUwYUNna1pYaHdjbVZ6YzJsdmJpd2dNU2xjYmlBZ0lDQWdJQ0FnUUdWaFkyZ2dKRzFsYldKbGNpQnBiaUFrWlhod2NtVnpjMmx2Ymx4dUlDQWdJQ0FnSUNBZ0lFQnBaaUFrYldWdFltVnlJQ0U5SUNSbWFYSnpkRnh1SUNBZ0lDQWdJQ0FnSUNBZ1FHVmhZMmdnSkhCaGNuUnBZV3dnYVc0Z0pISmxjM1ZzZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FrY21WemRXeDBPaUJxYjJsdUtDUnlaWE4xYkhRc0lITjBjaTF5WlhCc1lXTmxMV1pwY25OMEtDUm1hWEp6ZEN3Z0pHMWxiV0psY2l3Z0pIQmhjblJwWVd3cEtWeHVJQ0JBY21WMGRYSnVJQ1J5WlhOMWJIUmNibHh1THk5Y2JpQWdVR0Z5YzJWeklHRWdjM1J5YVc1bklIUnZJR1p2Y20wZ1lTQnRaV1JwWVNCeGRXVnllU0JsZUhCeVpYTnphVzl1WEc1Y2JpQWdRR0YxZEdodmNpQkZaSFZoY21SdklFSnZkV05oYzF4dVhHNGdJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQWdJQ1JsZUhCeVpYTnphVzl1SUNBdElHVjRjSEpsYzNOcGIyNGdLR2x1SUhOMGNtbHVaeWxjYmlBZ1FIUm9jbTkzY3lCRmVIQnlaWE56YVc5dUlIZHBkR2dnZEhsd1pTQmdkSGx3WlMxdlppZ2taWGh3Y21WemMybHZiaWxnSUdSbGRHVmpkR1ZrTENCemRISnBibWNnWlhod1pXTjBaV1JjYmlBZ1FIUm9jbTkzY3lCZ0pHVjRjSEpsYzNOcGIyNWdJR2x6SUcxcGMzTnBibWNnWVc0Z2IzQmxjbUYwYjNKY2JpQWdRSFJvY205M2N5QlZibXR1YjNkdUlIVnVhWFE2SUdBa2RXNXBkR0JjYmx4dUlDQkFjbVYwZFhKdUlIdFRkSEpwYm1jZ2ZDQk9kV3hzZlZ4dVhHNWNia0JtZFc1amRHbHZiaUJ3WVhKelpTMWxlSEJ5WlhOemFXOXVLQ1JsZUhCeVpYTnphVzl1S1Z4dUlDQWtiM0JsY21GMGIzSTZJRndpWENKY2JpQWdKSFpoYkhWbE9pQmNJbHdpWEc0Z0lDUmxiR1Z0Wlc1ME9pQmNJbHdpWEc0Z0lDUnlaWE4xYkhRNklGd2lYQ0pjYmlBZ0pHbHpMWGRwWkhSb09pQjBjblZsWEc0Z0lFQnBaaUIwZVhCbExXOW1LQ1JsZUhCeVpYTnphVzl1S1NBaFBTQmNJbk4wY21sdVoxd2lYRzRnSUNBZ1FIZGhjbTRnWENKRmVIQnlaWE56YVc5dUlIZHBkR2dnZEhsd1pTQmdJM3QwZVhCbExXOW1LQ1JsZUhCeVpYTnphVzl1S1gxZ0lHUmxkR1ZqZEdWa0xDQnpkSEpwYm1jZ1pYaHdaV04wWldRdVhDSmNiaUFnTHk4Z1UyVndZWEpoZEdsdVp5QjBhR1VnYjNCbGNtRjBiM0lnWm5KdmJTQjBhR1VnY21WemRDQnZaaUIwYUdVZ1pYaHdjbVZ6YzJsdmJseHVJQ0JBYVdZZ2MzUnlMWE5zYVdObEtDUmxlSEJ5WlhOemFXOXVMQ0F5TENBeUtTQTlQU0JjSWoxY0lseHVJQ0FnSUNSdmNHVnlZWFJ2Y2pvZ2MzUnlMWE5zYVdObEtDUmxlSEJ5WlhOemFXOXVMQ0F4TENBeUtWeHVJQ0FnSUNSMllXeDFaVG9nYzNSeUxYTnNhV05sS0NSbGVIQnlaWE56YVc5dUxDQXpLVnh1SUNCQVpXeHpaVnh1SUNBZ0lDUnZjR1Z5WVhSdmNqb2djM1J5TFhOc2FXTmxLQ1JsZUhCeVpYTnphVzl1TENBeExDQXhLVnh1SUNBZ0lDUjJZV3gxWlRvZ2MzUnlMWE5zYVdObEtDUmxlSEJ5WlhOemFXOXVMQ0F5S1Z4dUlDQXZMeUJEYUdWamEybHVaeUIzYUdGMElIUjVjR1VnYjJZZ1pYaHdjbVZ6YzJsdmJpQjNaWEpsSUdSbFlXeHBibWNnZDJsMGFGeHVJQ0JBYVdZZ2JXRndMV2hoY3kxclpYa29KR0p5WldGcmNHOXBiblJ6TENBa2RtRnNkV1VwWEc0Z0lDQWdKSEpsYzNWc2REb2diV0Z3TFdkbGRDZ2tZbkpsWVd0d2IybHVkSE1zSUNSMllXeDFaU2xjYmlBZ1FHVnNjMlVnYVdZZ2JXRndMV2hoY3kxclpYa29KRzFsWkdsaExXVjRjSEpsYzNOcGIyNXpMQ0FrWlhod2NtVnpjMmx2YmlsY2JpQWdJQ0FrY21WemRXeDBPaUJ0WVhBdFoyVjBLQ1J0WldScFlTMWxlSEJ5WlhOemFXOXVjeXdnSkdWNGNISmxjM05wYjI0cFhHNGdJQ0FnSkdsekxYZHBaSFJvT2lCbVlXeHpaVnh1SUNCQVpXeHpaVnh1SUNBZ0lDUnlaWE4xYkhRNklIUnZMVzUxYldKbGNpZ2tkbUZzZFdVcFhHNGdJRUJwWmlBa2FYTXRkMmxrZEdoY2JpQWdJQ0FrZFc1cGREb2dkVzVwZENna2NtVnpkV3gwS1Z4dUlDQWdJQ1JwYm5SbGNuWmhiRG9nTUZ4dUlDQWdJRUJwWmlCdFlYQXRhR0Z6TFd0bGVTZ2tkVzVwZEMxcGJuUmxjblpoYkhNc0lDUjFibWwwS1Z4dUlDQWdJQ0FnSkdsdWRHVnlkbUZzT2lCdFlYQXRaMlYwS0NSMWJtbDBMV2x1ZEdWeWRtRnNjeXdnSkhWdWFYUXBYRzRnSUNBZ1FHVnNjMlZjYmlBZ0lDQWdJRUIzWVhKdUlGd2lWVzVyYm05M2JpQjFibWwwT2lBamV5UjFibWwwZlZ3aVhHNGdJQ0FnUUdsbUlDUnZjR1Z5WVhSdmNpQTlQU0JjSWo1Y0lseHVJQ0FnSUNBZ0pHVnNaVzFsYm5RNklGd2lLRzFwYmkxM2FXUjBhRG9nSTNza2NtVnpkV3gwSUNzZ0pHbHVkR1Z5ZG1Gc2ZTbGNJbHh1SUNBZ0lFQmxiSE5sSUdsbUlDUnZjR1Z5WVhSdmNpQTlQU0JjSWp4Y0lseHVJQ0FnSUNBZ0pHVnNaVzFsYm5RNklGd2lLRzFoZUMxM2FXUjBhRG9nSTNza2NtVnpkV3gwSUMwZ0pHbHVkR1Z5ZG1Gc2ZTbGNJbHh1SUNBZ0lFQmxiSE5sSUdsbUlDUnZjR1Z5WVhSdmNpQTlQU0JjSWo0OVhDSmNiaUFnSUNBZ0lDUmxiR1Z0Wlc1ME9pQmNJaWh0YVc0dGQybGtkR2c2SUNON0pISmxjM1ZzZEgwcFhDSmNiaUFnSUNCQVpXeHpaU0JwWmlBa2IzQmxjbUYwYjNJZ1BUMGdYQ0k4UFZ3aVhHNGdJQ0FnSUNBa1pXeGxiV1Z1ZERvZ1hDSW9iV0Y0TFhkcFpIUm9PaUFqZXlSeVpYTjFiSFI5S1Z3aVhHNGdJQ0FnUUdWc2MyVmNiaUFnSUNBZ0lFQjNZWEp1SUZ3aUkzc2taWGh3Y21WemMybHZibjBnYVhNZ2JXbHpjMmx1WnlCaGJpQnZjR1Z5WVhSdmNpNWNJbHh1SUNCQVpXeHpaVnh1SUNBZ0lDUmxiR1Z0Wlc1ME9pQWtjbVZ6ZFd4MFhHNGdJRUJ5WlhSMWNtNGdKR1ZzWlcxbGJuUmNibHh1THk5Y2JpQWdVbVZ3YkdGalpYTWdkR2hsSUdacGNuTjBJRzlqWTNWeVpXNWpaU0J2WmlCMGFHVWdjM1J5YVc1bklIZHBkR2dnZEdobElISmxjR3hoWTJWdFpXNTBJSE4wY21sdVoxeHVYRzRnSUVCaGRYUm9iM0lnUldSMVlYSmtieUJDYjNWallYTmNibHh1SUNCQWNHRnlZVzBnZTFOMGNtbHVaMzBnSUNBa2MyVmhjbU5vSUNBdElGUm9aU0IyWVd4MVpTQmlaV2x1WnlCelpXRnlZMmhsWkNCbWIzSmNiaUFnUUhCaGNtRnRJSHRUZEhKcGJtZDlJQ0FnSkhKbGNHeGhZMlVnSUMwZ1ZHaGxJSEpsY0d4aFkyVnRaVzUwSUhOMGNtbHVaMXh1SUNCQWNHRnlZVzBnZTFOMGNtbHVaMzBnSUNBa2MzVmlhbVZqZENBZ0xTQlVhR1VnYzNSeWFXNW5JR0psYVc1bklISmxjR3hoWTJWa0lHOXVYRzVjYmlBZ1FISmxkSFZ5YmlCN1UzUnlhVzVuSUh3Z1RuVnNiSDFjYmx4dVhHNUFablZ1WTNScGIyNGdjM1J5TFhKbGNHeGhZMlV0Wm1seWMzUW9KSE5sWVhKamFDd2dKSEpsY0d4aFkyVXNJQ1J6ZFdKcVpXTjBLVnh1SUNBa2MyVmhjbU5vTFhOMFlYSjBPaUJ6ZEhJdGFXNWtaWGdvSkhOMVltcGxZM1FzSUNSelpXRnlZMmdwWEc0Z0lFQnBaaUFrYzJWaGNtTm9MWE4wWVhKMElEMDlJRzUxYkd4Y2JpQWdJQ0JBY21WMGRYSnVJQ1J6ZFdKcVpXTjBYRzRnSUNSeVpYTjFiSFE2SUhOMGNpMXpiR2xqWlNna2MzVmlhbVZqZEN3Z01Dd2dKSE5sWVhKamFDMXpkR0Z5ZENBdElERXBYRzRnSUNSeVpYTjFiSFE2SUNSeVpYTjFiSFFnS3lBa2NtVndiR0ZqWlZ4dUlDQWtjbVZ6ZFd4ME9pQWtjbVZ6ZFd4MElDc2djM1J5TFhOc2FXTmxLQ1J6ZFdKcVpXTjBMQ0FrYzJWaGNtTm9MWE4wWVhKMElDc2djM1J5TFd4bGJtZDBhQ2drYzJWaGNtTm9LU2xjYmlBZ1FISmxkSFZ5YmlBa2NtVnpkV3gwWEc1Y2JpOHZYRzRnSUVOaGMzUnpJR0VnYm5WdFltVnlJSFJ2SUdFZ2MzUnlhVzVuWEc1Y2JpQWdRR0YxZEdodmNpQklkV2R2SUVkcGNtRjFaR1ZzWEc1Y2JpQWdRSEJoY21GdElIdFRkSEpwYm1kOUlDQWdKSE4wY21sdVp5QWdMU0JPZFcxaVpYSWdkRzhnWW1VZ2NHRnljMlZrWEc1Y2JpQWdRSEpsZEhWeWJpQjdUR2x6ZENCOElFNTFiR3g5WEc1Y2JrQm1kVzVqZEdsdmJpQjBieTF1ZFcxaVpYSW9KSE4wY21sdVp5bGNiaUFnTHk4Z1RXRjBjbWxqWlhOY2JpQWdKSE4wY21sdVozTTZJRndpTUZ3aUlGd2lNVndpSUZ3aU1sd2lJRndpTTF3aUlGd2lORndpSUZ3aU5Wd2lJRndpTmx3aUlGd2lOMXdpSUZ3aU9Gd2lJRndpT1Z3aVhHNGdJQ1J1ZFcxaVpYSnpPaUF3SURFZ01pQXpJRFFnTlNBMklEY2dPQ0E1WEc0Z0lDOHZJRkpsYzNWc2RGeHVJQ0FrY21WemRXeDBPaUF3WEc0Z0lDUmthWFpwWkdWeU9pQXdYRzRnSUNSdGFXNTFjem9nWm1Gc2MyVmNiaUFnTHk4Z1RHOXZjR2x1WnlCMGFISnZkV2RvSUdGc2JDQmphR0Z5WVdOMFpYSnpYRzRnSUVCbWIzSWdKR2tnWm5KdmJTQXhJSFJvY205MVoyZ2djM1J5TFd4bGJtZDBhQ2drYzNSeWFXNW5LVnh1SUNBZ0lDUmphR0Z5WVdOMFpYSTZJSE4wY2kxemJHbGpaU2drYzNSeWFXNW5MQ0FrYVN3Z0pHa3BYRzRnSUNBZ0pHbHVaR1Y0T2lCcGJtUmxlQ2drYzNSeWFXNW5jeXdnSkdOb1lYSmhZM1JsY2lsY2JpQWdJQ0JBYVdZZ0pHTm9ZWEpoWTNSbGNpQTlQU0JjSWkxY0lseHVJQ0FnSUNBZ0pHMXBiblZ6T2lCMGNuVmxYRzRnSUNBZ1FHVnNjMlVnYVdZZ0pHTm9ZWEpoWTNSbGNpQTlQU0JjSWk1Y0lseHVJQ0FnSUNBZ0pHUnBkbWxrWlhJNklERmNiaUFnSUNCQVpXeHpaVnh1SUNBZ0lDQWdRR2xtSUhSNWNHVXRiMllvSkdsdVpHVjRLU0FoUFNCY0ltNTFiV0psY2x3aVhHNGdJQ0FnSUNBZ0lDUnlaWE4xYkhRNklHbG1LQ1J0YVc1MWN5d2dKSEpsYzNWc2RDQXFJQzB4TENBa2NtVnpkV3gwS1Z4dUlDQWdJQ0FnSUNCQWNtVjBkWEp1SUY5c1pXNW5kR2dvSkhKbGMzVnNkQ3dnYzNSeUxYTnNhV05sS0NSemRISnBibWNzSUNScEtTbGNiaUFnSUNBZ0lDUnVkVzFpWlhJNklHNTBhQ2drYm5WdFltVnljeXdnSkdsdVpHVjRLVnh1SUNBZ0lDQWdRR2xtSUNSa2FYWnBaR1Z5SUQwOUlEQmNiaUFnSUNBZ0lDQWdKSEpsYzNWc2REb2dKSEpsYzNWc2RDQXFJREV3WEc0Z0lDQWdJQ0JBWld4elpWeHVJQ0FnSUNBZ0lDQXZMeUJOYjNabElIUm9aU0JrWldOcGJXRnNJR1J2ZENCMGJ5QjBhR1VnYkdWbWRGeHVJQ0FnSUNBZ0lDQWtaR2wyYVdSbGNqb2dKR1JwZG1sa1pYSWdLaUF4TUZ4dUlDQWdJQ0FnSUNBa2JuVnRZbVZ5T2lBa2JuVnRZbVZ5SUM4Z0pHUnBkbWxrWlhKY2JpQWdJQ0FnSUNSeVpYTjFiSFE2SUNSeVpYTjFiSFFnS3lBa2JuVnRZbVZ5WEc0Z0lFQnlaWFIxY200Z2FXWW9KRzFwYm5WekxDQWtjbVZ6ZFd4MElDb2dMVEVzSUNSeVpYTjFiSFFwWEc1Y2JrQm1kVzVqZEdsdmJpQmZiR1Z1WjNSb0tDUnVkVzFpWlhJc0lDUjFibWwwS1Z4dUlDQWtjM1J5YVc1bmN6b2dYQ0p3ZUZ3aUlGd2lZMjFjSWlCY0ltMXRYQ0lnWENJbFhDSWdYQ0pqYUZ3aUlGd2ljR2xqWVZ3aUlGd2lhVzVjSWlCY0ltVnRYQ0lnWENKeVpXMWNJaUJjSW5CMFhDSWdYQ0p3WTF3aUlGd2laWGhjSWlCY0luWjNYQ0lnWENKMmFGd2lJRndpZG0xcGJsd2lJRndpZG0xaGVGd2lYRzRnSUNSMWJtbDBjem9nTVhCNElERmpiU0F4YlcwZ01TVWdNV05vSURGd2FXTmhJREZwYmlBeFpXMGdNWEpsYlNBeGNIUWdNWEJqSURGbGVDQXhkbmNnTVhab0lERjJiV2x1SURGMmJXRjRYRzRnSUNScGJtUmxlRG9nYVc1a1pYZ29KSE4wY21sdVozTXNJQ1IxYm1sMEtWeHVJQ0JBYVdZZ2RIbHdaUzF2Wmlna2FXNWtaWGdwSUNFOUlGd2liblZ0WW1WeVhDSmNiaUFnSUNCQWQyRnliaUJjSWxWdWEyNXZkMjRnZFc1cGRDQmdJM3NrZFc1cGRIMWdMbHdpWEc0Z0lDQWdRSEpsZEhWeWJpQm1ZV3h6WlZ4dUlDQkFjbVYwZFhKdUlDUnVkVzFpWlhJZ0tpQnVkR2dvSkhWdWFYUnpMQ0FrYVc1a1pYZ3BYRzRpTENJcVhHNGdJRzFoY21kcGJqb2dNRnh1SUNCd1lXUmthVzVuT2lBd1hHNGdJR0p2ZUMxemFYcHBibWM2SUdKdmNtUmxjaTFpYjNoY2JseHVJQ0FtT2pwaFpuUmxjaXdnSmpvNlltVm1iM0psWEc0Z0lDQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUZ4dVhHNWliMlI1WEc0Z0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDUnpiR0YwWlZ4dUlDQndZV1JrYVc1bk9pQXdYRzVjYm1GY2JpQWdkR1Y0ZEMxa1pXTnZjbUYwYVc5dU9pQnViMjVsWEc1Y2JpOHZVbVZ6WlhRZ1pteGxlR0p2ZUNCelpYUjBhVzVuY3lCM2FHVnVJSEpsYzNCdmJtUnBibWNnWW1Wc2IzY2daR1Z6YTNSdmNGeHVQWEpsYzNCdmJuTnBkbVV0YzNSaFkydGNiaUFnSzIxbFpHbGhLRndpUEQxMFlXSnNaWFJjSWlsY2JpQWdJQ0JtYkdWNExXWnNiM2M2SUdOdmJIVnRibHh1SWl3aUx5OGdWR2hsSUhSaFlteGxjeUJ6ZEdGeWRDQjBieUJzYjI5cklHWjFaMng1SUdGMElHRnliM1Z1WkNBM01EQndlQ3dnYzI4Z2JHVjBKM01nYzNSaGNuUWdjbVZ6Y0c5dVpHbHVaeUIwYUdWeVpWeHVKSFJoWW14bExXSnlaV0ZyT2lCY0lqdzlOekF3Y0hoY0lseHVYRzUwWVdKc1pWeHVYSFJ0WVhKbmFXNDZJREFnTUNBeExqVmxiVnh1WEhSM2FXUjBhRG9nTVRBd0pWeHVYRzUwY2x4dUlDQmliM0prWlhJdFltOTBkRzl0T2lBeGNIZ2djMjlzYVdRZ0pHTnNiM1ZrWEc1Y2JpQWdLMjFsWkdsaEtDUjBZV0pzWlMxaWNtVmhheWxjYmlBZ0lDQnRZWEpuYVc0dGRHOXdPaUF3SUNGcGJYQnZjblJoYm5RN1hHNWNiaUFnSUNBbU9tWnBjbk4wTFdOb2FXeGtYRzRnSUNBZ0lDQmliM0prWlhJdGRHOXdPaUF4Y0hnZ2MyOXNhV1FnSkdOc2IzVmtYRzVjYmlBZ0pqcHVkR2d0WTJocGJHUW9aWFpsYmlsY2JpQWdJQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlPaUFrYzNSbFlXMWNibHh1ZEdSY2JpQWdkbVZ5ZEdsallXd3RZV3hwWjI0NklIUnZjRnh1SUNCd1lXUmthVzVuT2lBeE1IQjRJRFZ3ZUZ4dVhHNGdJQ3R0WldScFlTZ2tkR0ZpYkdVdFluSmxZV3NwWEc0Z0lDQWdiV0Z5WjJsdUxYUnZjRG9nTUNBaGFXMXdiM0owWVc1ME8xeHVJQ0FnSUhCdmMybDBhVzl1T2lCeVpXeGhkR2wyWlZ4dUlDQWdJSEJoWkdScGJtY3RiR1ZtZERvZ05EQWxYRzVjYmlBZ0lDQW1PbUpsWm05eVpWeHVJQ0FnSUNBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbFhHNGdJQ0FnSUNCMGIzQTZJRFp3ZUZ4dUlDQWdJQ0FnYkdWbWREb2dObkI0WEc0Z0lDQWdJQ0IzYVdSMGFEb2dOREFsWEc0Z0lDQWdJQ0J3WVdSa2FXNW5MWEpwWjJoME9pQXhNSEI0WEc0Z0lDQWdJQ0IzYUdsMFpTMXpjR0ZqWlRvZ2JtOTNjbUZ3WEc0Z0lDQWdJQ0JtYjI1MExYZGxhV2RvZERvZ0pITmxiV2xpYjJ4a1hHNWNibHh1SUNBZ0lDWTZiblJvTFc5bUxYUjVjR1VvTVNsY2JpQWdJQ0FnSUNZNlltVm1iM0psWEc0Z0lDQWdJQ0FnSUdOdmJuUmxiblE2SUZ3aVEybDBlVG9nWENKY2JpQWdJQ0FtT201MGFDMXZaaTEwZVhCbEtESXBYRzRnSUNBZ0lDQW1PbUpsWm05eVpWeHVJQ0FnSUNBZ0lDQmpiMjUwWlc1ME9pQmNJa0ZrWkhKbGMzTTZJRndpWEc0Z0lDQWdKanB1ZEdndGIyWXRkSGx3WlNnektWeHVJQ0FnSUNBZ0pqcGlaV1p2Y21WY2JpQWdJQ0FnSUNBZ1kyOXVkR1Z1ZERvZ1hDSlFhRzl1WlRvZ1hDSmNibHh1ZEdobFlXUmNiaUFnWW1GamEyZHliM1Z1WkMxamIyeHZjam9nSkdOc2IzVmtYRzVjYmlBZ2RISmNiaUFnSUNBdkwwaHBaR1VnZEdobElIUm9aV0ZrSUdsdVptOXliV0YwYVc5dUlHbHVJR0Z1SUdGalkyVnpjMmxpYkdVZ2QyRjVYRzVjYmlBZ0lDQXJiV1ZrYVdFb0pIUmhZbXhsTFdKeVpXRnJLVnh1SUNBZ0lDQWdjRzl6YVhScGIyNDZJR0ZpYzI5c2RYUmxYRzRnSUNBZ0lDQjBiM0E2SUMwNU9UazVjSGhjYmlBZ0lDQWdJR3hsWm5RNklDMDVPVGs1Y0hoY2JseHVJQ0IwYUZ4dUlDQWdJR1p2Ym5RdGQyVnBaMmgwT2lBa2MyVnRhV0p2YkdSY2JpQWdJQ0IwWlhoMExXRnNhV2R1T2lCc1pXWjBYRzRnSUNBZ2NHRmtaR2x1WnpvZ05YQjRYRzVjYm5SaFlteGxMQ0IwYUdWaFpDd2dkR0p2Wkhrc0lIUm9MQ0IwWkN3Z2RISmNiaUFnSzIxbFpHbGhLQ1IwWVdKc1pTMWljbVZoYXlsY2JpQWdJQ0JrYVhOd2JHRjVPaUJpYkc5amExeHVJaXdpTG01aGRpMXRhVzV2Y2x4dUlDQmthWE53YkdGNU9pQmliRzlqYTF4dUlDQjBaWGgwTFdGc2FXZHVPaUJ5YVdkb2RGeHVYRzRnSUNaZlgyTnZiblJoYVc1bGNseHVJQ0FnSUdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNSM2FHbDBaVnh1SUNBZ0lHSnZjbVJsY2kxc1pXWjBPaUF4Y0hnZ2MyOXNhV1FnSkdKdmNtUmxja052Ykc5eVhHNGdJQ0FnWW05eVpHVnlMWEpwWjJoME9pQXhjSGdnYzI5c2FXUWdKR0p2Y21SbGNrTnZiRzl5WEc0Z0lDQWdiV0Z5WjJsdU9pQXdJR0YxZEc5Y2JpQWdJQ0J3WVdSa2FXNW5MWEpwWjJoME9pQXhMalZ5WlcxY2JpQWdJQ0J3WVdSa2FXNW5MWFJ2Y0RvZ01YSmxiVnh1SUNBZ0lHMWhlQzEzYVdSMGFEb2dNVEl3TUhCNFhHNWNiaUFnSUNBcmJXVmthV0VvWENJOFBYUmhZbXhsZEZ3aUtWeHVJQ0FnSUNBZ0x5OWthWE53YkdGNU9pQnViMjVsWEc0Z0lDQWdJQ0IwWlhoMExXRnNhV2R1T2lCalpXNTBaWEpjYmx4dUlDQnNhVnh1SUNBZ0lHUnBjM0JzWVhrNklHbHViR2x1WlMxaWJHOWphMXh1WEc0Z0lDQWdKanBoWm5SbGNseHVJQ0FnSUNBZ1pHbHpjR3hoZVRvZ2FXNXNhVzVsTFdKc2IyTnJYRzRnSUNBZ0lDQmpiMjUwWlc1ME9pQW5JSHdnSjF4dUlDQWdJQ0FnWTI5c2IzSTZJQ1JuY21WbGJseHVJQ0FnSUNBZ2JXRnlaMmx1T2lBd0lESndlRnh1WEc0Z0lDQWdKanB1ZEdndFkyaHBiR1FvTXlsY2JseHVJQ0FnSUNBZ0pqcGhablJsY2x4dUlDQWdJQ0FnSUNCamIyNTBaVzUwT2lBbklDZGNiaUFnSUNBbU9teGhjM1F0WTJocGJHUmNiaUFnSUNBZ0lHRmNiaUFnSUNBZ0lDQWdabTl1ZEMxM1pXbG5hSFE2WW05c1pGeHVYRzRnSUNaZlgyeHBibXRjYmlBZ0lDQmpiMnh2Y2pvZ0pHTm9ZWEpqYjJGc1hHNGdJQ0FnWkdsemNHeGhlVG9nYVc1c2FXNWxMV0pzYjJOclhHNGdJQ0FnY0dGa1pHbHVaem9nTUNBd2NtVnRJREFnTGpWeVpXMWNibHh1SUNBZ0lDWTZhRzkyWlhKY2JpQWdJQ0FnSUdOdmJHOXlPaUFrWjNKbFpXNWNibHh1TG5OcGRHVXRiV0Z3WEc0Z0lHRmNiaUFnSUNCamIyeHZjam9rWTJoaGNtTnZZV3hjYmlBZ0lDQW1PbWh2ZG1WeVhHNGdJQ0FnSUNCamIyeHZjam9nSkdkeVpXVnVYRzVjYmlJc0lpOHZJR2hsWVdSbGNpQnphWHBsWEc0a2FHVmhaR1Z5TFdobGFXZG9kQzFUT2lBMU1IQjRYRzRrYUdWaFpHVnlMV2hsYVdkb2RDMU1PaUE0TUhCNFhHNWNiaTh2SUU1aGRtbG5ZWFJwYjI0Z2MybDZaVnh1Skc1aGRpMTNhV1IwYUMxVE9pQXlOakJ3ZUZ4dVhHNHZMeUJUWldGeVkyZ2djMmw2WlZ4dUpITmxZWEpqYUMxb1pXbG5hSFF0VXpvZ05UQndlRnh1SkhObFlYSmphQzFvWldsbmFIUXRURG9nTVRJd2NIaGNibHh1THk4Z2VpMXBibVJsZUZ4dUpHSmxiRzkzTFdOdmJuUmxiblE2SURGY2JpUmpiMjUwWlc1ME9pQXlYRzRrWVdKdmRtVXRZMjl1ZEdWdWREb2dNMXh1WEc0dkwxeHVJQ0JjSW5Cb2IyNWxYQ0k2SURNeU1IQjRMRnh1SUNCY0luUmhZbXhsZEZ3aU9pQTNOamh3ZUN4Y2JpQWdYQ0prWlhOcmRHOXdYQ0k2SURFd01qUndlQ2xjYmx4dVhHNHZMeUJpY21WaGEzQnZhVzUwYzF4dUlDQWtVem9nTkRnd2NIaGNiaUFnSkUwNklEYzJPSEI0WEc0Z0lDUk1PaUF4TURJMGNIaGNiaUFnSkcxaGVFdzZJQ1JNSUMwZ01YQjRYRzVjYmx4dUx5OWNiaUFnSzAxUktHMWhlRXdwWEc0Z0lDdHRaV1JwWVNoY0lqeGtaWE5yZEc5d1hDSXBYRzVjYmk4dlhHNGdJQ3ROVVNoTUtWeHVJQ0FyYldWa2FXRW9YQ0krWkdWemEzUnZjRndpS1Z4dVhHNWNiaTh2SUhOMWNHVnlJR3hwWjJoMElHZHlhV1FnTFNCcGRDQjNiM0pyY3lCM2FYUm9JSFJvWlNBdVkyUXRZMjl1ZEdGcGJtVnlJR05zWVhOeklHbHVjMmxrWlNCemRIbHNaUzV6WTNOelhHNWNiajFqYjJ4MWJXNG9KSEJsY21ObGJuUmhaMlVzSUNSbWJHOWhkQzFrYVhKbFkzUnBiMjQ2SUd4bFpuUXBYRzRnSUhkcFpIUm9PaUF4TURBbElDb2dKSEJsY21ObGJuUmhaMlZjYmlBZ1pteHZZWFE2SUNSbWJHOWhkQzFrYVhKbFkzUnBiMjVjYmx4dVBXTnNaV0Z5Wm1sNFhHNGdJQ1k2WVdaMFpYSmNiaUFnSUNCamIyNTBaVzUwT2lCY0lsd2lYRzRnSUNBZ1pHbHpjR3hoZVRvZ2RHRmliR1ZjYmlBZ0lDQmpiR1ZoY2pvZ1ltOTBhRnh1WEc1aExtTmtMVzVoZGkxcGRHVnRYRzRnSUNZNmFHOTJaWEpjYmlBZ0lDQnBiV2RjYmlBZ0lDQWdJRzl3WVdOcGRIazZJQzQzSUNGcGJYQnZjblJoYm5SY2JpQWdJQ0JvTTF4dUlDQWdJQ0FnWTI5c2IzSTZJQ1J1YVdkb2RHZHlaV1Z1SUNGcGJYQnZjblJoYm5SY2JseHVYRzR2TDFCeWFXMWhjbmtnYzNSNWJHVmNibHh1WEc1aWIyUjVYRzRnSUN0dFpXUnBZU2hjSWp4a1pYTnJkRzl3WENJcFhHNGdJQ0FnTHk4Z2JHRjViM1YwSUcxcGVHbHVjeUJwYm5OcFpHVWdjR0Z5ZEdsaGJITWdQaUJmYkdGNWIzVjBMbk5qYzNOY2JpQWdJQ0FtTG01aGRpMXZiaTFzWldaMExtOTJaWEptYkc5M0xXaHBaR1JsYmx4dUlDQWdJQ0FnYjNabGNtWnNiM2M2SUdocFpHUmxibHh1WEc1cGJuQjFkRnQwZVhCbFBWd2ljMlZoY21Ob1hDSmRPam90YlhNdFkyeGxZWEpjYmlBZ0x5OGdjbVZ0YjNabGN5QmpiRzl6WlNCcFkyOXVJQzBnU1VWY2JpQWdaR2x6Y0d4aGVUb2dibTl1WlZ4dVhHNXBibkIxZEZ0MGVYQmxQVndpYzJWaGNtTm9YQ0pkT2pvdGQyVmlhMmwwTFhObFlYSmphQzFrWldOdmNtRjBhVzl1TEZ4dWFXNXdkWFJiZEhsd1pUMWNJbk5sWVhKamFGd2lYVG82TFhkbFltdHBkQzF6WldGeVkyZ3RZMkZ1WTJWc0xXSjFkSFJ2Yml4Y2JtbHVjSFYwVzNSNWNHVTlYQ0p6WldGeVkyaGNJbDA2T2kxM1pXSnJhWFF0YzJWaGNtTm9MWEpsYzNWc2RITXRZblYwZEc5dUxGeHVhVzV3ZFhSYmRIbHdaVDFjSW5ObFlYSmphRndpWFRvNkxYZGxZbXRwZEMxelpXRnlZMmd0Y21WemRXeDBjeTFrWldOdmNtRjBhVzl1WEc0Z0lHUnBjM0JzWVhrNklHNXZibVZjYmx4dUx5b2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFYRzRnS2sxaGFXNGdZMjl0Y0c5dVpXNTBjMXh1SUNwY2JpQXFMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwcVhHNWNiaTVqWkMxdFlXbHVMV052Ym5SbGJuUXNYRzR1WTJRdGJXRnBiaTFvWldGa1pYSmNiaUFnTHlvZ1JtOXlZMlVnU0dGeVpIZGhjbVVnUVdOalpXeGxjbUYwYVc5dUlHbHVJRmRsWWt0cGRGeHVJQ0IwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlZvb01DbGNiaUFnZDJsc2JDMWphR0Z1WjJVNklIUnlZVzV6Wm05eWJWeHVYRzRnSUhWc1hHNGdJQ0FnYkdsemRDMXpkSGxzWlRvZ2JtOXVaVnh1WEc0dVkyUXRiV0ZwYmkxamIyNTBaVzUwWEc0Z0lIQnZjMmwwYVc5dU9pQnlaV3hoZEdsMlpWeHVJQ0IwY21GdWMybDBhVzl1T2lCMGNtRnVjMlp2Y20wZ01DNHpjMXh1WEc0Z0lDdHRaV1JwWVNoY0lqeGtaWE5yZEc5d1hDSXBYRzRnSUNBZ0ppNXVZWFl0YVhNdGRtbHphV0pzWlZ4dUlDQWdJQ0FnZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdWWUtDMGtibUYyTFhkcFpIUm9MVk1wWEc1Y2JpQWdJQ0F1Ym1GMkxXOXVMV3hsWm5RZ0ppNXVZWFl0YVhNdGRtbHphV0pzWlZ4dUlDQWdJQ0FnZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdWWUtDUnVZWFl0ZDJsa2RHZ3RVeWxjYmx4dUxtTmtMVzFoYVc0dGFHVmhaR1Z5WEc0Z0lHWnZiblF0Wm1GdGFXeDVPaUFrYzJWeWFXWmNiaUFnY0c5emFYUnBiMjQ2SUhKbGJHRjBhWFpsWEc0Z0lIUnlZVzV6YVhScGIyNDZJSFJ5WVc1elptOXliU0F3TGpOelhHNWNiaUFnSzIxbFpHbGhLRndpUEdSbGMydDBiM0JjSWlsY2JpQWdJQ0FtTG01aGRpMXBjeTEyYVhOcFlteGxYRzRnSUNBZ0lDQXZMM1J5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsV0NndEpHNWhkaTEzYVdSMGFDMVRLVnh1SUNBZ0lDQWdkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1ZZS0RBcFhHNWNiaUFnSUNBdWJtRjJMVzl1TFd4bFpuUWdKaTV1WVhZdGFYTXRkbWx6YVdKc1pWeHVJQ0FnSUNBZ2RISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVllLQ1J1WVhZdGQybGtkR2d0VXlsY2JseHVMbU5rTFcxaGFXNHRZMjl1ZEdWdWRGeHVJQ0F2TDBOSVFVNUhSVVJjYmlBZ0x5OWlZV05yWjNKdmRXNWtPaUFrWTJ4dmRXUmNiaUFnYldsdUxXaGxhV2RvZERvZ01UQXdkbWhjYmlBZ2VpMXBibVJsZURvZ0pHTnZiblJsYm5SY2JseHVMbU5rTFcxaGFXNHRhR1ZoWkdWeVhHNGdJR2hsYVdkb2REb2dKR2hsWVdSbGNpMW9aV2xuYUhRdFUxeHVJQ0JpWVdOclozSnZkVzVrT2lBa2QyaHBkR1ZjYmlBZ2VpMXBibVJsZURvZ0pHRmliM1psTFdOdmJuUmxiblJjYmx4dUlDQXZMME5JUVU1SFJVUmNiaUFnTHk5aWIzZ3RjMmhoWkc5M09pQXdJREZ3ZUNBMWNIZ2djbWRpWVNneE1EQXNNVEF3TERFd01Dd2dMalVwWEc0Z0lHSnZjbVJsY2kxaWIzUjBiMjA2SURGd2VDQnpiMnhwWkNBa1kyeHZkV1JjYmx4dUlDQXVibUYyTFdsekxXWnBlR1ZrSUNaY2JpQWdJQ0F2S2lCaFpHUWdMbTVoZGkxcGN5MW1hWGhsWkNCamJHRnpjeUIwYnlCaWIyUjVJR2xtSUhsdmRTQjNZVzUwSUdFZ1ptbDRaV1FnYm1GMmFXZGhkR2x2YmlCdmJpQStJREV3TWpSd2VGeHVJQ0FnSUhCdmMybDBhVzl1T2lCbWFYaGxaRnh1SUNBZ0lIUnZjRG9nTUZ4dUlDQWdJR3hsWm5RNklEQmNiaUFnSUNCM2FXUjBhRG9nTVRBd0pWeHVYRzRnSUN0dFpXUnBZU2hjSWo1a1pYTnJkRzl3WENJcFhHNGdJQ0FnYUdWcFoyaDBPaUFrYUdWaFpHVnlMV2hsYVdkb2RDMU1YRzRnSUNBZ0syTnNaV0Z5Wm1sNFhHNWNiaTVqWkMxc2IyZHZYRzRnSUhCdmMybDBhVzl1T2lCaFluTnZiSFYwWlZ4dUlDQjBiM0E2SURFeWNIaGNiaUFnYkdWbWREb2dOU1ZjYmx4dUlDQnBiV2RjYmlBZ0lDQmthWE53YkdGNU9pQmliRzlqYTF4dVhHNGdJQ3R0WldScFlTaGNJanhrWlhOcmRHOXdYQ0lwWEc0Z0lDQWdMbTVoZGkxdmJpMXNaV1owSUNaY2JpQWdJQ0FnSUd4bFpuUTZJR0YxZEc5Y2JpQWdJQ0FnSUhKcFoyaDBPaUExSlZ4dVhHNGdJQ3R0WldScFlTaGNJajVrWlhOcmRHOXdYQ0lwWEc0Z0lDQWdkRzl3T2lBeU5uQjRYRzRnSUNBZ2JHVm1kRG9nTkdWdFhHNWNiaTVqWkMxb1pXRmtaWEl0WW5WMGRHOXVjMXh1SUNCd2IzTnBkR2x2YmpvZ1lXSnpiMngxZEdWY2JpQWdaR2x6Y0d4aGVUb2dhVzVzYVc1bExXSnNiMk5yWEc0Z0lIUnZjRG9nTTNCNFhHNGdJSEpwWjJoME9pQTFKVnh1WEc0Z0lHeHBYRzRnSUNBZ1pHbHpjR3hoZVRvZ2FXNXNhVzVsTFdKc2IyTnJYRzVjYmlBZ0syMWxaR2xoS0Z3aVBHUmxjMnQwYjNCY0lpbGNiaUFnSUNBdWJtRjJMVzl1TFd4bFpuUWdKbHh1SUNBZ0lDQWdjbWxuYUhRNklHRjFkRzljYmlBZ0lDQWdJR3hsWm5RNklEVWxYRzRnSUNBZ0lDQnNhVnh1SUNBZ0lDQWdJQ0JtYkc5aGREb2djbWxuYUhSY2JseHVJQ0FyYldWa2FXRW9YQ0krWkdWemEzUnZjRndpS1Z4dUlDQWdJSFJ2Y0RvZ01YSmxiVnh1SUNBZ0lISnBaMmgwT2lBeGNtVnRYRzVjYmk1alpDMXpaV0Z5WTJndGRISnBaMmRsY2l4Y2JpNWpaQzF1WVhZdGRISnBaMmRsY2x4dUlDQndiM05wZEdsdmJqb2djbVZzWVhScGRtVmNiaUFnWkdsemNHeGhlVG9nWW14dlkydGNiaUFnZDJsa2RHZzZJRFEwY0hoY2JpQWdhR1ZwWjJoME9pQTBOSEI0WEc0Z0lHOTJaWEptYkc5M09pQm9hV1JrWlc1Y2JpQWdkMmhwZEdVdGMzQmhZMlU2SUc1dmQzSmhjRnh1SUNBdktpQm9hV1JsSUhSbGVIUmNiaUFnWTI5c2IzSTZJSFJ5WVc1emNHRnlaVzUwWEc0Z0lIb3RhVzVrWlhnNklDUmhZbTkyWlMxamIyNTBaVzUwWEc1Y2JpNWpaQzF6WldGeVkyZ3RkSEpwWjJkbGNseHVJQ0FtT2pwaVpXWnZjbVVzSUNZNk9tRm1kR1Z5WEc0Z0lDQWdMeW9nYzJWaGNtTm9JR2xqYjI1Y2JpQWdJQ0JqYjI1MFpXNTBPaUFuSjF4dUlDQWdJSEJ2YzJsMGFXOXVPaUJoWW5OdmJIVjBaVnh1SUNBZ0lIUnlZVzV6YVhScGIyNDZJRzl3WVdOcGRIa2dNQzR6YzF4dUlDQWdJQzhxSUVadmNtTmxJRWhoY21SM1lYSmxJRUZqWTJWc1pYSmhkR2x2YmlCcGJpQlhaV0pMYVhSY2JpQWdJQ0IwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlZvb01DbGNiaUFnSUNCaVlXTnJabUZqWlMxMmFYTnBZbWxzYVhSNU9pQm9hV1JrWlc1Y2JseHVJQ0FtT2pwaVpXWnZjbVZjYmlBZ0lDQXZLaUJzWlc1elhHNGdJQ0FnZEc5d09pQXhNWEI0WEc0Z0lDQWdiR1ZtZERvZ01URndlRnh1SUNBZ0lIZHBaSFJvT2lBeE9IQjRYRzRnSUNBZ2FHVnBaMmgwT2lBeE9IQjRYRzRnSUNBZ1ltOXlaR1Z5TFhKaFpHbDFjem9nTlRBbFhHNGdJQ0FnWW05eVpHVnlPaUF6Y0hnZ2MyOXNhV1FnSkc1cFoyaDBaM0psWlc1Y2JseHVJQ0FtT2pwaFpuUmxjbHh1SUNBZ0lDOHFJR2hoYm1Sc1pWeHVJQ0FnSUdobGFXZG9kRG9nTTNCNFhHNGdJQ0FnZDJsa2RHZzZJRGh3ZUZ4dUlDQWdJR0poWTJ0bmNtOTFibVE2SUNSdWFXZG9kR2R5WldWdVhHNGdJQ0FnWW05MGRHOXRPaUF4TkhCNFhHNGdJQ0FnY21sbmFIUTZJREV4Y0hoY2JpQWdJQ0IwY21GdWMyWnZjbTA2SUhKdmRHRjBaU2cwTldSbFp5bGNiaUFnYzNCaGJseHVJQ0FnSUM4cUlHTnZiblJoYVc1bGNpQm1iM0lnZEdobElGZ2dhV052Ymx4dUlDQWdJSEJ2YzJsMGFXOXVPaUJoWW5OdmJIVjBaVnh1SUNBZ0lHaGxhV2RvZERvZ01UQXdKVnh1SUNBZ0lIZHBaSFJvT2lBeE1EQWxYRzRnSUNBZ2RHOXdPaUF3WEc0Z0lDQWdiR1ZtZERvZ01GeHVJQ0J6Y0dGdU9qcGlaV1p2Y21Vc0lITndZVzQ2T21GbWRHVnlYRzRnSUNBZ0x5b2dZMnh2YzJVZ2FXTnZibHh1SUNBZ0lHTnZiblJsYm5RNklDY25YRzRnSUNBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbFhHNGdJQ0FnWkdsemNHeGhlVG9nYVc1c2FXNWxMV0pzYjJOclhHNGdJQ0FnYUdWcFoyaDBPaUF6Y0hoY2JpQWdJQ0IzYVdSMGFEb2dNakp3ZUZ4dUlDQWdJSFJ2Y0RvZ05UQWxYRzRnSUNBZ2JXRnlaMmx1TFhSdmNEb2dMVEp3ZUZ4dUlDQWdJR3hsWm5RNklEVXdKVnh1SUNBZ0lHMWhjbWRwYmkxc1pXWjBPaUF0TVRGd2VGeHVJQ0FnSUdKaFkydG5jbTkxYm1RNklDUnVhV2RvZEdkeVpXVnVYRzRnSUNBZ2IzQmhZMmwwZVRvZ01GeHVJQ0FnSUM4cUlFWnZjbU5sSUVoaGNtUjNZWEpsSUVGalkyVnNaWEpoZEdsdmJpQnBiaUJYWldKTGFYUmNiaUFnSUNCMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpWb29NQ2xjYmlBZ0lDQmlZV05yWm1GalpTMTJhWE5wWW1sc2FYUjVPaUJvYVdSa1pXNWNiaUFnSUNCMGNtRnVjMmwwYVc5dU9pQnZjR0ZqYVhSNUlEQXVNM01zSUhSeVlXNXpabTl5YlNBd0xqTnpYRzVjYmlBZ2MzQmhiam82WW1WbWIzSmxYRzRnSUNBZ2RISmhibk5tYjNKdE9pQnliM1JoZEdVb05EVmtaV2NwWEc1Y2JpQWdjM0JoYmpvNllXWjBaWEpjYmlBZ0lDQjBjbUZ1YzJadmNtMDZJSEp2ZEdGMFpTZ3RORFZrWldjcFhHNWNiaUFnSmk1elpXRnlZMmd0YVhNdGRtbHphV0pzWlZ4dUlDQWdJQ1k2T21KbFptOXlaU3dnSmpvNllXWjBaWEpjYmlBZ0lDQWdJQzhxSUdocFpHVWdjMlZoY21Ob0lHbGpiMjVjYmlBZ0lDQWdJRzl3WVdOcGRIazZJREJjYmlBZ0lDQnpjR0Z1T2pwaVpXWnZjbVVzSUhOd1lXNDZPbUZtZEdWeVhHNGdJQ0FnSUNBdktpQnphRzkzSUdOc2IzTmxJR2xqYjI1Y2JpQWdJQ0FnSUc5d1lXTnBkSGs2SURGY2JpQWdJQ0J6Y0dGdU9qcGlaV1p2Y21WY2JpQWdJQ0FnSUhSeVlXNXpabTl5YlRvZ2NtOTBZWFJsS0RFek5XUmxaeWxjYmlBZ0lDQnpjR0Z1T2pwaFpuUmxjbHh1SUNBZ0lDQWdkSEpoYm5ObWIzSnRPaUJ5YjNSaGRHVW9ORFZrWldjcFhHNWNiaTVqWkMxdVlYWXRkSEpwWjJkbGNseHVJQ0J6Y0dGdUxDQnpjR0Z1T2pwaVpXWnZjbVVzSUhOd1lXNDZPbUZtZEdWeVhHNGdJQ0FnTHlvZ2FHRnRZblZ5WjJWeUlHbGpiMjRnYVc0Z1ExTlRYRzRnSUNBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbFhHNGdJQ0FnWkdsemNHeGhlVG9nYVc1c2FXNWxMV0pzYjJOclhHNGdJQ0FnYUdWcFoyaDBPaUF6Y0hoY2JpQWdJQ0IzYVdSMGFEb2dNalJ3ZUZ4dUlDQWdJR0poWTJ0bmNtOTFibVE2SUNSdWFXZG9kR2R5WldWdVhHNGdJSE53WVc1Y2JpQWdJQ0F2S2lCc2FXNWxJR2x1SUhSb1pTQmpaVzUwWlhKY2JpQWdJQ0J3YjNOcGRHbHZiam9nWVdKemIyeDFkR1ZjYmlBZ0lDQjBiM0E2SURVd0pWeHVJQ0FnSUhKcFoyaDBPaUF4TUhCNFhHNGdJQ0FnYldGeVoybHVMWFJ2Y0RvZ0xUSndlRnh1SUNBZ0lIUnlZVzV6YVhScGIyNDZJR0poWTJ0bmNtOTFibVFnTUM0emN5QXdMak56WEc0Z0lITndZVzQ2T21KbFptOXlaU3dnYzNCaGJqbzZZV1owWlhKY2JpQWdJQ0F2S2lCdmRHaGxjaUF5SUd4cGJtVnpYRzRnSUNBZ1kyOXVkR1Z1ZERvZ0p5ZGNiaUFnSUNCeWFXZG9kRG9nTUZ4dUlDQWdJQzhxSUVadmNtTmxJRWhoY21SM1lYSmxJRUZqWTJWc1pYSmhkR2x2YmlCcGJpQlhaV0pMYVhSY2JpQWdJQ0IwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlZvb01DbGNiaUFnSUNCaVlXTnJabUZqWlMxMmFYTnBZbWxzYVhSNU9pQm9hV1JrWlc1Y2JpQWdJQ0IwY21GdWMyWnZjbTB0YjNKcFoybHVPaUF3SlNBMU1DVmNiaUFnSUNCMGNtRnVjMmwwYVc5dU9pQjBjbUZ1YzJadmNtMGdNQzR6Y3lBd0xqTnpYRzRnSUhOd1lXNDZPbUpsWm05eVpWeHVJQ0FnSUM4cUlHMWxiblVnYVdOdmJpQjBiM0FnYkdsdVpWeHVJQ0FnSUhSdmNEb2dMVFp3ZUZ4dUlDQnpjR0Z1T2pwaFpuUmxjbHh1SUNBZ0lDOHFJRzFsYm5VZ2FXTnZiaUJpYjNSMGIyMGdiR2x1WlZ4dUlDQWdJSFJ2Y0RvZ05uQjRYRzRnSUNZdWJtRjJMV2x6TFhacGMybGliR1ZjYmlBZ0lDQnpjR0Z1WEc0Z0lDQWdJQ0F2S2lCb2FXUmxJR3hwYm1VZ2FXNGdkR2hsSUdObGJuUmxjbHh1SUNBZ0lDQWdZbUZqYTJkeWIzVnVaRG9nY21kaVlTZ2tibWxuYUhSbmNtVmxiaXdnTUNsY2JpQWdJQ0J6Y0dGdU9qcGlaV1p2Y21Vc0lITndZVzQ2T21GbWRHVnlYRzRnSUNBZ0lDQXZLaUJyWldWd0lIWnBjMmxpYkdVZ2IzUm9aWElnTWlCc2FXNWxjMXh1SUNBZ0lDQWdZbUZqYTJkeWIzVnVaRG9nY21kaVlTZ2tibWxuYUhSbmNtVmxiaXdnTVNsY2JpQWdJQ0J6Y0dGdU9qcGlaV1p2Y21WY2JpQWdJQ0FnSUhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbFdDZzBjSGdwSUhSeVlXNXpiR0YwWlZrb0xUTndlQ2tnY205MFlYUmxLRFExWkdWbktWeHVJQ0FnSUhOd1lXNDZPbUZtZEdWeVhHNGdJQ0FnSUNCMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpWZ29OSEI0S1NCMGNtRnVjMnhoZEdWWktESndlQ2tnY205MFlYUmxLQzAwTldSbFp5bGNiaUFnSzIxbFpHbGhLRndpUG1SbGMydDBiM0JjSWlsY2JpQWdJQ0JrYVhOd2JHRjVPaUJ1YjI1bFhHNWNibHh1TG1Oa0xYQnlhVzFoY25rdGJtRjJMRnh1TG1Oa0xYQnlhVzFoY25rdGJtRjJJSFZzWEc0Z0lIQnZjMmwwYVc5dU9pQm1hWGhsWkZ4dUlDQjBiM0E2SURCY2JpQWdjbWxuYUhRNklEQmNiaUFnYUdWcFoyaDBPaUF4TURBbFhHNGdJSGRwWkhSb09pQWtibUYyTFhkcFpIUm9MVk5jYmlBZ1ltRmphMmR5YjNWdVpEb2dKRzVwWjJoMFozSmxaVzVjYmlBZ2IzWmxjbVpzYjNjNklHRjFkRzljYmlBZ0xYZGxZbXRwZEMxdmRtVnlabXh2ZHkxelkzSnZiR3hwYm1jNklIUnZkV05vWEc0Z0lIb3RhVzVrWlhnNklDUmlaV3h2ZHkxamIyNTBaVzUwWEc1Y2JpQWdMeW9nUm05eVkyVWdTR0Z5WkhkaGNtVWdRV05qWld4bGNtRjBhVzl1SUdsdUlGZGxZa3RwZEZ4dUlDQjBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaVm9vTUNsY2JpQWdkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1ZZS0RBcFhHNGdJSFJ5WVc1emFYUnBiMjQ2SUhSeVlXNXpabTl5YlNBd0xqTnpYRzVjYmlBZ1lWeHVJQ0FnSUdScGMzQnNZWGs2SUdKc2IyTnJYRzRnSUNBZ1ptOXVkQzF6YVhwbE9pQXhMakp5WlcxY2JpQWdJQ0JvWldsbmFIUTZJRFV3Y0hoY2JpQWdJQ0JzYVc1bExXaGxhV2RvZERvZ05UQndlRnh1SUNBZ0lIQmhaR1JwYm1jNklEQWdNakJ3ZUZ4dUlDQWdJR052Ykc5eU9pQWtkMmhwZEdWY2JpQWdJQ0F0ZDJWaWEybDBMV1p2Ym5RdGMyMXZiM1JvYVc1bk9pQmhiblJwWVd4cFlYTmxaRnh1SUNBZ0lDMXRiM290YjNONExXWnZiblF0YzIxdmIzUm9hVzVuT2lCbmNtRjVjMk5oYkdWY2JpQWdJQ0J2ZG1WeVpteHZkem9nYUdsa1pHVnVYRzRnSUNBZ2RHVjRkQzF2ZG1WeVpteHZkem9nWld4c2FYQnphWE5jYmlBZ0lDQjNhR2wwWlMxemNHRmpaVG9nYm05M2NtRndYRzRnSUNBZ1ltOXlaR1Z5TFdKdmRIUnZiVG9nTVhCNElITnZiR2xrSUd4cFoyaDBaVzRvSkc1cFoyaDBaM0psWlc0c0lEVWxLVnh1SUNBZ0lIUnlZVzV6Wm05eWJUb2dkSEpoYm5Oc1lYUmxXaWd3S1Z4dUlDQWdJSGRwYkd3dFkyaGhibWRsT2lCMGNtRnVjMlp2Y20wc0lHOXdZV05wZEhsY2JpQWdJQ0IwY21GdWMybDBhVzl1T2lCMGNtRnVjMlp2Y20wZ01DNHpjeXdnYjNCaFkybDBlU0F3TGpOelhHNWNiaUFnSmk1cGN5MW9hV1JrWlc1Y2JpQWdJQ0F2S2lCelpXTnZibVJoY25rZ2JtRjJhV2RoZEdsdmJuTWdhR2xrWkdWdUlHSjVJR1JsWm1GMWJIUmNiaUFnSUNCMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpWZ29NVEF3SlNsY2JseHVJQ0FtTG0xdmRtVnpMVzkxZENBK0lHeHBJRDRnWVZ4dUlDQWdJQzhxSUhCMWMyZ2dkR2hsSUc1aGRtbG5ZWFJwYjI0Z2FYUmxiWE1nZEc4Z2RHaGxJR3hsWm5RZ0xTQmhibVFnYkc5M1pYSWdaRzkzYmlCdmNHRmphWFI1SUMwZ2QyaGxiaUJ6WldOdmJtUmhjbmtnYm1GMklITnNhV1JsY3lCcGJseHVJQ0FnSUhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbFdDZ3RNVEF3SlNsY2JpQWdJQ0J2Y0dGamFYUjVPaUF3WEc1Y2JpdHRaV1JwWVNoY0lqeGtaWE5yZEc5d1hDSXBYRzRnSUM1dVlYWXRiMjR0YkdWbWRDQXVZMlF0Y0hKcGJXRnllUzF1WVhZc1hHNGdJQzV1WVhZdGIyNHRiR1ZtZENBdVkyUXRjSEpwYldGeWVTMXVZWFlnZFd4Y2JpQWdJQ0J5YVdkb2REb2dZWFYwYjF4dUlDQWdJR3hsWm5RNklEQmNibHh1WEc0dVkyUXRjSEpwYldGeWVTMXVZWFpjYmlBZ0xuTmxaUzFoYkd3Z1lWeHVJQ0FnSUM4cUlHUnBabVpsY21WdWRDQnpkSGxzWlNCbWIzSWdkR2hsSUZObFpTQmhiR3dnWW5WMGRHOXVJRzl1SUcxdlltbHNaU0JoYm1RZ2RHRmliR1YwWEc0Z0lDQWdZMjlzYjNJNklDUm5jbVZsYmx4dVhHNGdJQzVqWkMxdVlYWXRaMkZzYkdWeWVTQXVZMlF0Ym1GMkxXbDBaVzBzWEc0Z0lDNWpaQzF1WVhZdGFXTnZibk1nTG1Oa0xXNWhkaTFwZEdWdFhHNGdJQ0FnTHlvZ2FYUmxiWE1nZDJsMGFDQndhV04wZFhKbElDaHZjaUJwWTI5dUtTQmhibVFnZEdsMGJHVmNiaUFnSUNCb1pXbG5hSFE2SURnd2NIaGNiaUFnSUNCc2FXNWxMV2hsYVdkb2REb2dPREJ3ZUZ4dVhHNGdJQ0FnYUROY2JpQWdJQ0FnSUc5MlpYSm1iRzkzT2lCb2FXUmtaVzVjYmlBZ0lDQWdJSFJsZUhRdGIzWmxjbVpzYjNjNklHVnNiR2x3YzJselhHNWNiaUFnTG1Oa0xXNWhkaTFuWVd4c1pYSjVJQzVqWkMxdVlYWXRhWFJsYlZ4dUlDQWdJQzh2Y0dGa1pHbHVaeTFzWldaME9pQTVNSEI0WEc1Y2JpQWdJQ0JwYldkY2JpQWdJQ0FnSUhCdmMybDBhVzl1T2lCaFluTnZiSFYwWlZ4dUlDQWdJQ0FnWkdsemNHeGhlVG9nWW14dlkydGNiaUFnSUNBZ0lHaGxhV2RvZERvZ05EQndlRnh1SUNBZ0lDQWdkMmxrZEdnNklHRjFkRzljYmlBZ0lDQWdJR3hsWm5RNklESXdjSGhjYmlBZ0lDQWdJSFJ2Y0RvZ05UQWxYRzRnSUNBZ0lDQnRZWEpuYVc0dGRHOXdPaUF0TWpCd2VGeHVYRzRnSUNBZ0lDQXJiV1ZrYVdFb1hDSThaR1Z6YTNSdmNGd2lLVnh1SUNBZ0lDQWdJQ0JrYVhOd2JHRjVPaUJ1YjI1bFhHNWNiaUFnTG1Oa0xXNWhkaTFwWTI5dWN5QXVZMlF0Ym1GMkxXbDBaVzFjYmlBZ0lDQndZV1JrYVc1bkxXeGxablE2SURjMWNIaGNibHh1SUNBZ0lIQmNiaUFnSUNBZ0lHTnZiRzl5T2lBa2JtbG5hSFJuY21WbGJseHVJQ0FnSUNBZ1ptOXVkQzF6YVhwbE9pQXhMak55WlcxY2JpQWdJQ0FnSUM4cUlHaHBaR1VnWkdWelkzSnBjSFJwYjI0Z2IyNGdjMjFoYkd3Z1pHVjJhV05sYzF4dUlDQWdJQ0FnWkdsemNHeGhlVG9nYm05dVpWeHVYRzRnSUNBZ0pqbzZZbVZtYjNKbFhHNGdJQ0FnSUNBdktpQnBkR1Z0SUdsamIyNWNiaUFnSUNBZ0lHTnZiblJsYm5RNklDY25YRzRnSUNBZ0lDQmthWE53YkdGNU9pQmliRzlqYTF4dUlDQWdJQ0FnY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsWEc0Z0lDQWdJQ0JzWldaME9pQXlNSEI0WEc0Z0lDQWdJQ0IwYjNBNklEVXdKVnh1SUNBZ0lDQWdiV0Z5WjJsdUxYUnZjRG9nTFRJd2NIaGNiaUFnSUNBZ0lIZHBaSFJvT2lBME1IQjRYRzRnSUNBZ0lDQm9aV2xuYUhRNklEUXdjSGhjYmlBZ0lDQWdJR0poWTJ0bmNtOTFibVF0Y21Wd1pXRjBPaUJ1YnkxeVpYQmxZWFJjYmlBZ0lDQWdJR0poWTJ0bmNtOTFibVF0Y0c5emFYUnBiMjQ2SUdObGJuUmxjaUJqWlc1MFpYSmNiaUFnSUNBZ0lHSmhZMnRuY205MWJtUXRjMmw2WlRvZ05EQndlQ0EwTUhCNFhHNWNiaUFnSUNBbUxtbDBaVzB0TVRvNlltVm1iM0psWEc0Z0lDQWdJQ0JpWVdOclozSnZkVzVrTFdsdFlXZGxPaUIxY213b1hDSXZhVzFoWjJWekwyeHBibVV0YVdOdmJpMHhMbk4yWjF3aUtWeHVJQ0FnSUNZdWFYUmxiUzB5T2pwaVpXWnZjbVZjYmlBZ0lDQWdJR0poWTJ0bmNtOTFibVF0YVcxaFoyVTZJSFZ5YkNoY0lpOXBiV0ZuWlhNdmJHbHVaUzFwWTI5dUxUSXVjM1puWENJcFhHNGdJQ0FnSmk1cGRHVnRMVE02T21KbFptOXlaVnh1SUNBZ0lDQWdZbUZqYTJkeWIzVnVaQzFwYldGblpUb2dkWEpzS0Z3aUwybHRZV2RsY3k5c2FXNWxMV2xqYjI0dE15NXpkbWRjSWlsY2JpQWdJQ0FtTG1sMFpXMHRORG82WW1WbWIzSmxYRzRnSUNBZ0lDQmlZV05yWjNKdmRXNWtMV2x0WVdkbE9pQjFjbXdvWENJdmFXMWhaMlZ6TDJ4cGJtVXRhV052YmkwMExuTjJaMXdpS1Z4dUlDQWdJQ1l1YVhSbGJTMDFPanBpWldadmNtVmNiaUFnSUNBZ0lHSmhZMnRuY205MWJtUXRhVzFoWjJVNklIVnliQ2hjSWk5cGJXRm5aWE12YkdsdVpTMXBZMjl1TFRVdWMzWm5YQ0lwWEc0Z0lDQWdKaTVwZEdWdExUWTZPbUpsWm05eVpWeHVJQ0FnSUNBZ1ltRmphMmR5YjNWdVpDMXBiV0ZuWlRvZ2RYSnNLRndpTDJsdFlXZGxjeTlzYVc1bExXbGpiMjR0Tmk1emRtZGNJaWxjYmlBZ0lDQW1MbWwwWlcwdE56bzZZbVZtYjNKbFhHNGdJQ0FnSUNCaVlXTnJaM0p2ZFc1a0xXbHRZV2RsT2lCMWNtd29YQ0l2YVcxaFoyVnpMMnhwYm1VdGFXTnZiaTAzTG5OMloxd2lLVnh1SUNBZ0lDWXVhWFJsYlMwNE9qcGlaV1p2Y21WY2JpQWdJQ0FnSUdKaFkydG5jbTkxYm1RdGFXMWhaMlU2SUhWeWJDaGNJaTlwYldGblpYTXZiR2x1WlMxcFkyOXVMVGd1YzNablhDSXBYRzVjYmlBZ0syMWxaR2xoS0Z3aVBHUmxjMnQwYjNCY0lpbGNiaUFnSUNBdktpQmllU0JrWldaaGRXeDBJQzVqWkMxd2NtbHRZWEo1TFc1aGRpQnBjeUJvYVdSa1pXNGdMU0IwY21samF5Qm1iM0lnYVU5VElHUmxkbWxqWlhNZ2QyaGxjbVVnZVc5MUlHTmhiaUJ6WldVZ2RHaGxJRzVoZG1sbllYUnBiMjRnYVdZZ2VXOTFJSEIxYkd3Z1pHOTNibHh1SUNBZ0lIWnBjMmxpYVd4cGRIazZJR2hwWkdSbGJseHVJQ0FnSUhSeVlXNXphWFJwYjI0NklIWnBjMmxpYVd4cGRIa2dNSE1nTUM0emMxeHVJQ0FnSUNZdWJtRjJMV2x6TFhacGMybGliR1ZjYmlBZ0lDQWdJSFpwYzJsaWFXeHBkSGs2SUhacGMybGliR1ZjYmlBZ0lDQWdJSFJ5WVc1emFYUnBiMjQ2SUhacGMybGlhV3hwZEhrZ01ITWdNSE5jYmx4dUsyMWxaR2xoS0Z3aVBtUmxjMnQwYjNCY0lpbGNibHh1SUNBdVkyUXRjSEpwYldGeWVTMXVZWFpjYmlBZ0lDQndiM05wZEdsdmJqb2djM1JoZEdsalhHNGdJQ0FnY0dGa1pHbHVaem9nTUNBMU1IQjRJREFnTUZ4dUlDQWdJR2hsYVdkb2REb2dZWFYwYjF4dUlDQWdJSGRwWkhSb09pQXhNREFsWEc0Z0lDQWdMeTltYkc5aGREb2djbWxuYUhSY2JpQWdJQ0J2ZG1WeVpteHZkem9nZG1semFXSnNaVnh1SUNBZ0lHSmhZMnRuY205MWJtUTZJSFJ5WVc1emNHRnlaVzUwWEc0Z0lDQWdkR1Y0ZEMxaGJHbG5iam9nWTJWdWRHVnlYRzVjYmlBZ0lDQXJZMnhsWVhKbWFYaGNibHh1SUNBZ0lDWXViVzkyWlhNdGIzVjBJRDRnYkdrZ1BpQmhYRzRnSUNBZ0lDQXZLaUJ5WlhObGRDQnRiMkpwYkdVZ2MzUjViR1ZjYmlBZ0lDQWdJSFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsV0Nnd0tWeHVJQ0FnSUNBZ2IzQmhZMmwwZVRvZ01WeHVYRzRnSUNBZ2RXeGNiaUFnSUNBZ0lIQnZjMmwwYVc5dU9pQnpkR0YwYVdOY2JpQWdJQ0FnSUdobGFXZG9kRG9nWVhWMGIxeHVJQ0FnSUNBZ2QybGtkR2c2SUdGMWRHOWNiaUFnSUNBZ0lHSmhZMnRuY205MWJtUTZJSFJ5WVc1emNHRnlaVzUwWEc0Z0lDQWdJQ0J2ZG1WeVpteHZkem9nZG1semFXSnNaVnh1SUNBZ0lDQWdkR1Y0ZEMxaGJHbG5iam9nYkdWbWRGeHVJQ0FnSUNBZ2VpMXBibVJsZURvZ0pHRmliM1psTFdOdmJuUmxiblJjYmx4dUlDQWdJQ0FnSmk1cGN5MW9hV1JrWlc1Y2JpQWdJQ0FnSUNBZ0x5b2djbVZ6WlhRZ2JXOWlhV3hsSUhOMGVXeGxYRzRnSUNBZ0lDQWdJSFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsV0Nnd0tWeHVYRzRnSUNBZ0lDQW1MbTF2ZG1WekxXOTFkQ0ErSUd4cElENGdZVnh1SUNBZ0lDQWdJQ0F2S2lCeVpYTmxkQ0J0YjJKcGJHVWdjM1I1YkdWY2JpQWdJQ0FnSUNBZ2RISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVllLREFwWEc0Z0lDQWdJQ0FnSUc5d1lXTnBkSGs2SURGY2JseHVJQ0FnSUM4dlZHOXdJRzVoZGlCcGRHVnRjMXh1SUNBZ0lENGdiR2xjYmlBZ0lDQWdJR1JwYzNCc1lYazZJR2x1YkdsdVpTMWliRzlqYTF4dUlDQWdJQ0FnTHk5bWJHOWhkRG9nYkdWbWRGeHVJQ0FnSUNBZ2JXRnlaMmx1TFd4bFpuUTZJQzQxY21WdFhHNWNiaUFnSUNBK0lHeHBJRDRnWVZ4dUlDQWdJQ0FnTHlvZ2JXRnBiaUJ1WVhacFoyRjBhVzl1SUdKMWRIUnZibk1nYzNSNWJHVmNiaUFnSUNBZ0lIQnZjMmwwYVc5dU9pQnlaV3hoZEdsMlpWeHVJQ0FnSUNBZ1pHbHpjR3hoZVRvZ2FXNXNhVzVsTFdKc2IyTnJYRzRnSUNBZ0lDQm9aV2xuYUhRNklDUm9aV0ZrWlhJdGFHVnBaMmgwTFV4Y2JpQWdJQ0FnSUd4cGJtVXRhR1ZwWjJoME9pQWthR1ZoWkdWeUxXaGxhV2RvZEMxTVhHNGdJQ0FnSUNCd1lXUmthVzVuT2lBd1hHNGdJQ0FnSUNCamIyeHZjam9nSkc1cFoyaDBaM0psWlc1Y2JpQWdJQ0FnSUc5MlpYSm1iRzkzT2lCMmFYTnBZbXhsWEc0Z0lDQWdJQ0JpYjNKa1pYSXRZbTkwZEc5dE9pQnViMjVsWEc0Z0lDQWdJQ0IwY21GdWMybDBhVzl1T2lCamIyeHZjaUF3TGpOekxDQmliM2d0YzJoaFpHOTNJREF1TTNOY2JseHVJQ0FnSUNBZ0pqcG9iM1psY2x4dUlDQWdJQ0FnSUNCamIyeHZjam9nSkdkeVpXVnVYRzRnSUNBZ0lDQW1Mbk5sYkdWamRHVmtYRzRnSUNBZ0lDQWdJR052Ykc5eU9pQWtaM0psWlc1Y2JpQWdJQ0FnSUNBZ1ltOTRMWE5vWVdSdmR6b2dhVzV6WlhRZ01DQXRNbkI0SURBZ0pHZHlaV1Z1WEc1Y2JpQWdJQ0F1WjI4dFltRmpheXdnTG5ObFpTMWhiR3hjYmlBZ0lDQWdJR1JwYzNCc1lYazZJRzV2Ym1WY2JseHVJQ0FnSUM1alpDMXpaV052Ym1SaGNua3RibUYyTEZ4dUlDQWdJQzVqWkMxdVlYWXRaMkZzYkdWeWVTeGNiaUFnSUNBdVkyUXRibUYyTFdsamIyNXpYRzRnSUNBZ0lDQXZLaUJrY205d1pHOTNiaUJ0Wlc1MUlITjBlV3hsWEc0Z0lDQWdJQ0J3YjNOcGRHbHZiam9nWVdKemIyeDFkR1ZjYmlBZ0lDQWdJSFJ2Y0RvZ0pHaGxZV1JsY2kxb1pXbG5hSFF0VEZ4dUlDQWdJQ0FnTHk5M2FXUjBhRG9nTVRBd2RuZGNiaUFnSUNBZ0lIZHBaSFJvT2lBeE1EQWxYRzRnSUNBZ0lDQmlZV05yWjNKdmRXNWtPaUFrZDJocGRHVmNiaUFnSUNBZ0lDOHZRMGhCVGtkRlJGeHVJQ0FnSUNBZ0x5OXdZV1JrYVc1bk9pQTBPSEI0SURZMGNIZ2dNVE13Y0hoY2JpQWdJQ0FnSUhCaFpHUnBibWM2SURKeVpXMWNiaUFnSUNBZ0lHSnZlQzF6YUdGa2IzYzZJR2x1YzJWMElEQWdNWEI0SURBZ0pHTnNiM1ZrTENBd0lETndlQ0EyY0hnZ2NtZGlZU2dqTURBd0xDQXdMakExS1Z4dUlDQWdJQ0FnZEhKaGJuTm1iM0p0T2lCMGNtRnVjMnhoZEdWWUtEQXBYRzRnSUNBZ0lDQXJZMnhsWVhKbWFYaGNibHh1SUNBZ0lDQWdkSEpoYm5OcGRHbHZiam9nYjNCaFkybDBlU0F1TTNNZ01ITXNJSFpwYzJsaWFXeHBkSGtnTUhNZ01ITmNibHh1SUNBZ0lDQWdKaTVwY3kxb2FXUmtaVzVjYmlBZ0lDQWdJQ0FnYjNCaFkybDBlVG9nTUZ4dUlDQWdJQ0FnSUNCMmFYTnBZbWxzYVhSNU9pQm9hV1JrWlc1Y2JpQWdJQ0FnSUNBZ2RISmhibk5wZEdsdmJqb2diM0JoWTJsMGVTQXVNM01nTUhNc0lIWnBjMmxpYVd4cGRIa2dNSE1nTGpOelhHNWNiaUFnSUNBZ0lENGdMbk5sWlMxaGJHeGNiaUFnSUNBZ0lDQWdMeW9nZEdocGN5QnBjeUIwYUdVZ1FrbEhJRk5sWlNCaGJHd2dZblYwZEc5dUlHRjBJSFJvWlNCaWIzUjBiMjBnYjJZZ2RHaGxJR1J5YjNCa2IzZHVJRzFsYm5WY2JpQWdJQ0FnSUNBZ1pHbHpjR3hoZVRvZ1lteHZZMnRjYmlBZ0lDQWdJQ0FnY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsWEc0Z0lDQWdJQ0FnSUd4bFpuUTZJREJjYmlBZ0lDQWdJQ0FnWW05MGRHOXRPaUF3WEc0Z0lDQWdJQ0FnSUdobGFXZG9kRG9nT0RCd2VGeHVJQ0FnSUNBZ0lDQjNhV1IwYURvZ01UQXdKVnh1SUNBZ0lDQWdJQ0J2ZG1WeVpteHZkem9nYUdsa1pHVnVYRzRnSUNBZ0lDQWdJQzhxSUhKbGMyVjBJSE52YldVZ2FXNW9aWEpwZEdWa0lITjBlV3hsWEc0Z0lDQWdJQ0FnSUcxaGNtZHBiam9nTUZ4dUlDQWdJQ0FnSUNCd1lXUmthVzVuT2lBd1hHNWNiaUFnSUNBZ0lDQWdZVnh1SUNBZ0lDQWdJQ0FnSUhCdmMybDBhVzl1T2lCaFluTnZiSFYwWlZ4dUlDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lBeE1EQWxYRzRnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBPaUF4TURBbFhHNGdJQ0FnSUNBZ0lDQWdkRzl3T2lBd1hHNGdJQ0FnSUNBZ0lDQWdiR1ZtZERvZ01GeHVJQ0FnSUNBZ0lDQWdJR1p2Ym5RdGMybDZaVG9nTWk0eWNtVnRYRzRnSUNBZ0lDQWdJQ0FnWm05dWRDMTNaV2xuYUhRNklHSnZiR1JjYmlBZ0lDQWdJQ0FnSUNCMFpYaDBMV0ZzYVdkdU9pQmpaVzUwWlhKY2JpQWdJQ0FnSUNBZ0lDQnNhVzVsTFdobGFXZG9kRG9nT0RCd2VGeHVJQ0FnSUNBZ0lDQWdJR0p2Y21SbGNpMTBiM0E2SURGd2VDQnpiMnhwWkNBa1kyeHZkV1JjYmlBZ0lDQWdJQ0FnSUNBdktpQnlaWE5sZENCemIyMWxJR2x1YUdWeWFYUmxaQ0J6ZEhsc1pWeHVJQ0FnSUNBZ0lDQWdJR0p2Y21SbGNpMWliM1IwYjIwNklHNXZibVZjYmlBZ0lDQWdJQ0FnSUNCdFlYSm5hVzQ2SURCY2JpQWdJQ0FnSUNBZ0lDQndZV1JrYVc1bk9pQXdYRzRnSUNBZ0lDQWdJQ0FnZEhKaGJuTnBkR2x2YmpvZ1kyOXNiM0lnTUM0eWN5d2dZbUZqYTJkeWIzVnVaQ0F3TGpKekxDQmliM0prWlhJZ01DNHljMXh1WEc0Z0lDQWdJQ0FnSUNBZ0pqcG9iM1psY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZbUZqYTJkeWIzVnVaRG9nSkc1cFoyaDBaM0psWlc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p2Y21SbGNpMWpiMnh2Y2pvZ0pHNXBaMmgwWjNKbFpXNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUFrZDJocGRHVmNibHh1SUNBZ0lDNWpaQzF6WldOdmJtUmhjbmt0Ym1GMlhHNWNiaUFnSUNBZ0lENGdiR2xjYmlBZ0lDQWdJQ0FnTHlvZ1kyaGhibWRsSUhSb1pTQm9aV2xuYUhRZ1lXTmpiM0prYVc1bklIUnZJSGx2ZFhJZ2JtVmxaSE1nTFNCNWIzVWdZMkZ1SUdWMlpXNGdjMlYwSUdobGFXZG9kRG9nWVhWMGIxeHVJQ0FnSUNBZ0lDQm9aV2xuYUhRNklETTBNSEI0WEc0Z0lDQWdJQ0FnSUM4cUlHaGxjbVVnZVc5MUlITmxkQ0IwYUdVZ2JuVnRZbVZ5SUc5bUlHTnZiSFZ0Ym5NZ0xTQjFjMlVnZDJsa2RHZ2djR1Z5WTJWdWRHRm5aVnh1SUNBZ0lDQWdJQ0FyWTI5c2RXMXVLREF1TWpNcFhHNGdJQ0FnSUNBZ0lDOHZJSE5sWlNCd1lYSjBhV0ZzY3lBK0lGOXNZWGx2ZFhRdWMyTnpjMXh1SUNBZ0lDQWdJQ0J0WVhKbmFXNHRjbWxuYUhRNklESXVOallsWEc0Z0lDQWdJQ0FnSUdKdmNtUmxjaTF5YVdkb2REb2dNWEI0SUhOdmJHbGtJQ1JqYkc5MVpGeHVJQ0FnSUNBZ0lDQnZkbVZ5Wm14dmR6b2dhR2xrWkdWdVhHNGdJQ0FnSUNBZ0lHOTJaWEptYkc5M0xYZzZJR2hwWkdSbGJseHVJQ0FnSUNBZ0lDQnZkbVZ5Wm14dmR5MTVPaUJoZFhSdlhHNGdJQ0FnSUNBZ0lDMTNaV0pyYVhRdGIzWmxjbVpzYjNjdGMyTnliMnhzYVc1bk9pQjBiM1ZqYUZ4dVhHNGdJQ0FnSUNBZ0lDWTZiblJvTFdOb2FXeGtLRFJ1S3pJcFhHNGdJQ0FnSUNBZ0lDQWdMeW9nS3pJZ1ltVmpZWFZ6WlNCM1pTQm9ZWFpsSURJZ2JHbHpkQ0JwZEdWdGN5QjNhWFJvSUdScGMzQnNZWGs2Ym05dVpWeHVJQ0FnSUNBZ0lDQWdJRzFoY21kcGJpMXlhV2RvZERvZ01GeHVJQ0FnSUNBZ0lDQWdJR0p2Y21SbGNpMXlhV2RvZERvZ2JtOXVaVnh1WEc0Z0lDQWdJQ0FnSUQ0Z1lWeHVJQ0FnSUNBZ0lDQWdJQzhxSUhObFkyOXVaR0Z5ZVNCdVlYWWdkR2wwYkdWY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ0pHZHlaV1Z1WEc0Z0lDQWdJQ0FnSUNBZ1ptOXVkQzEzWldsbmFIUTZJR0p2YkdSY2JpQWdJQ0FnSUNBZ0lDQm1iMjUwTFhOcGVtVTZJREV1Tm5KbGJWeHVJQ0FnSUNBZ0lDQWdJRzFoY21kcGJpMWliM1IwYjIwNklDNDJaVzFjYmx4dUlDQWdJQ0FnWVZ4dUlDQWdJQ0FnSUNCb1pXbG5hSFE2SURNd2NIaGNiaUFnSUNBZ0lDQWdiR2x1WlMxb1pXbG5hSFE2SURNd2NIaGNiaUFnSUNBZ0lDQWdjR0ZrWkdsdVp6b2dNQ0F4T0NVZ01DQXdYRzRnSUNBZ0lDQWdJR052Ykc5eU9pQWtibWxuYUhSbmNtVmxibHh1SUNBZ0lDQWdJQ0JpYjNKa1pYSXRZbTkwZEc5dE9pQnViMjVsWEc0Z0lDQWdJQ0FnSUdadmJuUXRjMmw2WlRvZ01TNDBjbVZ0WEc1Y2JpQWdJQ0FnSUNBZ0pqcG9iM1psY2x4dUlDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lBa1ozSmxaVzVjYmx4dUlDQWdJQ0FnZFd4Y2JpQWdJQ0FnSUNBZ0x5b2dSbTl5WTJVZ1NHRnlaSGRoY21VZ1FXTmpaV3hsY21GMGFXOXVJR2x1SUZkbFlrdHBkRnh1SUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlZvb01DbGNibHh1SUNBZ0lDQWdkV3dnZFd4Y2JpQWdJQ0FnSUNBZ0x5b2dkR1Z5ZEdsaGNua2dibUYyYVdkaGRHbHZibHh1SUNBZ0lDQWdJQ0J3YjNOcGRHbHZiam9nWVdKemIyeDFkR1ZjYmlBZ0lDQWdJQ0FnZEc5d09pQXdYRzRnSUNBZ0lDQWdJR3hsWm5RNklEQmNiaUFnSUNBZ0lDQWdhR1ZwWjJoME9pQXhNREFsWEc0Z0lDQWdJQ0FnSUhkcFpIUm9PaUF4TURBbFhHNWNiaUFnSUNBZ0lDQWdKaTVwY3kxb2FXUmtaVzVjYmlBZ0lDQWdJQ0FnSUNCMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpWZ29NVEF3SlNsY2JseHVJQ0FnSUNBZ0lDQXVaMjh0WW1GamExeHVJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazZJR0pzYjJOclhHNWNiaUFnSUNBZ0lDQWdJQ0JoWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ2RISmhibk53WVhKbGJuUmNibHh1SUNBZ0lDQWdJQ0F1YzJWbExXRnNiRnh1SUNBZ0lDQWdJQ0FnSUdScGMzQnNZWGs2SUdKc2IyTnJYRzVjYmlBZ0lDQWdJQzV0YjNabGN5MXZkWFFnUGlCc2FTQStJR0ZjYmlBZ0lDQWdJQ0FnTHlvZ2NIVnphQ0IwYUdVZ2JtRjJhV2RoZEdsdmJpQnBkR1Z0Y3lCMGJ5QjBhR1VnYkdWbWRDQXRJR0Z1WkNCc2IzZGxjaUJrYjNkdUlHOXdZV05wZEhrZ0xTQjNhR1Z1SUhSbGNuUnBZWEo1SUc1aGRpQnpiR2xrWlhNZ2FXNWNiaUFnSUNBZ0lDQWdkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1ZZS0MweE1EQWxLVnh1WEc0Z0lDQWdMbU5rTFc1aGRpMW5ZV3hzWlhKNVhHNGdJQ0FnSUNCaWIzZ3RjMmhoWkc5M09pQXdJRFZ3ZUNBMWNIZ2djbWRpWVNneE1EQXNNVEF3TERFd01Dd3VNeWxjYmx4dUlDQWdJQ0FnYkdsY2JpQWdJQ0FnSUNBZ0x5b2djMlYwSUdobGNtVWdiblZ0WW1WeUlHOW1JR052YkhWdGJuTWdMU0IxYzJVZ2QybGtkR2dnY0dWeVkyVnVkR0ZuWlZ4dUlDQWdJQ0FnSUNBdkx5dGpiMngxYlc0b01DNHlNaWxjYmlBZ0lDQWdJQ0FnTHk5dFlYSm5hVzQ2SURBZ05DVWdOREJ3ZUNBd1hHNWNiaUFnSUNBZ0lDQWdabXh2WVhRNklHeGxablJjYmlBZ0lDQWdJQ0FnZDJsa2RHZzZJREkxSlZ4dUlDQWdJQ0FnSUNCd1lXUmthVzVuT2lBeGNtVnRYRzVjYmlBZ0lDQWdJQ0FnSmpwdWRHZ3RZMmhwYkdRb05HNHJNaWxjYmlBZ0lDQWdJQ0FnSUNBdktpQXJNaUJpWldOaGRYTmxJSGRsSUdoaGRtVWdkSGR2SUdGa1pHbDBhVzl1WVd3Z2JHbHpkQ0JwZEdWdGN5QjNhWFJvSUdScGMzQnNZWGs2Ym05dVpWeHVJQ0FnSUNBZ0lDQWdJQzh2YldGeVoybHVMWEpwWjJoME9pQXdYRzVjYmlBZ0lDQWdJQzVqWkMxdVlYWXRhWFJsYlZ4dUlDQWdJQ0FnSUNCaWIzSmtaWEl0WW05MGRHOXRPaUJ1YjI1bFhHNGdJQ0FnSUNBZ0lIQmhaR1JwYm1jNklEQmNiaUFnSUNBZ0lDQWdhR1ZwWjJoME9pQmhkWFJ2WEc0Z0lDQWdJQ0FnSUd4cGJtVXRhR1ZwWjJoME9pQXhMakpjYmx4dUlDQWdJQ0FnSUNCcGJXZGNiaUFnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZiam9nYzNSaGRHbGpYRzRnSUNBZ0lDQWdJQ0FnYldGeVoybHVMWFJ2Y0RvZ01GeHVJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2dZWFYwYjF4dUlDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lBeE1EQWxYRzRnSUNBZ0lDQWdJQ0FnYldGeVoybHVMV0p2ZEhSdmJUb2dMalp5WlcxY2JseHVJQ0FnSUNBZ0lDQm9NMXh1SUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUFrWjNKbFpXNWNiaUFnSUNBZ0lDQWdJQ0JtYjI1MExYZGxhV2RvZERvZ1ltOXNaRnh1SUNBZ0lDQWdJQ0FnSUdadmJuUXRjMmw2WlRvZ0xqbHlaVzFjYmlBZ0lDQWdJQ0FnSUNCd1lXUmthVzVuT2lBd0lDNDBjbVZ0WEc1Y2JpQWdJQ0F1WTJRdGJtRjJMV2xqYjI1elhHNWNiaUFnSUNBZ0lHeHBYRzRnSUNBZ0lDQWdJQzhxSUhObGRDQm9aWEpsSUc1MWJXSmxjaUJ2WmlCamIyeDFiVzV6SUMwZ2RYTmxJSGRwWkhSb0lIQmxjbU5sYm5SaFoyVmNiaUFnSUNBZ0lDQWdLMk52YkhWdGJpZ3dMak15S1Z4dUlDQWdJQ0FnSUNCdFlYSm5hVzQ2SURBZ01pVWdNakJ3ZUNBd1hHNGdJQ0FnSUNBZ0lDWTZiblJvTFdOb2FXeGtLRE51S3pJcFhHNGdJQ0FnSUNBZ0lDQWdMeW9nS3pJZ1ltVmpZWFZ6WlNCM1pTQm9ZWFpsSUhSM2J5QmhaR1JwZEdsdmJtRnNJR3hwYzNRZ2FYUmxiWE1nZDJsMGFDQmthWE53YkdGNU9tNXZibVZjYmlBZ0lDQWdJQ0FnSUNCdFlYSm5hVzR0Y21sbmFIUTZJREJjYmlBZ0lDQWdJQzVqWkMxdVlYWXRhWFJsYlZ4dUlDQWdJQ0FnSUNCaWIzSmtaWEl0WW05MGRHOXRPaUJ1YjI1bFhHNGdJQ0FnSUNBZ0lHaGxhV2RvZERvZ09EQndlRnh1SUNBZ0lDQWdJQ0JzYVc1bExXaGxhV2RvZERvZ01TNHlYRzRnSUNBZ0lDQWdJSEJoWkdScGJtYzZJREkwY0hnZ01DQXdJRGcxY0hoY2JpQWdJQ0FnSUNBZ0pqcG9iM1psY2x4dUlDQWdJQ0FnSUNBZ0lHSmhZMnRuY205MWJtUTZJR3hwWjJoMFpXNG9KR05zYjNWa0xDQTRKU2xjYmlBZ0lDQWdJQ0FnYUROY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ0pHZHlaV1Z1WEc0Z0lDQWdJQ0FnSUNBZ1ptOXVkQzEzWldsbmFIUTZJR0p2YkdSY2JpQWdJQ0FnSUNBZ2NGeHVJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazZJR0pzYjJOclhHNGdJQ0FnSUNBZ0lDWTZPbUpsWm05eVpWeHVJQ0FnSUNBZ0lDQWdJR3hsWm5RNklESTFjSGhjYmx4dVhHNHVhR0Z6TFdOb2FXeGtjbVZ1SUQ0Z1lTd2dMbWR2TFdKaFkyc2dZVnh1SUNCd2IzTnBkR2x2YmpvZ2NtVnNZWFJwZG1WY2JpQWdKam82WW1WbWIzSmxMQ0FtT2pwaFpuUmxjbHh1SUNBZ0lDOHFJR0Z5Y205M0lHbGpiMjRnYVc0Z1ExTlRJQzBnWm05eUlHVnNaVzFsYm5RZ2QybDBhQ0J1WlhOMFpXUWdkVzV2Y21SbGNtVmtJR3hwYzNSelhHNGdJQ0FnWTI5dWRHVnVkRG9nSnlkY2JpQWdJQ0J3YjNOcGRHbHZiam9nWVdKemIyeDFkR1ZjYmlBZ0lDQjBiM0E2SURVd0pWeHVJQ0FnSUcxaGNtZHBiaTEwYjNBNklDMHhjSGhjYmlBZ0lDQmthWE53YkdGNU9pQnBibXhwYm1VdFlteHZZMnRjYmlBZ0lDQm9aV2xuYUhRNklESndlRnh1SUNBZ0lIZHBaSFJvT2lBeE1IQjRYRzRnSUNBZ1ltRmphMmR5YjNWdVpEb2diR2xuYUhSbGJpZ2tibWxuYUhSbmNtVmxiaXdnTVRBbEtWeHVYRzRnSUNBZ1ltRmphMlpoWTJVdGRtbHphV0pwYkdsMGVUb2dhR2xrWkdWdVhHNGdJQ1k2T21KbFptOXlaVnh1SUNBZ0lIUnlZVzV6Wm05eWJUb2djbTkwWVhSbEtEUTFaR1ZuS1Z4dUlDQW1PanBoWm5SbGNseHVJQ0FnSUhSeVlXNXpabTl5YlRvZ2NtOTBZWFJsS0MwME5XUmxaeWxjYmlBZ0syMWxaR2xoS0Z3aVBtUmxjMnQwYjNCY0lpbGNiaUFnSUNBbU9qcGlaV1p2Y21Vc0lDWTZPbUZtZEdWeVhHNGdJQ0FnSUNCaVlXTnJaM0p2ZFc1a09pQmtZWEpyWlc0b0pHTnNiM1ZrTENBeE1DVXBYRzRnSUNBZ0pqcG9iM1psY2pvNlltVm1iM0psTENBbU9taHZkbVZ5T2pwaFpuUmxjbHh1SUNBZ0lDQWdZbUZqYTJkeWIzVnVaRG9nSkdkeVpXVnVYRzVjYmk1b1lYTXRZMmhwYkdSeVpXNGdQaUJoWEc0Z0lIQmhaR1JwYm1jdGNtbG5hSFE2SURRd2NIaGNiaUFnSmpvNlltVm1iM0psTENBbU9qcGhablJsY2x4dUlDQWdJQzhxSUdGeWNtOTNJR2R2WlhNZ2IyNGdkR2hsSUhKcFoyaDBJSE5wWkdVZ0xTQmphR2xzWkhKbGJpQnVZWFpwWjJGMGFXOXVYRzRnSUNBZ2NtbG5hSFE2SURJd2NIaGNiaUFnSUNCMGNtRnVjMlp2Y20wdGIzSnBaMmx1T2lBNWNIZ2dOVEFsWEc1Y2JpNWpaQzF3Y21sdFlYSjVMVzVoZGlBdVoyOHRZbUZqYXlCaFhHNGdJSEJoWkdScGJtY3RiR1ZtZERvZ05EQndlRnh1SUNBbU9qcGlaV1p2Y21Vc0lDWTZPbUZtZEdWeVhHNGdJQ0FnTHlvZ1lYSnliM2NnWjI5bGN5QnZiaUIwYUdVZ2JHVm1kQ0J6YVdSbElDMGdaMjhnWW1GamF5QmlkWFIwYjI1Y2JpQWdJQ0JzWldaME9pQXlNSEI0WEc0Z0lDQWdkSEpoYm5ObWIzSnRMVzl5YVdkcGJqb2dNWEI0SURVd0pWeHVYRzRyYldWa2FXRW9YQ0krWkdWemEzUnZjRndpS1Z4dUlDQXVhR0Z6TFdOb2FXeGtjbVZ1SUQ0Z1lWeHVJQ0FnSUNZNk9tSmxabTl5WlN3Z0pqbzZZV1owWlhKY2JpQWdJQ0FnSUhKcFoyaDBPaUF4TlNWY2JpQWdMbU5rTFhCeWFXMWhjbmt0Ym1GMklENGdMbWhoY3kxamFHbHNaSEpsYmlBK0lHRmNiaUFnSUNBdktpQnRZV2x1SUc1aGRtbG5ZWFJwYjI0Z1lYSnliM2R6SUc5dUlHeGhjbWRsY2lCa1pYWnBZMlZ6WEc0Z0lDQWdjR0ZrWkdsdVp5MXlhV2RvZERvZ016QndlQ0FoYVcxd2IzSjBZVzUwWEc0Z0lDQWdKam82WW1WbWIzSmxMQ0FtT2pwaFpuUmxjbHh1SUNBZ0lDQWdkMmxrZEdnNklEbHdlRnh1SUNBZ0lDQWdkSEpoYm5ObWIzSnRMVzl5YVdkcGJqb2dOVEFsSURVd0pWeHVJQ0FnSUNBZ1ltRmphMmR5YjNWdVpEb2daR0Z5YTJWdUtDUmpiRzkxWkN3Z01UQWxLVnh1WEc0Z0lDQWdJQ0JpWVdOclptRmpaUzEyYVhOcFltbHNhWFI1T2lCb2FXUmtaVzVjYmlBZ0lDQWdJSFJ5WVc1emFYUnBiMjQ2SUhkcFpIUm9JREF1TTNNc0lIUnlZVzV6Wm05eWJTQXdMak56WEc0Z0lDQWdKam82WW1WbWIzSmxYRzRnSUNBZ0lDQnlhV2RvZERvZ01USndlRnh1SUNBZ0lDWTZPbUZtZEdWeVhHNGdJQ0FnSUNCeWFXZG9kRG9nTjNCNFhHNGdJQ0FnSmk1elpXeGxZM1JsWkRvNlltVm1iM0psTENBbUxuTmxiR1ZqZEdWa09qcGhablJsY2x4dUlDQWdJQ0FnZDJsa2RHZzZJREUwY0hoY2JpQWdJQ0FtTG5ObGJHVmpkR1ZrT2pwaVpXWnZjbVZjYmlBZ0lDQWdJSFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsV0NnMWNIZ3BJSEp2ZEdGMFpTZ3RORFZrWldjcFhHNGdJQ0FnSmk1elpXeGxZM1JsWkRvNllXWjBaWEpjYmlBZ0lDQWdJSFJ5WVc1elptOXliVG9nY205MFlYUmxLRFExWkdWbktWeHVJQ0F1WTJRdGMyVmpiMjVrWVhKNUxXNWhkaUErSUM1b1lYTXRZMmhwYkdSeVpXNGdQaUJoT2pwaVpXWnZjbVVzSUM1alpDMXpaV052Ym1SaGNua3RibUYySUQ0Z0xtaGhjeTFqYUdsc1pISmxiaUErSUdFNk9tRm1kR1Z5WEc0Z0lDQWdMeW9nY21WdGIzWmxJR0Z5Y205M2N5QnZiaUJ6WldOdmJtUmhjbmtnYm1GMklIUnBkR3hsYzF4dUlDQWdJR1JwYzNCc1lYazZJRzV2Ym1WY2JpQWdMbU5rTFhCeWFXMWhjbmt0Ym1GMklDNW5ieTFpWVdOcklHRmNiaUFnSUNCd1lXUmthVzVuTFd4bFpuUTZJREl3Y0hoY2JpQWdJQ0FtT2pwaVpXWnZjbVVzSUNZNk9tRm1kR1Z5WEc0Z0lDQWdJQ0JzWldaME9pQXhjSGhjYmx4dVhHNWNibHh1TG1Oa0xYTmxZWEpqYUZ4dUlDQm1iRzloZERweWFXZG9kRHRjYmx4dUlDQmNibHh1SUNCbWIzSnRYRzRnSUNBZ2NHOXphWFJwYjI0NmNtVnNZWFJwZG1WY2JpQWdhVzV3ZFhSYmRIbHdaVDFjSW5OMVltMXBkRndpWFZ4dUlDQWdJR0poWTJ0bmNtOTFibVF0YVcxaFoyVTZJSFZ5YkNoY0lpOXBiV0ZuWlhNdmMyVmhjbU5vTFdsamIyNHVjRzVuWENJcElGeHVJQ0FnSUdKaFkydG5jbTkxYm1RdGNtVndaV0YwT2lCdWJ5MXlaWEJsWVhSY2JpQWdJQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlPaUIwY21GdWMzQmhjbVZ1ZEZ4dUlDQWdJR1JwYzNCc1lYazZJR2x1YkdsdVpTMWliRzlqYTF4dUlDQWdJSFJsZUhRdGFXNWtaVzUwT2lBdE9UazVPVGx3ZUZ4dUlDQWdJR2hsYVdkb2REb2dNakp3ZUZ4dUlDQWdJSGRwWkhSb09pQXlNbkI0WEc0Z0lDQWdMWGRsWW10cGRDMWhjSEJsWVhKaGJtTmxPaUJ1YjI1bFhHNGdJQ0FnWW05eVpHVnlPaUF3WEc0Z0lDQWdjRzl6YVhScGIyNDZJR0ZpYzI5c2RYUmxYRzRnSUNBZ2RHOXdPaUEyY0hoY2JpQWdJQ0J5YVdkb2REb2dNM0I0WEc0Z0lDQWdZbUZqYTJkeWIzVnVaQzF6YVhwbE9pQTNOU1ZjYmx4dUlDQnBibkIxZEZ0MGVYQmxQVndpYzJWaGNtTm9YQ0pkWEc0Z0lDQWdjR0ZrWkdsdVp5MXNaV1owT2pFd2NIZzdYRzRnSUNBZ0x5OWliM2d0YzJoaFpHOTNPaUJwYm5ObGRDQXdJREZ3ZUNBd0lDUmpiRzkxWkN3Z01DQXpjSGdnTm5CNElISm5ZbUVvSXpBd01Dd2dNQzR3TlNsY2JpQWdJQ0JoY0hCbFlYSmhibU5sT2lCdWIyNWxYRzRnSUNBZ1ltOXlaR1Z5T2lBeGNIZ2djMjlzYVdRZ0pHZHlZWEJvYVhSbFhHNWNiaUFnSUNBbU9qb3RkMlZpYTJsMExXbHVjSFYwTFhCc1lXTmxhRzlzWkdWeUxGeHVJQ0FnSUNZNk9pMXRiM290Y0d4aFkyVm9iMnhrWlhJc1hHNGdJQ0FnSmpvdGJYTXRhVzV3ZFhRdGNHeGhZMlZvYjJ4a1pYSmNiaUFnSUNBZ0lHTnZiRzl5T2lCa1lYSnJaVzRvSkdOc2IzVmtMQ0F4TUNVcFhHNWNiaUFnSUNBbU9tWnZZM1Z6WEc0Z0lDQWdJQ0J2ZFhSc2FXNWxPaUJ1YjI1bFhHNWNiaUFnSmk1cGN5MTJhWE5wWW14bFhHNGdJQ0FnYjNCaFkybDBlVG9nTVZ4dUlDQWdJSFpwYzJsaWFXeHBkSGs2SUhacGMybGliR1ZjYmlBZ0lDQjBjbUZ1YzJsMGFXOXVPaUJ2Y0dGamFYUjVJQzR6Y3lBd2N5d2dkbWx6YVdKcGJHbDBlU0F3Y3lBd2MxeHVJQ0FnSUM4dlltOTRMWE5vWVdSdmR6b2dNWEI0SURGd2VDQTFjSGdnY21kaVlTZ3hNREFzTVRBd0xERXdNQ3dnTGpVcFhHNWNiaUFnTG01aGRpMXBjeTFtYVhobFpDQW1YRzRnSUNBZ2NHOXphWFJwYjI0NklHWnBlR1ZrWEc1Y2JpQWdLMjFsWkdsaEtGd2lQbVJsYzJ0MGIzQmNJaWxjYmlBZ0lGeHVYRzRnSUNBZ2FXNXdkWFJjYmlBZ0lDQWdJRnh1WEc1Y2JpNWpaQzF2ZG1WeWJHRjVYRzRnSUM4cUlITm9ZV1J2ZHlCc1lYbGxjaUIyYVhOcFlteGxJSGRvWlc0Z2JtRjJhV2RoZEdsdmJpQnBjeUJoWTNScGRtVmNiaUFnY0c5emFYUnBiMjQ2SUdacGVHVmtYRzRnSUhvdGFXNWtaWGc2SURKY2JpQWdhR1ZwWjJoME9pQXhNREFsWEc0Z0lIZHBaSFJvT2lBeE1EQWxYRzRnSUhSdmNEb2dNRnh1SUNCc1pXWjBPaUF3WEc0Z0lHTjFjbk52Y2pvZ2NHOXBiblJsY2x4dUlDQXZMMkpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJSEpuWW1Fb0pHZHlaV1Z1TENBd0xqZ3BYRzRnSUhacGMybGlhV3hwZEhrNklHaHBaR1JsYmx4dUlDQnZjR0ZqYVhSNU9pQXdYRzRnSUdKaFkydG1ZV05sTFhacGMybGlhV3hwZEhrNklHaHBaR1JsYmx4dUlDQjBjbUZ1YzJsMGFXOXVPaUJ2Y0dGamFYUjVJREF1TTNNZ01ITXNJSFpwYzJsaWFXeHBkSGtnTUhNZ01DNHpjeXdnZEhKaGJuTm1iM0p0SURBdU0zTWdNSE5jYmx4dUlDQW1MbWx6TFhacGMybGliR1ZjYmlBZ0lDQnZjR0ZqYVhSNU9pQXhYRzRnSUNBZ2RtbHphV0pwYkdsMGVUb2dkbWx6YVdKc1pWeHVJQ0FnSUhSeVlXNXphWFJwYjI0NklHOXdZV05wZEhrZ01DNHpjeUF3Y3l3Z2RtbHphV0pwYkdsMGVTQXdjeUF3Y3l3Z2RISmhibk5tYjNKdElEQXVNM01nTUhOY2JseHVJQ0FyYldWa2FXRW9YQ0k4WkdWemEzUnZjRndpS1Z4dUlDQWdJQ1l1YVhNdGRtbHphV0pzWlZ4dUlDQWdJQ0FnTHk5MGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpWZ29MU1J1WVhZdGQybGtkR2d0VXlsY2JpQWdJQ0FnSUhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbFdDZ3dLVnh1WEc0Z0lDQWdMbTVoZGkxdmJpMXNaV1owSUNZdWFYTXRkbWx6YVdKc1pWeHVJQ0FnSUNBZ2RISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVllLQ1J1WVhZdGQybGtkR2d0VXlsY2JseHVJQ0FnSUNZdWFYTXRkbWx6YVdKc1pTNXpaV0Z5WTJndGFYTXRkbWx6YVdKc1pTeGNiaUFnSUNBdWJtRjJMVzl1TFd4bFpuUWdKaTVwY3kxMmFYTnBZbXhsTG5ObFlYSmphQzFwY3kxMmFYTnBZbXhsWEc0Z0lDQWdJQ0IwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlZnb01DbGNibHh1THlvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcVhHNGdLbk4xY0hCdmNuUWdabTl5SUc1dklHcHpYRzRnS2x4dUlDb3RMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dVhHNHVibTh0YW5NZ0xtTmtMWEJ5YVcxaGNua3RibUYyWEc0Z0lIQnZjMmwwYVc5dU9pQnlaV3hoZEdsMlpWeHVJQ0JvWldsbmFIUTZJR0YxZEc5Y2JpQWdkMmxrZEdnNklERXdNQ1ZjYmlBZ2IzWmxjbVpzYjNjNklIWnBjMmxpYkdWY2JpQWdkbWx6YVdKcGJHbDBlVG9nZG1semFXSnNaVnh1SUNCNkxXbHVaR1Y0T2lBa1kyOXVkR1Z1ZEZ4dVhHNHVibTh0YW5NZ0xtTmtMWE5sWVhKamFGeHVJQ0J3YjNOcGRHbHZiam9nY21Wc1lYUnBkbVZjYmlBZ2RHOXdPaUF3WEc0Z0lHOXdZV05wZEhrNklERmNiaUFnZG1semFXSnBiR2wwZVRvZ2RtbHphV0pzWlZ4dVhHNHJiV1ZrYVdFb1hDSStaR1Z6YTNSdmNGd2lLVnh1SUNBdWJtOHRhbk1nTG1Oa0xYQnlhVzFoY25rdGJtRjJYRzRnSUNBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbFhHNGdJQ0FnZWkxcGJtUmxlRG9nSkdGaWIzWmxMV052Ym5SbGJuUmNiaUFnSUNCa2FYTndiR0Y1T2lCcGJteHBibVV0WW14dlkydGNiaUFnSUNCM2FXUjBhRG9nWVhWMGIxeHVJQ0FnSUhSdmNEb2dNRnh1SUNBZ0lISnBaMmgwT2lBeE5UQndlRnh1SUNBZ0lIQmhaR1JwYm1jNklEQmNiaUFnTG01dkxXcHpJQzV1WVhZdGFYTXRabWw0WldRZ0xtTmtMWEJ5YVcxaGNua3RibUYyWEc0Z0lDQWdjRzl6YVhScGIyNDZJR1pwZUdWa1hHNGlMQ0l1Ym1GMkxXWnZiM1JsY2x4dVhIUndZV1JrYVc1bk9pQXpNSEI0SURJd2NIZ2dNakJ3ZUZ4dVhIUjBaWGgwTFdGc2FXZHVPaUJzWldaMFhHNWNibHgwSzIxbFpHbGhLRndpUEQxMFlXSnNaWFJjSWlsY2JseDBYSFJrYVhOd2JHRjVPaUJ1YjI1bFhHNWNibHgwSmw5ZmFHVmhaR2x1WjF4dVhIUmNkR1p2Ym5RdFptRnRhV3g1T2lBa2MyRnVjMXh1WEhSY2RHWnZiblF0YzJsNlpUb2dNWEpsYlZ4dVhIUmNkR1p2Ym5RdGQyVnBaMmgwT2lBa1ltOXNaRnh1WEhSY2RHMWhjbWRwYmkxaWIzUjBiMjA2SURGeVpXMWNibHh1WEhSY2RHRmNibHgwWEhSY2RHTnZiRzl5T2lBa1kyaGhjbU52WVd4Y2JseDBYSFJjZENZNmFHOTJaWEpjYmx4MFhIUmNkRngwWTI5c2IzSTZJQ1JuY21WbGJseHVYRzVjZENaZlgyeHBibXRjYmx4MFhIUm1iMjUwTFhOcGVtVTZJREUwY0hoY2JseHVYSFFtWDE5aWIzaGNibHgwWEhSd1lXUmthVzVuT2lBd0lERXdjSGhjYmx4MFhIUjJaWEowYVdOaGJDMWhiR2xuYmpvZ2RHOXdYRzVjYmx4MEpsOWZZbTk0TFc1aGNuSnZkMXh1WEhSY2RIQmhaR1JwYm1jNklEQWdNVEJ3ZUZ4dVhIUmNkSFpsY25ScFkyRnNMV0ZzYVdkdU9pQjBiM0JjYmx4dVhIUW1YMTlpZFhSMGIyNWNibHgwWEhSaWIzSmtaWEl0ZDJsa2RHZzZJREZ3ZUZ4dVhIUmNkR052Ykc5eU9pQWtaM0psWlc1Y2JseDBYSFJtYjI1MExYTnBlbVU2SUM0NWNtVnRYRzVjZEZ4MGJXRnlaMmx1TFdKdmRIUnZiVG9nTVhKbGJWeHVYSFJjZEhCaFpHUnBibWM2SUM0MWNtVnRJREZ5WlcxY2JseDBYSFIzYVdSMGFEb2dNVEF3SlZ4dVhHNWNibHgwTHk4Z1UzVmlMVzVoZG1sbllYUnBiMjRzSUhkb2FXTm9JR2hwWkdWeklHOXVJSE50WVd4c0lITnBlbVZ6WEc1Y2RDWmZYM04xWWkxc2FXNXJjMXh1WEhSY2RHWnZiblF0YzJsNlpUb2dNVFJ3ZUZ4dVhHNWNkRngwWVZ4dVhIUmNkRngwWTI5c2IzSTZJQ1JqYUdGeVkyOWhiRnh1WEhSY2RGeDBKanBvYjNabGNseHVYSFJjZEZ4MFhIUmpiMnh2Y2pvZ0pHZHlaV1Z1WEc1Y2JseDBYSFJzYVRwdWRHZ3RZMmhwYkdRb01TbGNibHgwWEhSY2RHWnZiblF0Wm1GdGFXeDVPaUFrYzJGdWMxeHVYSFJjZEZ4MFptOXVkQzF6YVhwbE9pQXhjbVZ0WEc1Y2RGeDBYSFJtYjI1MExYZGxhV2RvZERvZ0pHSnZiR1JjYmx4MFhIUmNkRzFoY21kcGJpMWliM1IwYjIwNklDNDFjbVZ0WEc0aUxDSXZMMEpoYm01bGNpQlVZV3hzSUMwZ1ZHaHBjeUJwY3lCbWIzVnVaQ0J2YmlCMGFHVWdhRzl0WlhCaFoyVWdiMjVzZVZ4dUxtSmhibTVsY2kxMFlXeHNYRzRnSUdKaFkydG5jbTkxYm1RdGFXMWhaMlU2SUhWeWJDaHBiV0ZuWlhNdmFXNWtaWGhmYUdWeWJ5NXFjR2NwWEc0Z0lHSmhZMnRuY205MWJtUXRjRzl6YVhScGIyNDZJR05sYm5SbGNseHVJQ0JpWVdOclozSnZkVzVrTFhOcGVtVTZJR052ZG1WeVhHNGdJR2hsYVdkb2REb2dNakF3Y0hoY2JpQWdjRzl6YVhScGIyNDZJSEpsYkdGMGFYWmxYRzVjYmlBZ0syMWxaR2xoS0Z3aVBuUmhZbXhsZEZ3aUtWeHVJQ0FnSUdobGFXZG9kRG9nTkRZMWNIaGNibHh1WEc0Z0lDWmZYMmhsWVdSc2FXNWxYRzRnSUNBZ1ltOTBkRzl0T2lBemNtVnRYRzRnSUNBZ1kyOXNiM0k2SUNSM2FHbDBaVnh1SUNBZ0lHWnZiblF0Wm1GdGFXeDVPaUJ6WlhKcFpseHVJQ0FnSUdadmJuUXRjMmw2WlRvZ05YSmxiVnh1SUNBZ0lHWnZiblF0ZDJWcFoyaDBPaUFrYm05eWJXRnNYRzRnSUNBZ2JHVm1kRG9nTW5KbGJWeHVJQ0FnSUd4cGJtVXRhR1ZwWjJoME9pQXhYRzRnSUNBZ2NHOXphWFJwYjI0NklHRmljMjlzZFhSbFhHNGdJQ0FnYldGeVoybHVPaUF3SURBZ01YSmxiU0F4Y21WdFhHNGdJQ0FnZEdWNGRDMXphR0ZrYjNjNklESndlQ0F5Y0hnZ01uQjRJQ1JqYUdGeVkyOWhiRnh1WEc0Z0lDQWdLMjFsWkdsaEtGd2lQSFJoWW14bGRGd2lLVnh1SUNBZ0lDQWdjRzl6YVhScGIyNDZJSE4wWVhScFkxeHVJQ0FnSUNBZ1ptOXVkQzF6YVhwbE9pQXljbVZ0WEc0Z0lDQWdJQ0J3WVdSa2FXNW5PaUF5Y21WdFhHNWNiaTh2SUVKaGJtNWxjaUJUZEdGdVpHRnlaQ0F0SUZSb2FYTWdhWE1nWm05MWJtUWdiMjRnZEdobElHMWhhbTl5YVhSNUlHOW1JSFJvWlNCcGJuUmxjbTVoYkNCd1lXZGxjMXh1TG1KaGJtNWxjaTF6ZEdGdVpHRnlaRnh1SUNCaVlXTnJaM0p2ZFc1a09pQWtaM0psWlc1Y2JpQWdZMjlzYjNJNklDUjNhR2wwWlZ4dUlDQmthWE53YkdGNU9pQjBZV0pzWlZ4dUlDQm9aV2xuYUhRNklHRjFkRzljYmx4dUlDQXZMeUJIWlhRZ2NtbGtJRzltSUhkbGFYSmtJSE53WVdObElHSmxiRzkzSUdsdFlXZGxJR2x1SUhSb1pTQmlZVzV1WlhKelhHNGdJR2x0WjF4dUlDQWdJR1JwYzNCc1lYazZJR0pzYjJOclhHNWNiaUFnSmw5ZlltOTRYRzRnSUNBZ2NHRmtaR2x1WnpvZ01YSmxiU0F5Y21WdFhHNWNiaUFnSmw5ZmFHVmhaR2x1WjF4dUlDQWdJR052Ykc5eU9pQWtkMmhwZEdWY2JseHVJQ0FtWDE5MFpYaDBYRzVjYmlBZ0psOWZiV1ZrYVdGY2JpQWdJQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlPaUFrYzJ4aGRHVmNibHh1SUNBdkx5QlVhR2x6SUdseklHWnZkVzVrSUc5dUlIUm9aU0JCY0hCeWIyRmphQ0JRWVdkbFhHNGdJQ1pmWDIxbFpHbGhMV0Z3Y0hKdllXTm9YRzRnSUNBdkx5QmlZV05yWjNKdmRXNWtMV2x0WVdkbE9pQjFjbXdvTGk0dmFXMWhaMlZ6TDIxbFpYUnBibWN1YW5CbktWeHVJQ0FnTHk4Z1ltRmphMmR5YjNWdVpDMXdiM05wZEdsdmJqb2dZMlZ1ZEdWeVhHNGdJQ0F2THlCaVlXTnJaM0p2ZFc1a0xYTnBlbVU2SUdOdmRtVnlYRzVjYmlBZ0lDQXJiV1ZrYVdFb1hDSThQWFJoWW14bGRGd2lLVnh1SUNBZ0lDQWdhR1ZwWjJoME9pQXpNREJ3ZUZ4dVhHNGdJQzh2SUZSb2FYTWdhWE1nWm05MWJtUWdiMjRnZEdobElFeGxZV1JsY25Ob2FYQWdjR0ZuWlZ4dUlDQW1YMTl0WldScFlTMXNaV0ZrWlhKemFHbHdYRzRnSUNBdkx5QmlZV05yWjNKdmRXNWtMV2x0WVdkbE9pQjFjbXdvTGk0dmFXMWhaMlZ6TDNCbGIzQnNaUzVxY0djcFhHNGdJQ0F2THlCaVlXTnJaM0p2ZFc1a0xYQnZjMmwwYVc5dU9pQmpaVzUwWlhKY2JpQWdJQzh2SUdKaFkydG5jbTkxYm1RdGMybDZaVG9nWTI5MlpYSmNibHh1SUNBZ0lDdHRaV1JwWVNoY0lqdzlkR0ZpYkdWMFhDSXBYRzRnSUNBZ0lDQm9aV2xuYUhRNklETXdNSEI0WEc1Y2JpOHZJRUpoYm01bGNpQlFZVzV2Y21GdFlTQXRJRlJvYVhNZ2FYTWdabTkxYm1RZ2IyNGdkR2hsSUU1bGQzTWdjR0ZuWlZ4dUxtSmhibTVsY2kxd1lXNXZjbUZ0WVZ4dUlDQmlZV05yWjNKdmRXNWtMV2x0WVdkbE9pQjFjbXdvTGk0dmFXMWhaMlZ6TDNSeVpXVnpMbXB3WnlsY2JpQWdZbUZqYTJkeWIzVnVaQzF3YjNOcGRHbHZiam9nWTJWdWRHVnlYRzRnSUdKaFkydG5jbTkxYm1RdGMybDZaVG9nWTI5MlpYSmNiaUFnYUdWcFoyaDBPaUF5TlRWd2VGeHVJaXdpTG1OaGNtUXRaR2x3ZEdsalhHNGdJR1JwYzNCc1lYazZJSFJoWW14bFhHNGdJR0p2Y21SbGNpMTBiM0E2SURGd2VDQnpiMnhwWkNBa1ltOXlaR1Z5UTI5c2IzSmNiaUFnWW05eVpHVnlMV0p2ZEhSdmJUb2dNWEI0SUhOdmJHbGtJQ1JpYjNKa1pYSkRiMnh2Y2x4dVhHNGdJQ3R5WlhOd2IyNXphWFpsTFhOMFlXTnJYRzVjYmlBZ0psOWZZbTk0WEc0Z0lDQWdaR2x6Y0d4aGVUb2dkR0ZpYkdVdFkyVnNiRnh1SUNBZ0lIWmxjblJwWTJGc0xXRnNhV2R1T2lCdGFXUmtiR1ZjYmx4dUlDQWdJSEJoWkdScGJtYzZJREp5WlcwZ01YSmxiVnh1WEc0Z0lDQWdLMjFsWkdsaEtGd2lQblJoWW14bGRGd2lLVnh1SUNBZ0lDQWdjR0ZrWkdsdVp6b2dNbkpsYlNBeGNtVnRJREp5WlcwZ01uSmxiVnh1WEc0Z0lDQWdKanB1ZEdndFkyaHBiR1FvTWlsY2JpQWdJQ0FnSUN0dFpXUnBZU2hjSWo1MFlXSnNaWFJjSWlsY2JpQWdJQ0FnSUNBZ1ltOXlaR1Z5TFd4bFpuUTZJREZ3ZUNCemIyeHBaQ0FrWW05eVpHVnlRMjlzYjNKY2JpQWdJQ0FnSUNBZ2NHRmtaR2x1WnpvZ01uSmxiU0F5Y21WdElESnlaVzBnTVhKbGJWeHVYRzRnSUNaZlgyaGxZV1JwYm1kY2JpQWdJQ0IwWlhoMExXRnNhV2R1T2lCalpXNTBaWEpjYmx4dUlDQW1YMTl0WldScFlWeHVJQ0FnSUdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNSbmNtVmxibHh1SUNBZ0lHaGxhV2RvZERvZ01UVXdjSGhjYmlBZ0lDQnZkbVZ5Wm14dmR6b2dhR2xrWkdWdVhHNGdJQ0FnYldGeVoybHVMV0p2ZEhSdmJUb2dNbkpsYlZ4dVhHNGdJQ1pmWDNSbGVIUmNiaUFnSUNCMFpYaDBMV0ZzYVdkdU9pQmpaVzUwWlhKY2JpQWdJQ0J0WVhKbmFXNHRZbTkwZEc5dE9pQXljbVZ0WEc1Y2JpQWdkV3hjYmlBZ0lDQnNhWE4wTFhOMGVXeGxPaUJ1YjI1bFhHNGdJQ0FnZEdWNGRDMWhiR2xuYmpvZ1kyVnVkR1Z5WEc1Y2JpQWdJQ0JzYVZ4dUlDQWdJQ0FnWkdsemNHeGhlVG9nYVc1c2FXNWxMV0pzYjJOclhHNGdJQ0FnSUNCd1lXUmthVzVuT2lBdU5YSmxiVnh1SUNBZ0lDQWdkMmxrZEdnNklEUTNKVnh1WEc1Y2JpQWdKbDlmYkdsdWExeHVJQ0FnSUdOdmJHOXlPaUFrYzJsMFpTMTBaWGgwTFdOdmJHOXlMV3hwYm10Y2JpQWdJQ0JrYVhOd2JHRjVPaUJwYm14cGJtVXRZbXh2WTJ0Y2JpQWdJQ0JtYjI1MExXWmhiV2xzZVRvZ0pITmxjbWxtWEc0Z0lDQWdjR0ZrWkdsdVp6b2dNQ0F1TkhKbGJWeHVJQ0FnSUNZNmFHOTJaWEpjYmlBZ0lDQWdJR052Ykc5eU9pQWtjMmwwWlMxMFpYaDBMV052Ykc5eUxXeHBibXN0YUc5MlpYSmNibHh1WEc0dkx5QkRZWEprSUVKcGJ5QXRJRlJvWlhObElHRnlaU0JtYjNWdVpDQnZiaUIwYUdVZ1RHVmhaR1Z5YzJocGNDQndZV2RsWEc0dVkyRnlaQzFpYVc5Y2JpQWdjR0ZrWkdsdVp5MWliM1IwYjIwNklESnlaVzFjYmx4dUlDQXJiV1ZrYVdFb1hDSThQWFJoWW14bGRGd2lLVnh1SUNBZ0lHSnZjbVJsY2kxaWIzUjBiMjA2SURGd2VDQnpiMnhwWkNBa1kyeHZkV1JjYmlBZ0lDQnRZWEpuYVc0dFltOTBkRzl0T2lBeWNtVnRYRzVjYmlBZ0psOWZiV1ZrYVdGY2JpQWdJQ0IyWlhKMGFXTmhiQzFoYkdsbmJqb2dkRzl3WEc1Y2JpQWdJQ0FyYldWa2FXRW9YQ0k4UFhSaFlteGxkRndpS1Z4dUlDQWdJQ0FnYldGeVoybHVMV0p2ZEhSdmJUb2dNWEpsYlZ4dUlDQWdJQ0FnZEdWNGRDMWhiR2xuYmpvZ1kyVnVkR1Z5WEc1Y2JpQWdJQ0JwYldkY2JpQWdJQ0FnSUN0dFpXUnBZU2hjSWp3OWRHRmliR1YwWENJcFhHNGdJQ0FnSUNBZ0lHUnBjM0JzWVhrNklHbHViR2x1WlMxaWJHOWphMXh1SUNBZ0lDQWdJQ0IzYVdSMGFEb2dNek1sWEc1Y2JpQWdKbDlmWW05NFhHNGdJQ0FnY0dGa1pHbHVaeTFzWldaME9pQXljbVZ0WEc0Z0lDQWdjR0ZrWkdsdVp5MTBiM0E2SURCY2JpQWdJQ0IyWlhKMGFXTmhiQzFoYkdsbmJqb2dkRzl3WEc1Y2JpQWdJQ0FyYldWa2FXRW9YQ0k4UFhSaFlteGxkRndpS1Z4dUlDQWdJQ0FnY0dGa1pHbHVaem9nTUZ4dVhHNGdJQ1pmWDJobFlXUnBibWRjYmlBZ0lDQXZMMDFwZUdsdUlHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGVYQnZaM0poY0doNVhHNGdJQ0FnSzNOMFlXNWtZWEprTFdobFlXUnBibWNvS1Z4dVhHNGdJQ1pmWDNOMVluUnBkR3hsWEc0Z0lDQWdZMjlzYjNJNklDUnpkRzl1WlZ4dVhHNGdJQ0FnYUROY2JpQWdJQ0FnSUdScGMzQnNZWGs2SUdsdWJHbHVaUzFpYkc5amExeHVJQ0FnSUdGY2JpQWdJQ0FnSUdOdmJHOXlPaUFrWjNKbFpXNWNiaUFnSUNBZ0lHMWhjbWRwYmkxc1pXWjBPaUF4TUhCNFhHNGdJQ0FnSUNCcFhHNGdJQ0FnSUNBZ0lHSnZjbVJsY2pveGNIZ2djMjlzYVdRZ0pHZHlaV1Z1WEc0Z0lDQWdJQ0FnSUhCaFpHUnBibWM2SURKd2VGeHVYRzRnSUNaZlgzUmxlSFJjYmx4dUlDQWdJQ3R0WldScFlTaGNJanc5ZEdGaWJHVjBYQ0lwWEc0Z0lDQWdJQ0IwWlhoMExXRnNhV2R1T2lCc1pXWjBYRzVjYmlBZ0lDQXFJQ3NnS2x4dUlDQWdJQ0FnYldGeVoybHVMWFJ2Y0RvZ01YSmxiVnh1WEc1Y2JpOHZJRU5oY21RZ1lYSjBhV05zWlNBdElGUm9aWE5sSUdGeVpTQm1iM1Z1WkNCdmJpQjBhR1VnVG1WM2N5QmhibVFnU1c1emFXZG9kSE1nY0dGblpWeHVMbU5oY21RdFlYSjBhV05zWlZ4dVhHNWNiaUFnSmw5ZlltOTRYRzRnSUNBZ1ltOTRMWE5vWVdSdmR6b2dNQ0F4Y0hnZ01DQWtaM0psWlc1Y2JpQWdJQ0JrYVhOd2JHRjVPaUJ1YjI1bFhHNGdJQ0FnSzNabGNuUXRjR0ZrWkdsdVp5Z3hMREVwWEc1Y2JpQWdJQ0FxSUNzZ0tseHVJQ0FnSUNBZ2JXRnlaMmx1TFhSdmNEb2dNWEpsYlZ4dVhHNGdJR2d5WEc0Z0lDQWdLM04wWVc1a1lYSmtMV2hsWVdScGJtY29LU0F2TDAxcGVHbHVJR05oYmlCaVpTQm1iM1Z1WkNCcGJpQjBlWEJ2WjNKaGNHaDVYRzVjYmlBZ2MyMWhiR3hjYmlBZ0lDQmpiMnh2Y2pvZ0l6WTJObHh1SUNBZ0lHWnZiblF0YzJsNlpUb2dMamMxY21WdFhHNWNiaUFnY0Z4dVhHNHViRzloWkdWeVgxOXVZWFpjYmlBZ1pHbHpjR3hoZVRvZ2RHRmliR1V0WTJWc2JGeHVJQ0J3WVdSa2FXNW5MWFJ2Y0RvZ01TNHlOWEpsYlZ4dVhHNWNiaTVqWVhKa0xYUnlhWEIwYVdOY2JpQWdaR2x6Y0d4aGVUb2dkR0ZpYkdWY2JpQWdZbTl5WkdWeUxYUnZjRG9nTVhCNElITnZiR2xrSUNSaWIzSmtaWEpEYjJ4dmNseHVJQ0JpYjNKa1pYSXRZbTkwZEc5dE9pQXhjSGdnYzI5c2FXUWdKR0p2Y21SbGNrTnZiRzl5WEc1Y2JpQWdKbDlmWW05NFhHNGdJQ0FnY0dGa1pHbHVaem9nTW5KbGJWeHVJQ0FnSUhabGNuUnBZMkZzTFdGc2FXZHVPaUIwYjNCY2JseHVJQ0FnSUNZNmJuUm9MV05vYVd4a0tESXBYRzRnSUNBZ0lDQXJiV1ZrYVdFb1hDSStkR0ZpYkdWMFhDSXBYRzRnSUNBZ0lDQWdJR0p2Y21SbGNpMXNaV1owT2lBeGNIZ2djMjlzYVdRZ0pHSnZjbVJsY2tOdmJHOXlYRzRnSUNBZ0lDQWdJQzh2Y0dGa1pHbHVaem9nTW5KbGJTQXhjbVZ0SURKeVpXMGdNWEpsYlZ4dVhHNGdJQ0FnSmpwdWRHZ3RZMmhwYkdRb015bGNiaUFnSUNBZ0lDdHRaV1JwWVNoY0lqNTBZV0pzWlhSY0lpbGNiaUFnSUNBZ0lDQWdZbTl5WkdWeUxXeGxablE2SURGd2VDQnpiMnhwWkNBa1ltOXlaR1Z5UTI5c2IzSmNiaUFnSUNBZ0lDQWdMeTl3WVdSa2FXNW5PaUF5Y21WdElESnlaVzBnTW5KbGJTQXhjbVZ0WEc1Y2JpQWdKbDlmYldWa2FXRmNiaUFnSUNBdkwySmhZMnRuY205MWJtUXRZMjlzYjNJNklDUm5jbVZsYmx4dUlDQWdJR2hsYVdkb2REb2dNVFV3Y0hoY2JpQWdJQ0J2ZG1WeVpteHZkem9nYUdsa1pHVnVYRzRnSUNBZ2JXRnlaMmx1TFdKdmRIUnZiVG9nTW5KbGJWeHVYRzRnSUNBZ2FXMW5YRzVjYmlBZ0psOWZhR1ZoWkdsdVp5MXNhVzVyWEc0Z0lDQWdLM050WVd4c0xXaGxZV1JwYm1jb0tWeHVJQ0FnSUdOdmJHOXlPaUFrYzJsMFpTMTBaWGgwTFdOdmJHOXlMV3hwYm10Y2JpQWdJQ0JrYVhOd2JHRjVPaUJwYm14cGJtVXRZbXh2WTJ0Y2JpQWdJQ0IwWlhoMExXRnNhV2R1T2lCalpXNTBaWEpjYmx4dUlDQWdJQ1k2YUc5MlpYSmNiaUFnSUNBZ0lHTnZiRzl5T2lBa2MybDBaUzEwWlhoMExXTnZiRzl5TFd4cGJtc3RhRzkyWlhKY2JseHVJQ0FtWDE5MFpYaDBYRzRnSUNBZ2RHVjRkQzFoYkdsbmJqb2dZMlZ1ZEdWeVhHNGlMQ0l2TDF4dUx5OURWRUZ6SUMwZ1EyRnNiQ0IwYnlCQlkzUnBiMjRnYlc5a2RXeGxjMXh1THk5Y2JseHVMeTlEYjI1MFlXTjBJRU5VUVZ4dUx5OVVhR2x6SUdseklHWnZkVzVrSUc5dUlIUm9aU0JvYjIxbGNHRm5aU0J2Ym14NUlISnBaMmgwSUc1dmQxeHVMbU4wWVMxamIyNTBZV04wWEc0Z0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDUnpiR0YwWlZ4dUlDQmthWE53YkdGNU9pQjBZV0pzWlZ4dUlDQjNhV1IwYURvZ01UQXdKVHRjYmx4dUlDQW1YMTlpYjNoY2JpQWdJQ0J3WVdSa2FXNW5PaUF5Y21WdFhHNWNiaUFnSmw5ZlltOTRPbTUwYUMxamFHbHNaQ2d5S1Z4dUlDQWdJSEJoWkdScGJtYzZJREp5WlcwZ01GeHVYRzVjYmlBZ0psOWZkR1Y0ZEZ4dUlDQWdJRzFoY21kcGJqb2dNRnh1SUNBZ0lIQmhaR1JwYm1jNklEQWdNeTQxY21WdElEQWdNbkpsYlZ4dVhHNGdJQ0FnSzIxbFpHbGhLRndpUEQxMFlXSnNaWFJjSWlsY2JpQWdJQ0FnSUhCaFpHUnBibWM2SURCY2JseHVJQ0FtWDE5aWRYUjBiMjVjYmlBZ0lDQmthWE53YkdGNU9pQnBibXhwYm1VdFlteHZZMnRjYmlBZ0lDQnRZWEpuYVc0NklEQWdNbkpsYlNBd0lEQmNibHh1SUNBZ0lDdHRaV1JwWVNoY0lqdzlkR0ZpYkdWMFhDSXBYRzRnSUNBZ0lDQnRZWEpuYVc0NklEQmNibHh1WEc0dkwxWnBaR1Z2SUhSbFlYTmxjaUJEVkVGY2JpOHZWR2hwY3lCcGN5Qm1iM1Z1WkNCdmJpQjBhR1VnYUc5dFpYQmhaMlVnYjI1c2VTQnlhV2RvZENCdWIzZGNiaTVqZEdFdGRHVmhjMlZ5WEc0Z0lHUnBjM0JzWVhrNklIUmhZbXhsWEc0Z0lIQmhaR1JwYm1jNklERnlaVzBnTW5KbGJWeHVYRzRnSUN0dFpXUnBZU2hjSWp3OWRHRmliR1YwWENJcFhHNGdJQ0FnWm14bGVDMW1iRzkzT2lCamIyeDFiVzVjYmx4dUlDQW1YMTlpYjNoY2JpQWdJQ0J3WVdSa2FXNW5MWEpwWjJoME9pQXljbVZ0WEc1Y2JpQWdJQ0FyYldWa2FXRW9YQ0k4UFhSaFlteGxkRndpS1Z4dUlDQWdJQ0FnY0dGa1pHbHVaem9nTUZ4dVhHNGdJQ1pmWDJobFlXUnBibWRjYmx4dUlDQW1YMTkwWlhoMFhHNGdJQ0FnYldGeVoybHVMV0p2ZEhSdmJUb2dNbkpsYlZ4dVhHNWNiaUFnSmw5ZmJXVmthV0ZjYmlBZ0lDQm9aV2xuYUhRNklETXdNSEI0WEc0Z0lDQWdiM1psY21ac2IzYzZJR2hwWkdSbGJseHVYRzRnSUNBZ0syMWxaR2xoS0Z3aVBEMTBZV0pzWlhSY0lpbGNiaUFnSUNBZ0lHaGxhV2RvZERvZ1lYVjBiMXh1SUNBZ0lDQWdiV0Z5WjJsdUxYUnZjRG9nTW5KbGJWeHVYRzVjYmk4dlEyVnVkR1Z5WldRZ1ExUkJYRzR2TDFSb2FYTWdhWE1nWm05MWJtUWdiMjRnZEdobElHaHZiV1Z3WVdkbElHOXViSGtnY21sbmFIUWdibTkzWEc0dVkzUmhMV05sYm5SbGNseHVJQ0J3WVdSa2FXNW5PaUF5Y21WdFhHNGdJSFJsZUhRdFlXeHBaMjQ2SUdObGJuUmxjbHh1WEc0Z0lDWmZYMmhsWVdScGJtZGNibHh1SUNBbVgxOTBaWGgwWEc0Z0lDQWdjR0ZrWkdsdVp6b2dNQ0E0Y21WdFhHNGdJQ0FnYldGeVoybHVMV0p2ZEhSdmJUb2dNbkpsYlZ4dVhHNGdJQ0FnSzIxbFpHbGhLRndpUEQxMFlXSnNaWFJjSWlsY2JpQWdJQ0FnSUhCaFpHUnBibWM2SURCY2JseHVJQ0FtWDE5aWRYUjBiMjVjYmx4dVhHNWNiaTh2VTNWaWMyTnlhV0psSUVOVVFTQXRJRlJvYVhNZ2FYTWdabTkxYm1RZ1lYUWdkR2hsSUhSdmNDQnZaaUIwYUdVZ1ptOXZkR1Z5WEc0dVkzUmhMWE4xWW5OamNtbGlaVnh1SUNCaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lBa1ozSmxaVzVjYmlBZ1kyOXNiM0k2SUNSM2FHbDBaVnh1SUNBcmRtVnlkQzF3WVdSa2FXNW5LREVzTVM0MUtWeHVYRzRnSUNaZlgyaGxZV1JwYm1kY2JpQWdJQ0JqYjJ4dmNqb2dKSGRvYVhSbFhHNGdJQ0FnZEdWNGRDMWhiR2xuYmpvZ1kyVnVkR1Z5WEc1Y2JpQWdKbDlmWW05NFhHNGdJQ0FnWkdsemNHeGhlVG9nZEdGaWJHVmNiaUFnSUNCdFlYSm5hVzQ2SURBZ1lYVjBiMXh1SUNBZ0lIZHBaSFJvT2lBM05TVmNibHh1SUNBdkx5QlVUMFJQSUhWelpTQmpiMndnWTJ4aGMzTWdhVzV6ZEdWaFpDQm1iM0lnZDJsa2RHaGNiaUFnSmw5ZmFXNXdkWFF0WVdSa0xXOXVYRzVjYmx4dUlDQW1YMTlwYm5CMWRGeHVJQ0FnSUhCaFpHUnBibWM2SUM0NWNtVnRYRzRnSUNBZ2QybGtkR2c2SURFd01DVmNibHh1SUNBbVgxOWlkWFIwYjI1Y2JpQWdJQ0JpYjNKa1pYSTZJREZ3ZUNCemIyeHBaQ0FrZDJocGRHVmNiaUFnSUNCamIyeHZjam9nSkhkb2FYUmxYRzRnSUNBZ1ptOXVkQzF6YVhwbE9pQXhMalZ5WlcxY2JpQWdJQ0J0WVhKbmFXNHRiR1ZtZERvZ01YSmxiVnh1SUNBZ0lIZHBaSFJvT2lBeE1EQWxYRzRnSUNBZ2RISmhibk5wZEdsdmJqb2dZV3hzSUM0eWN5QmxZWE5sWEc1Y2JpQWdJQ0FtT21odmRtVnlYRzRnSUNBZ0lDQXZLbFJvWlhObElIZHBiR3dnZEhKaGJuTnBkR2x2YmlCdmJpQm9iM1psY2x4dUlDQWdJQ0FnWW1GamEyZHliM1Z1WkMxamIyeHZjam9nSkhkb2FYUmxYRzRnSUNBZ0lDQmpiMnh2Y2pvZ0pHZHlaV1Z1WEc1Y2JpQWdJQ0FyYldWa2FXRW9YQ0k4UFhSaFlteGxkRndpS1Z4dUlDQWdJQ0FnYldGeVoybHVPaUF4Y21WdElEQWdNQ0F3WEc1Y2JpQWdKbDlmYldWemMyRm5aVnh1SUNBZ0lHUnBjM0JzWVhrNklHNXZibVZjYmlBZ0lDQndZV1JrYVc1bkxYUnZjRG9nTWk0MWNtVnRYRzVjYmlBZ0psOWZaWEp5YjNKY2JpQWdJQ0JrYVhOd2JHRjVPaUJ1YjI1bFhHNGdJQ0FnY0dGa1pHbHVaeTEwYjNBNklERnlaVzFjYmx4dUlDQWdJQ1l0YlhOblhHNGdJQ0FnSUNCMFpYaDBMV0ZzYVdkdU9pQmpaVzUwWlhKY2JseHVYRzR2TDFOcFpHVmlZWElnUTFSQklDMGdWR2hwY3lCcGN5Qm1iM1Z1WkNCdmJpQnBiblJsY201aGJDQndZV2RsY3lCdmJteDVYRzR1WTNSaExYTnBaR1ZpWVhKY2JpQWdjR0ZrWkdsdVp6b2dNWEpsYlNBd0lEQWdOWEpsYlZ4dUlDQjJaWEowYVdOaGJDMWhiR2xuYmpvZ2RHOXdYRzVjYmlBZ0syMWxaR2xoS0Z3aVBEMTBZV0pzWlhSY0lpbGNiaUFnSUNCd1lXUmthVzVuT2lBemNtVnRJREp5WlcxY2JseHVJQ0FtWDE5dFpXUnBZVnh1SUNBZ0lDOHZhR1ZwWjJoME9pQXhPREJ3ZUZ4dUlDQWdJQzh2YjNabGNtWnNiM2M2SUdocFpHUmxibHh1WEc0Z0lDQWdLMjFsWkdsaEtGd2lQRDEwWVdKc1pYUmNJaWxjYmx4dVhHNGdJQ0FnYVcxblhHNWNiaUFnSmw5ZmFHVmhaR2x1WjF4dUlDQWdJR1p2Ym5RdGMybDZaVG9nTVM0eU5YSmxiVnh1SUNBZ0lDdDJaWEowTFcxaGNtZHBiaWd1TlN3dU5TbGNibHh1SUNBbVgxOTBaWGgwWEc1Y2JpQWdKbDlmWW5WMGRHOXVYRzRnSUNBZ2JXRnlaMmx1TFhSdmNEb2dNWEpsYlZ4dVhHNHZMMEZrWkNCemIyMWxJSE53WVdOcGJtY2dkMmhsYmlCMGFHVnlaU2R6SUcxMWJIUnBjR3hsSUhOcFpHVmlZWElnYVhSbGJYTmNiaTVqZEdFdGMybGtaV0poY2w5ZlluVjBkRzl1SUNzZ0xtTjBZUzF6YVdSbFltRnlYMTlvWldGa2FXNW5MRnh1TG1OMFlTMXphV1JsWW1GeVgxOTBaWGgwSUNzZ0xtTjBZUzF6YVdSbFltRnlYMTlvWldGa2FXNW5YRzRnSUcxaGNtZHBiaTEwYjNBNklESnlaVzFjYmx4dVhHNWNiaTh2VTI5amFXRnNJRU5VUVNBdElGUm9aWE5sSUdGeVpTQmpkWEp5Wlc1MGJIa2dabTkxYm1RZ1lYUWdkR2hsSUdKdmRIUnZiU0J2WmlCMGFHVWdZbXh2WnlCd2IzTjBjMXh1TG1OMFlTMXpiMk5wWVd4Y2JpQWdjR0ZrWkdsdVp5MXNaV1owT2lBeGNtVnRYRzVjYmlBZ0xtbGpiMjVjYmlBZ0lDQm1hV3hzT2lBa1ozSmxaVzVjYmx4dUlDQWdJQ1k2YUc5MlpYSmNiaUFnSUNBZ0lHWnBiR3c2SUNSbmNtRndhR2wwWlZ4dUlpd2lMeTlHYjI5MFpYSmNiaVJtYjI5MFpYSXRhR1ZoWkdWeUxXNWhkam9nVkhKbFluVmphR1YwSUUxVFhHNWNibVp2YjNSbGNseHVYSFJ3WVdSa2FXNW5MV0p2ZEhSdmJUb2dOWEpsYlZ4dVhHNWNkQ3R0WldScFlTaGNJanc5ZEdGaWJHVjBYQ0lwWEc1Y2RGeDBjR0ZrWkdsdVp6b2dNRnh1WEc1Y2JpNW1iMjkwWlhJdFkyOXdlWEpwWjJoMFhHNWNkR0p2Y21SbGNpMTBiM0E2SURGd2VDQnpiMnhwWkNBa1kyeHZkV1JjYmx4MFpHbHpjR3hoZVRvZ2RHRmliR1ZjYmx4MGNHRmtaR2x1WnpvZ01uSmxiVnh1WEhSM2FXUjBhRG9nTVRBd0pWeHVYRzVjZEN0dFpXUnBZU2hjSWp3OWRHRmliR1YwWENJcFhHNWNkRngwY0dGa1pHbHVaem9nTW5KbGJTQXdJREFnTUZ4dVhHNWNkQ1pmWDJ4dloyOHRZbTk0WEc1Y2RGeDBkMmxrZEdnNklEUTFNSEI0WEc1Y2JseDBYSFFyYldWa2FXRW9YQ0k4UFhSaFlteGxkRndpS1Z4dVhIUmNkRngwWkdsemNHeGhlVG9nYVc1c2FXNWxMV0pzYjJOclhHNWNibHgwWEhSY2RDNXNiMmR2WDE5emRHRmphMlZrWEc1Y2RGeDBYSFJjZEdScGMzQnNZWGs2SUdsdWJHbHVaUzFpYkc5amExeHVYSFJjZEZ4MFhIUjNhV1IwYURvZ01qVXdjSGhjYmx4dVhHNWNkQ1pmWDJKdmVGeHVYSFJjZEhSbGVIUXRZV3hwWjI0NklISnBaMmgwWEc1Y2JseDBYSFFyYldWa2FXRW9YQ0krUFhSaFlteGxkRndpTENCY0lqNDlaR1Z6YTNSdmNGd2lLVnh1WEhSY2RGeDBkR1Y0ZEMxaGJHbG5iam9nY21sbmFIUmNibHh1WEhSY2RITnRZV3hzWEc1Y2RGeDBYSFJrYVhOd2JHRjVPaUJwYm14cGJtVXRZbXh2WTJ0Y2JseDBYSFJjZEdadmJuUXRjMmw2WlRvZ01UUndlRnh1WEhSY2RGeDBjR0ZrWkdsdVp5MXlhV2RvZERvZ0xqVnlaVzFjYmx4dVhIUmNkRngwSmpvNlltVm1iM0psWEc1Y2RGeDBYSFJjZEdOdmJuUmxiblE2SUNkOEoxeHVYRzVjZEZ4MFhIUW1PbTUwYUMxamFHbHNaQ2d4S1Z4dVhIUmNkRngwWEhRbU9qcGlaV1p2Y21WY2JseDBYSFJjZEZ4MFhIUmpiMjUwWlc1ME9pQW5JQ2RjYmx4dVhHNWNkRngwWEhRcmJXVmthV0VvWENJK1BYUmhZbXhsZEZ3aUxDQmNJajQ5WkdWemEzUnZjRndpS1Z4dVhIUmNkRngwWEhSbWIyNTBMWE5wZW1VNklERXljSGhjYmx4dVhIUmNkQzV1WVhZdGJXbHViM0pjYmx4dVhIUmNkRngwYkdsY2JseDBYSFJjZENBZ1lWeHVYSFJjZEZ4MElDQWdJR1p2Ym5RdGMybDZaVG9nTVRSd2VGeHVYRzVjZEZ4MFhIUWdJQ0FnSzIxbFpHbGhLRndpUGoxMFlXSnNaWFJjSWl3Z1hDSStQV1JsYzJ0MGIzQmNJaWxjYmx4MFhIUmNkQ0FnSUNBZ0lHWnZiblF0YzJsNlpUb2dNVEp3ZUZ4dVhHNHVabTl2ZEdWeUxXUnBjMk5zWVdsdFpYSmNibHgwZEdWNGRDMWhiR2xuYmpvZ1kyVnVkR1Z5WEc1Y2RIZHBaSFJvT2lBeE1EQWxYRzVjYmx4MEpsOWZZbTk0WEc1Y2RGeDBZbTl5WkdWeU9pQXhjSGdnYzI5c2FXUWdKR1p2YjNSbGNpMTBaWGgwWEc1Y2RGeDBaR2x6Y0d4aGVUb2dhVzVzYVc1bExXSnNiMk5yWEc1Y2RGeDBkR1Y0ZEMxaGJHbG5iam9nWTJWdWRHVnlYRzVjZEZ4MGNHRmtaR2x1WnpvZ01qQndlRnh1WEhSY2RHMWhjbWRwYmpvZ05UQndlQ0JoZFhSdklERXdjSGhjYmx4dVhIUm9OaXdnY0N3Z2RXeGNibHgwWEhSbWIyNTBMWE5wZW1VNklERTBjSGhjYmx4MFhIUnRZWEpuYVc0dFltOTBkRzl0T2lBeGNtVnRYRzVjYmx4MFhIUXJiV1ZrYVdFb1hDSStQWFJoWW14bGRGd2lMQ0JjSWo0OVpHVnphM1J2Y0Z3aUtWeHVYSFJjZEZ4MFptOXVkQzF6YVhwbE9pQXhNbkI0WEc1Y2JseDBkV3hjYmx4MFhIUkFaWGgwWlc1a0lDVnRaVzUxWEc1Y2RGeDBiV0Z5WjJsdUxYUnZjRG9nTUZ4dVhHNWNkRngwYkdsY2JseDBYSFJjZEdScGMzQnNZWGs2SUdsdWJHbHVaUzFpYkc5amExeHVYSFJjZEZ4MGJXRnlaMmx1T2lBd0lERXdjSGhjYmx4MFhIUmNkSEJoWkdScGJtYzZJQzQxY21WdFhHNGlMQ0pjYmtCclpYbG1jbUZ0WlhNZ1ptRmtaVWx1WEc0Z0lHWnliMjFjYmlBZ0lDQnZjR0ZqYVhSNU9pQXdYRzRnSUhSdlhHNGdJQ0FnYjNCaFkybDBlVG9nTVZ4dVhHNHVhR1ZoWkdWeVgxOXNiMmR2TFdKdmVGeHVJQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlPaUFrZDJocGRHVmNiaUFnWW05eVpHVnlMV3hsWm5RNklERndlQ0J6YjJ4cFpDQWtZbTl5WkdWeVEyOXNiM0pjYmlBZ1ltOXlaR1Z5TFhKcFoyaDBPaUF4Y0hnZ2MyOXNhV1FnSkdKdmNtUmxja052Ykc5eVhHNGdJRzFoY21kcGJqb2dNQ0JoZFhSdlhHNGdJRzFoZUMxM2FXUjBhRG9nTVRJd01IQjRYRzVjYmk4dklFWnZjaUJKUlRsY2JpNXVieTFqYzNOaGJtbHRZWFJwYjI1eklDNW9aV0ZrWlhKZlgyeHZaMjh0WW05NFhHNGdJSEJoWkdScGJtY3RkRzl3T2lBd1hHNWNiaTVvWldGa1pYSmZYMnh2WjI5Y2JpQWdZbUZqYTJkeWIzVnVaRG9nSkhkb2FYUmxYRzVjYmx4dUxteHZaMjljYmlBZ1pHbHpjR3hoZVRvZ1lteHZZMnRjYmlBZ2NHRmtaR2x1WnpvZ01ISmxiU0F3SURCeVpXMGdNbkpsYlZ4dUlDQjNhV1IwYURvZ05qQXdjSGhjYmx4dUlDQXJiV1ZrYVdFb1hDSThPVEF3Y0hoY0lpbGNiaUFnSUNCM2FXUjBhRG9nTkRBd2NIaGNibHh1SUNBcmJXVmthV0VvWENJOE5UQXdjSGhjSWlsY2JpQWdJQ0J3WVdSa2FXNW5PaUF4Y21WdFhHNGdJQ0FnZDJsa2RHZzZJRE13TUhCNFhHNWNiaTh2SUVadmNpQkpSVGxjYmk1dWJ5MWpjM05oYm1sdFlYUnBiMjV6SUM1c2IyZHZYRzRnSUdobGFXZG9kRG9nTmpod2VGeHVJQ0J3WVdSa2FXNW5PaUF3SURGeVpXMWNibHh1WEc1emRtZGNibHh1SUNCd1lYUm9MQ0J3YjJ4NVoyOXVYRzRnSUNBZ1ptbHNiRG9nSkdkeVpXVnVYRzVjYmlBZ0pqcG9iM1psY2lCd1lYUm9MRnh1SUNBbU9taHZkbVZ5SUhCdmJIbG5iMjVjYmlBZ0lDQnZjR0ZqYVhSNU9pQXVOMXh1SUNBZ0lIUnlZVzV6YVhScGIyNDZJR1pwYkd3Z01DNHljeUJsWVhObFhHNGdJQ0FnWm1sc2JDMXZjR0ZqYVhSNU9pQXdMamRjYmx4dUxteHZaMjlmWDNOMGNtVjBZMmhsWkZ4dUlDQmthWE53YkdGNU9pQmliRzlqYTF4dVhHNGdJQ3R0WldScFlTaGNJanc1TURCd2VGd2lLVnh1SUNBZ0lHUnBjM0JzWVhrNklHNXZibVZjYmx4dUxteHZaMjlmWDNOMFlXTnJaV1JjYmlBZ1pHbHpjR3hoZVRvZ2JtOXVaVnh1WEc0Z0lDdHRaV1JwWVNoY0lqdzVNREJ3ZUZ3aUtWeHVJQ0FnSUdScGMzQnNZWGs2SUdKc2IyTnJYRzVjYmx4dUx5OGdNalVnY0dsbFkyVnpYRzR1Ykc5bmIxOWZaMnh2WW1WY2JpQWdjR0YwYUZ4dUlDQXZMMHh2WjI4Z1RHOWhaQ0JCYm1sdFlYUnBiMjVjYmlBZ0x5OGdJQ0J2Y0dGamFYUjVPaUF3WEc0Z0lDOHZJQ0FnWVc1cGJXRjBhVzl1T2lCbVlXUmxTVzRnWldGelpTMXBiaUF4WEc0Z0lDOHZJQ0FnWVc1cGJXRjBhVzl1TFdacGJHd3RiVzlrWlRvZ1ptOXlkMkZ5WkhOY2JpQWdMeThnSUNCaGJtbHRZWFJwYjI0dFpIVnlZWFJwYjI0NklDNDFjMXh1WEc0Z0lDOHZJSEJoZEdnNmJuUm9MV05vYVd4a0tERXBYRzRnSUM4dklDQWdZVzVwYldGMGFXOXVMV1JsYkdGNU9pQXdMakZ6WEc1Y2JpQWdMeThnY0dGMGFEcHVkR2d0WTJocGJHUW9NaWxjYmlBZ0x5OGdJQ0JoYm1sdFlYUnBiMjR0WkdWc1lYazZJREF1TVRGelhHNWNiaUFnTHk4Z2NHRjBhRHB1ZEdndFkyaHBiR1FvTXlsY2JpQWdMeThnSUNCaGJtbHRZWFJwYjI0dFpHVnNZWGs2SURBdU1qSnpYRzVjYmlBZ0x5OGdjR0YwYURwdWRHZ3RZMmhwYkdRb05DbGNiaUFnTHk4Z0lDQmhibWx0WVhScGIyNHRaR1ZzWVhrNklEQXVNVE56WEc1Y2JpQWdMeThnY0dGMGFEcHVkR2d0WTJocGJHUW9OU2xjYmlBZ0x5OGdJQ0JoYm1sdFlYUnBiMjR0WkdWc1lYazZJREF1TVRSelhHNWNiaUFnTHk4Z2NHRjBhRHB1ZEdndFkyaHBiR1FvTmlsY2JpQWdMeThnSUNCaGJtbHRZWFJwYjI0dFpHVnNZWGs2SURBdU1UVnpYRzVjYmlBZ0x5OGdjR0YwYURwdWRHZ3RZMmhwYkdRb055bGNiaUFnTHk4Z0lDQmhibWx0WVhScGIyNHRaR1ZzWVhrNklEQXVNVFp6WEc1Y2JpQWdMeThnY0dGMGFEcHVkR2d0WTJocGJHUW9PQ2xjYmlBZ0x5OGdJQ0JoYm1sdFlYUnBiMjR0WkdWc1lYazZJREF1TXpkelhHNWNiaUFnTHk4Z2NHRjBhRHB1ZEdndFkyaHBiR1FvT1NsY2JpQWdMeThnSUNCaGJtbHRZWFJwYjI0dFpHVnNZWGs2SURBdU1UaHpYRzVjYmlBZ0x5OGdjR0YwYURwdWRHZ3RZMmhwYkdRb01UQXBYRzRnSUM4dklDQWdZVzVwYldGMGFXOXVMV1JsYkdGNU9pQXdMakU1YzF4dVhHNGdJQzh2SUhCaGRHZzZiblJvTFdOb2FXeGtLREV4S1Z4dUlDQXZMeUFnSUdGdWFXMWhkR2x2Ymkxa1pXeGhlVG9nTUM0eU1ITmNibHh1SUNBdkx5QndZWFJvT201MGFDMWphR2xzWkNneE1pbGNiaUFnTHk4Z0lDQmhibWx0WVhScGIyNHRaR1ZzWVhrNklEQXVNakZ6WEc1Y2JpQWdMeThnY0dGMGFEcHVkR2d0WTJocGJHUW9NVE1wWEc0Z0lDOHZJQ0FnWVc1cGJXRjBhVzl1TFdSbGJHRjVPaUF3TGpFeWMxeHVYRzRnSUM4dklIQmhkR2c2Ym5Sb0xXTm9hV3hrS0RFMEtWeHVJQ0F2THlBZ0lHRnVhVzFoZEdsdmJpMWtaV3hoZVRvZ01DNHlNM05jYmx4dUlDQXZMeUJ3WVhSb09tNTBhQzFqYUdsc1pDZ3hOU2xjYmlBZ0x5OGdJQ0JoYm1sdFlYUnBiMjR0WkdWc1lYazZJREF1TXpSelhHNWNiaUFnTHk4Z2NHRjBhRHB1ZEdndFkyaHBiR1FvTVRZcFhHNGdJQzh2SUNBZ1lXNXBiV0YwYVc5dUxXUmxiR0Y1T2lBd0xqSTFjMXh1WEc1Y2JpNXVieTFqYzNOaGJtbHRZWFJwYjI1eklDNXNiMmR2WDE5bmJHOWlaVnh1SUNCd1lYUm9YRzRnSUNBZ1ptbHNiRG9nSkdkeVpXVnVYRzRnSUNBZ2IzQmhZMmwwZVRvZ01WeHVYRzR2THlCUGRHaGxjaUJqYkdGemMyVnpJR1p2Y2lCaGJtbHRZV2wwYjI0Z2JXRjVZbVZjYmk4dklDNXNiMmR2WDE5MFpYaDBYRzR2TDF4dUx5OGdMbXh2WjI5ZlgyTnZiVzFsY21ObFhHNHZMeUFnSUhCaGRHZ3NJSEJ2YkhsbmIyNWNiaTh2WEc0dkwxeHVMeThnTG14dloyOWZYM1J5ZFhOMFhHNHZMeUFnSUhCaGRHZ3NJSEJ2YkhsbmIyNWNiaTh2WEc0dkwxeHVMeThnTG14dloyOWZYM1JoWjJ4cGJtVmNiaTh2SUNBZ2NHRjBhQ3dnY0c5c2VXZHZibHh1SWl3aUx5OHRJRlJvYVhNZ1kyOXVkR0ZwYm1WeUlHaHZiR1FnZEdobElHMWhhVzRnWTI5dWRHVnVkQ0J2YmlCbFlXTm9JSEJoWjJWY2JpOHZMU0JKZENCcGN5Qm1iM1Z1WkNCdmJpQmhiR3dnYVc1MFpYSnVZV3dnY0dGblpYTmNibHh1THk4dElFRnNiQ0JjSWsxaGFXNWNJaUJqYkdGemMyVnpJR2hoZG1VZ2MyaGhjbVVnZEdobGMyVWdjblZzWlhOY2JpVnRZV2x1WEc0Z0lHUnBjM0JzWVhrNklIUmhZbXhsWEc0Z0lIQmhaR1JwYm1jNklERnlaVzBnTW5KbGJWeHVYRzR1YldGcGJpMXpkR0Z1WkdGeVpGeHVJQ0JBWlhoMFpXNWtJQ1Z0WVdsdVhHNGdJSEJoWkdScGJtY3RZbTkwZEc5dE9pQTFjbVZ0WEc1Y2JpQWdKbDlmWTI5dWRHVnVkRnh1WEc0Z0lDQWdLMjFsWkdsaEtGd2lQRDEwWVdKc1pYUmNJaWxjYmlBZ0lDQWdJSFJsZUhRdFlXeHBaMjQ2SUd4bFpuUmNibHh1SUNBbVgxOTBaWGgwWEc1Y2JpQWdJQ0FxSUNzZ0tseHVJQ0FnSUNBZ2JXRnlaMmx1TFhSdmNEb2dNWEpsYlZ4dVhHNGdJQ0FnYURKY2JpQWdJQ0FnSUN0emRHRnVaR0Z5WkMxb1pXRmthVzVuS0NsY2JpQWdJQ0FnSUN0MlpYSjBMWEJoWkdScGJtY29NU3d3S1Z4dVhHNGdJQ0FnTHk4Z1JHVm1ZWFZzZENCMWJtOXlaR1Z5WldRZ2JHbHpkSE1nYVc0Z1kyOXVkR1Z1ZENCaGNtVmhjMXh1SUNBZ0lIVnNYRzRnSUNBZ0lDQndZV1JrYVc1bkxXeGxablE2SURKeVpXMWNiaUFnSUNBZ0lHeHBjM1F0YzNSNWJHVTZJR1JwYzJOY2JseHVJQ0FnSUNBZ2JHbGNiaUFnSUNBZ0lDQWdiV0Z5WjJsdUxYUnZjRG9nTUM0MWNtVnRYRzVjYmlBZ0lDQXZMeUJFWldaaGRXeDBJRzl5WkdWeVpXUWdiR2x6ZEhNZ2FXNGdZMjl1ZEdWdWRDQmhjbVZoYzF4dUlDQWdJRzlzWEc0Z0lDQWdJQ0J3WVdSa2FXNW5MV3hsWm5RNklESnlaVzFjYmlBZ0lDQWdJQzh2YkdsemRDMXpkSGxzWlMxMGVYQmxPaUIxY0hCbGNpMXliMjFoYmx4dVhHNGdJQ0FnTHk4Z1MyVmxjQ0J6YldGc2JDQnBiV0ZuWlhNZ1puSnZiU0JuWlhSMGFXNW5JR2RwWVc1MFhHNGdJQ0FnYVcxblhHNGdJQ0FnSUNCM2FXUjBhRG9nWVhWMGIxeHVJQ0FnSUNBZ2JXRjRMWGRwWkhSb09qRXdNQ1ZjYmx4dVhHNHZMeUJOWVdsdUlHTnZiblJsYm5RZ1lteHZZMnNnYjI0Z1RHVmhaR1Z5YzJocGNDQndZV2RsWEc0dWJXRnBiaTFpYVc5elhHNGdJR1JwYzNCc1lYazZJSFJoWW14bFhHNGdJSEJoWkdScGJtYzZJREp5WlcxY2JseHVYRzR2THlCTllXbHVJR052Ym5SbGJuUWdZbXh2WTJzZ2IyNGdUbVYzY3lCd1lXZGxYRzR1YldGcGJpMXVaWGR6WEc0Z0lFQmxlSFJsYm1RZ0pXMWhhVzVjYmx4dUx5OU5ZV2x1SUdOdmJuUmxiblFnYkc5allYUnBiMjV6SUhSaFlteGxYRzR1WTJsMGVTMWpiMngxYlc1Y2JpQWdkMmxrZEdnNk1UTTFjSGhjYmk1aFpHUnlaWE56TFdOdmJIVnRibHh1SUNCM2FXUjBhRG96TXpWd2VGeHVMbkJvYjI1bExXTnZiSFZ0Ymx4dVhHNHViRzlqWVhScGIyNHRjR2h2Ym1VZ1hHNGdJR052Ykc5eU9pUnVhV2RvZEdkeVpXVnVYRzRnSUNZNmFHOTJaWEpjYmlBZ0lDQmpiMnh2Y2pva1ozSmxaVzVjYmx4dVhHNHZMeUJOWVdsdUlHTnZiblJsYm5RZ1lteHZZMnNnYjI0Z1FteHZaeUJRYjNOMElIQmhaMlZjYmk1dFlXbHVMWEJ2YzNSY2JpQWdRR1Y0ZEdWdVpDQWxiV0ZwYmx4dVhHNGdJQ1pmWDNSbGVIUmNibHh1SUNBZ0lDdHRaV1JwWVNoY0lqdzlkR0ZpYkdWMFhDSXBYRzRnSUNBZ0lDQjBaWGgwTFdGc2FXZHVPaUJzWldaMFhHNWNiaUFnSUNBcUlDc2dLbHh1SUNBZ0lDQWdiV0Z5WjJsdUxYUnZjRG9nTVhKbGJWeHVYRzRnSUNBZ2FESmNiaUFnSUNBZ0lDdHpkR0Z1WkdGeVpDMW9aV0ZrYVc1bktDbGNibHh1SUNBZ0lHZ3pYRzRnSUNBZ0lDQXJiV2x1YjNJdGFHVmhaR2x1WnlncFhHNWNiaUFnSUNCbWFXZGpZWEIwYVc5dVhHNGdJQ0FnSUNCamIyeHZjam9nSkdkeVlYQm9hWFJsWEc0Z0lDQWdJQ0JtYjI1MExYTnBlbVU2SUM0M05YSmxiVnh1SUNBZ0lDQWdiV0Z5WjJsdUxYUnZjRG9nTUZ4dVhHNGdJQ0FnWW14dlkydHhkVzkwWlZ4dUlDQWdJQ0FnSzJKc2IyTnJjWFZ2ZEdVb0tWeHVJaXdpTG1admNtMHRjM1JoYm1SaGNtUmNiaUFnYldGeVoybHVMWFJ2Y0RvZ01uSmxiVnh1WEc0Z0lHbHVjSFYwTEZ4dUlDQnBibkIxZEZ0MGVYQmxQVndpWlcxaGFXeGNJbDBzWEc0Z0lHbHVjSFYwVzNSNWNHVTlYQ0p1ZFcxaVpYSmNJbDBzWEc0Z0lHbHVjSFYwVzNSNWNHVTlYQ0p3WVhOemQyOXlaRndpWFN4Y2JpQWdhVzV3ZFhSYmRIbHdaVDFjSW5ObFlYSmphRndpWFN4Y2JpQWdhVzV3ZFhSYmRIbHdaVDFjSW5SbGJGd2lYU3hjYmlBZ2FXNXdkWFJiZEhsd1pUMWNJblJsZUhSY0lsMHNYRzRnSUdsdWNIVjBXM1I1Y0dVOVhDSjFjbXhjSWwwc1hHNGdJR2x1Y0hWMFczUjVjR1U5WENKamIyeHZjbHdpWFN4Y2JpQWdhVzV3ZFhSYmRIbHdaVDFjSW1SaGRHVmNJbDBzWEc0Z0lHbHVjSFYwVzNSNWNHVTlYQ0p1WVcxbFhDSmRMRnh1SUNCcGJuQjFkRnQwZVhCbFBWd2laR0YwWlhScGJXVmNJbDBzWEc0Z0lHbHVjSFYwVzNSNWNHVTlYQ0prWVhSbGRHbHRaUzFzYjJOaGJGd2lYU3hjYmlBZ2FXNXdkWFJiZEhsd1pUMWNJbTF2Ym5Sb1hDSmRMRnh1SUNCcGJuQjFkRnQwZVhCbFBWd2lkR2x0WlZ3aVhTeGNiaUFnYVc1d2RYUmJkSGx3WlQxY0luZGxaV3RjSWwwc1hHNGdJSFJsZUhSaGNtVmhYRzRnSUZ4MFkyOXNiM0k2SUNSemFYUmxMWFJsZUhRdFkyOXNiM0pjYmlBZ1hIUmliM0prWlhJNklERndlQ0J6YjJ4cFpDQWtZbTl5WkdWeVEyOXNiM0pjYmlBZ0lDQmliM2d0YzJsNmFXNW5PaUJqYjI1MFpXNTBMV0p2ZUZ4dUlDQmNkR0p2Y21SbGNpMXlZV1JwZFhNNklEQmNiaUFnSUNCbWIyNTBMWE5wZW1VNklERnlaVzFjYmlBZ1hIUndZV1JrYVc1bk9pQXhjbVZ0WEc0Z0lGeDBaR2x6Y0d4aGVUb2dZbXh2WTJ0Y2JpQWdYSFIzYVdSMGFEb2dNVEF3SlZ4dVhHNWNiaUFnYkdGaVpXeGNiaUFnSUNCa2FYTndiR0Y1T2lCaWJHOWphMXh1WEc0Z0lHbHVjSFYwVzNSNWNHVTlYQ0ppZFhSMGIyNWNJbDBzWEc0Z0lHbHVjSFYwVzNSNWNHVTlYQ0p5WlhObGRGd2lYU3hjYmlBZ2FXNXdkWFJiZEhsd1pUMWNJbk4xWW0xcGRGd2lYVnh1SUNBZ0lDOHZJR0Z1ZVNCa1pXWmhkV3gwSUdKMWRIUnZiaUJ6ZEhsc1pYTWdkR2hoZENCdVpXVmtJSFJ2SUdKbElHUnBabVpsY21WdWRDQnZiaUJtYjNKdGN5Qm5ieUJvWlhKbFhHNGdJQ0FnWkdsemNHeGhlVG9nWW14dlkydGNibHh1WEc0Z0lDWmZYMk5vWldOclltOTRYRzRnSUNBZ1pHbHpjR3hoZVRvZ2FXNXNhVzVsTFdKc2IyTnJYRzRnSUNBZ1pteHZZWFE2SUd4bFpuUWdJV2x0Y0c5eWRHRnVkRHRjYmlBZ0lDQjNhV1IwYURvZ1lYVjBieUFoYVcxd2IzSjBZVzUwTzF4dVhHNGdJQ1pmWDJOb1pXTnJZbTk0SUNzZ2JHRmlaV3hjYmlBZ0lDQmthWE53YkdGNU9pQnBibXhwYm1VdFlteHZZMnRjYmlBZ0lDQm1iRzloZERvZ2JHVm1kQ0FoYVcxd2IzSjBZVzUwTzF4dUlDQWdJRzFoY21kcGJqb2dNVEJ3ZUNBeE1IQjRJREl3Y0hnZ01UQndlQ0FoYVcxd2IzSjBZVzUwTzF4dVhHNGdJT0tBbUZ4dUlDQXVjMlZzWldOMFltOTRYRzRnSUNBZ1ltRmphMmR5YjNWdVpEb2dKSGRvYVhSbFhHNGdJQ0FnWW05eVpHVnlMWEpoWkdsMWN6b2dNRnh1SUNBZ0lHTjFjbk52Y2pvZ2NHOXBiblJsY2x4dUlDQWdJSEJ2YzJsMGFXOXVPaUJ5Wld4aGRHbDJaVnh1SUNBZ0lHaGxhV2RvZERvZ05EaHdlRnh1WEc1Y2JpQWdjMlZzWldOMFhHNGdJQ0FnWW1GamEyZHliM1Z1WkRvZ0pIZG9hWFJsWEc0Z0lDQWdZbTk0TFhOb1lXUnZkem9nYm05dVpWeHVJQ0FnSUdKdmNtUmxjaTF5WVdScGRYTTZJREJjYmlBZ0lDQmliM0prWlhJNklERndlQ0J6YjJ4cFpDQWtZbTl5WkdWeVEyOXNiM0pjYmlBZ0lDQmpiMnh2Y2pvZ0pITnBkR1V0ZEdWNGRDMWpiMnh2Y2x4dUlDQWdJR04xY25OdmNqb2djRzlwYm5SbGNseHVJQ0FnSUdScGMzQnNZWGs2SUdKc2IyTnJYRzRnSUNBZ1ptOXVkQzF6YVhwbE9pQXhjbVZ0WEc0Z0lDQWdhR1ZwWjJoME9pQTBOWEI0WEc0Z0lDQWdjR0ZrWkdsdVp6b2dNWEpsYlZ4dUlDQWdJSEJ2YzJsMGFXOXVPaUJ5Wld4aGRHbDJaVnh1SUNBZ0lIZHBaSFJvT2lBeE1EQWxYRzVjYmk1amIyNTBZV04wTFhWelgxOWlkWFIwYjI1Y2JpQWdZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2dKSE5zWVhSbFhHNGdJRzFoZUMxM2FXUjBhRG94T0ROd2VGeHVJQ0JqYkdWaGNqcGliM1JvTzF4dUlsMHNJbk52ZFhKalpWSnZiM1FpT2lJdmMyOTFjbU5sTHlKOSAqLyIsIi8vIFZhcnNcbiRiYXNlLWZvbnQtc2l6ZTogMTZweFxuJGJhc2UtbGluZS1oZWlnaHQ6IDEuNVxuXG4vLyBUeXBlZmFjZXNcbiRzYW5zOiBOZXdzIEN5Y2xlLCBzYW5zLXNlcmlmXG4kc2VyaWY6IFBsYXlmYWlyIERpc3BsYXksIHNlcmlmXG5cbi8vIEZvbnQgd2VpZ2h0c1xuJHhsaWdodDogMjAwXG4kbGlnaHQ6IDMwMFxuJG5vcm1hbDogNDAwXG4kc2VtaWJvbGQ6IDYwMFxuJGJvbGQ6IDcwMFxuXG4vLyBMaW5lIGhlaWdodCBmdW5jdGlvblxuQGZ1bmN0aW9uIGxpbmUtaGVpZ2h0KClcbiAgQHJldHVybiAkYmFzZS1mb250LXNpemUgKiAkYmFzZS1saW5lLWhlaWdodFxuXG4vLyBWYXIgbXVzdCBiZSBzcGVjaWZpZWQgYWZ0ZXIgcmV0dXJuaW5nIHRoZSBsaW5lLWhlaWdodCBmdW5jdGlvblxuJGNhbC1saW5lLWhlaWdodDogbGluZS1oZWlnaHQoKVxuXG4vLyBNaXhpbnNcbj12ZXJ0LW1hcmdpbigkdG9wOiAxLCAkYm90dG9tOiAxKVxuICBtYXJnaW4tdG9wOiAkY2FsLWxpbmUtaGVpZ2h0ICogJHRvcFxuICBtYXJnaW4tYm90dG9tOiAkY2FsLWxpbmUtaGVpZ2h0ICogJGJvdHRvbVxuXG49dmVydC1wYWRkaW5nKCR0b3A6IDEsICRib3R0b206IDEpXG4gIHBhZGRpbmctdG9wOiAkY2FsLWxpbmUtaGVpZ2h0ICogJHRvcFxuICBwYWRkaW5nLWJvdHRvbTogJGNhbC1saW5lLWhlaWdodCAqICRib3R0b21cblxuXG5odG1sXG4gIGZvbnQtc2l6ZTogJGJhc2UtZm9udC1zaXplXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGVcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWRcblxuYm9keVxuICBjb2xvcjogJGNoYXJjb2FsXG4gIGxpbmUtaGVpZ2h0OiAxLjVcbiAgZm9udC1mYW1pbHk6ICRzYW5zXG4gIC8vYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRyYW5zcGFyZW50LCB0cmFuc3BhcmVudCBsaW5lLWhlaWdodCgpIC0gMXB4LCAkZ3JlZW4gMXB4ICwgdHJhbnNwYXJlbnQpXG4gIGJhY2tncm91bmQtc2l6ZTogYXV0byBsaW5lLWhlaWdodCgpXG4gIG1hcmdpbjogMFxuXG5cbi8vW2NsYXNzKj0nX19oZWFkbGluZSddXG5cblxuLy8gVXNlZCBpbiBhcnRpY2xlIGhlYWRlcnMgaW4gdGhlIC5NYWluIGNvbHVtbnNcbltjbGFzcyo9J19faGVhZGluZyddXG4gIGNvbG9yOiAkZ3JlZW5cbiAgZm9udC1mYW1pbHk6ICRzZXJpZlxuICBmb250LXNpemU6IDIuNXJlbVxuICBmb250LXdlaWdodDogJG5vcm1hbFxuICBsaW5lLWhlaWdodDogMVxuICBtYXJnaW4tYm90dG9tOiAycmVtXG5cbj1zdGFuZGFyZC1oZWFkaW5nKClcbiAgY29sb3I6ICRncmVlblxuICBmb250LWZhbWlseTogJHNlcmlmXG4gIGZvbnQtc2l6ZTogMnJlbVxuICBmb250LXdlaWdodDogJG5vcm1hbFxuICBsaW5lLWhlaWdodDogMVxuXG5cbi8vIEZvdW5kIGluIHRoZSBNYWluIEJsb2cgUG9zdHNcbj1taW5vci1oZWFkaW5nKClcbiAgY29sb3I6ICRuaWdodGdyZWVuXG4gIGZvbnQtZmFtaWx5OiAkc2VyaWZcbiAgZm9udC1zaXplOiAxLjI1cmVtXG4gIGZvbnQtd2VpZ2h0OiAkYm9sZFxuICBsaW5lLWhlaWdodDogMVxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlXG4gICt2ZXJ0LW1hcmdpbigxLjUsMClcblxuXG4vLyBVc2VkIGluIGFydGljbGUgaGVhZGVycyBpbiB0aGUgLk1haW4gY29sdW1uc1xuPXNtYWxsLWhlYWRpbmcoKVxuICBjb2xvcjogJGdyZWVuXG4gIGZvbnQtZmFtaWx5OiAkc2VyaWZcbiAgZm9udC1zaXplOiAxLjM3NXJlbVxuICBmb250LXdlaWdodDogJG5vcm1hbFxuICBsaW5lLWhlaWdodDogMVxuXG5cbi8vIEZvdW5kIGluIHRoZSBNYWluIEJsb2cgUG9zdHNcbj1ibG9ja3F1b3RlKClcbiAgY29sb3I6ICRncmVlblxuICBmb250LWZhbWlseTogJHNlcmlmXG4gIGZvbnQtc2l6ZTogMS41cmVtXG4gIGZvbnQtc3R5bGU6IGl0YWxpY1xuICBmb250LXdlaWdodDogJGJvbGRcbiAgK3ZlcnQtbWFyZ2luKDEuNSwxLjUpXG5cblxuLy9pbnB1dFt0eXBlPVwic3VibWl0XCJdXG5cbltjbGFzcyo9X19idXR0b25dLFxuaW5wdXRbdHlwZT1cImJ1dHRvblwiXSxcbmlucHV0W3R5cGU9XCJyZXNldFwiXVxuICBib3JkZXI6IDFweCBzb2xpZCAkZ3JlZW5cbiAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gIGZvbnQtZmFtaWx5OiAkc2VyaWZcbiAgZm9udC1zaXplOiAxLjJyZW1cbiAgZm9udC1zdHlsZTogaXRhbGljXG4gIHRleHQtYWxpZ246IGNlbnRlclxuICBwYWRkaW5nOiAuNzVyZW0gM3JlbVxuICB0ZXh0LWRlY29yYXRpb246IG5vbmVcbiAgLypJdGVtcyBmb3IgdHJhbnNpdGlvblxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudFxuICBjb2xvcjogJGdyZWVuXG4gIC8qVHJhbnNpdGlvbiBzZXR0aW5nc1xuICB0cmFuc2l0aW9uOiBhbGwgLjJzIGVhc2VcblxuICAmOmhvdmVyXG4gICAgLypUaGVzZSB3aWxsIHRyYW5zaXRpb24gb24gaG92ZXJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JlZW5cbiAgICBjb2xvcjogJHdoaXRlXG5cblxuLy8gaW4gcHJvZ3Jlc3NcblxuLy8gTWl4aW5zXG49YnV0dG9uKCRiYWNrZ3JvdW5kLCAkY29sb3IsICRib3JkZXItY29sb3IpXG4gIGJvcmRlcjogMXB4IHNvbGlkICRib3JkZXItY29sb3JcbiAgZm9udC1mYW1pbHk6ICRzZXJpZlxuICBmb250LXNpemU6IDEuMnJlbVxuICBmb250LXN0eWxlOiBpdGFsaWNcbiAgcGFkZGluZzogLjVyZW0gMXJlbVxuICB0ZXh0LWRlY29yYXRpb246IG5vbmVcbiAgLypJdGVtcyBmb3IgdHJhbnNpdGlvblxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudFxuICBjb2xvcjogJGNvbG9yXG4gIC8qVHJhbnNpdGlvbiBzZXR0aW5nc1xuICB0cmFuc2l0aW9uOiBhbGwgLjJzIGVhc2VcbiAgJjpob3ZlclxuICAgIC8qVGhlc2Ugd2lsbCB0cmFuc2l0aW9uIG9uIGhvdmVyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGdyZWVuXG4gICAgY29sb3I6ICRjb2xvclxuIiwiLy8gU2l0ZSBjb2xvciBwYWxldHRlXG4kZ3JlZW46ICMyNjdlNjRcbiRuaWdodGdyZWVuOiAjNDU1NjUyXG4kc2xhdGU6ICNlY2VlZTZcblxuLy8gNTAgc2hhZGVzIG9mIGdyYXlcbiR3aGl0ZTogI2ZmZlxuJHN0ZWFtOiAjZjhmOGY4XG4kY2xvdWQ6ICNlNWU2ZTdcbiRncmFwaGl0ZTogI2NjY1xuJHN0b25lOiAjN2Y3ZTdlXG4kbGVhZDogIzZlNmI2Y1xuJGNoYXJjb2FsOiAjMzMzXG4kYmxhY2s6ICMwMDBcblxuXG4kbW9iaWxlLW5hdi1idG46ICRzbGF0ZVxuXG4vL0JvcmRlciBDb2xvclxuJGJvcmRlckNvbG9yOiAkZ3JhcGhpdGVcblxuLy8gU2l0ZSBiYXNlIHRleHQgY29sb3JzXG4kc2l0ZS10ZXh0LWNvbG9yOiAkY2hhcmNvYWxcbiRzaXRlLXRleHQtY29sb3ItbGluazogJGdyZWVuXG4kc2l0ZS10ZXh0LWNvbG9yLWxpbmstaG92ZXI6ICM0NTU2NTJcblxuXG4vLyBGb290ZXIgY29sb3JzXG4kZm9vdGVyLXRleHQ6ICRuaWdodGdyZWVuXG4kZm9vdGVyLXRleHQtbGluazogJG5pZ2h0Z3JlZW5cbiRmb290ZXItdGV4dC1saW5rLWhvdmVyOiAkZ3JlZW5cbiIsIi8vIGh0dHA6Ly9jc3Ntb2pvLmNvbS9sYXRlc3RfbmV3X2NsZWFyZml4X3NvX2Zhci9cbi5jbGVhcmZpeDphZnRlclxuICBjb250ZW50OiBcIlwiXG4gIGRpc3BsYXk6IHRhYmxlXG4gIGNsZWFyOiBib3RoXG4iLCIvLyBSRVNQT05TSVZFIElNQUdFU1xuaW1nLCBpZnJhbWUsIGVtYmVkXG4gIHdpZHRoOiAxMDAlXG4iLCIuY29udGFpbmVyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAkYm9yZGVyQ29sb3JcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJGJvcmRlckNvbG9yXG4gIG1hcmdpbjogMCBhdXRvXG4gIG1heC13aWR0aDogMTIwMHB4XG5cblxuW2NsYXNzKj0nY29sLSddXG4gIGRpc3BsYXk6IHRhYmxlLWNlbGxcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZVxuXG4gICttZWRpYShcIjw9dGFibGV0XCIpXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gICAgdGV4dC1hbGlnbjogY2VudGVyXG5cbi8vMiBjb2x1bW5zIHdpZGVcbi8vIFRoaXMgaXMgdXNlZCBpbiB0aGUgZm9vdGVyIGZvciBuYXJyb3dlciBjb2x1bW5zIG9mIGxpbmtzXG4uY29sLTItMTJcbiAgd2lkdGg6IDIvMTIgKiAxMDAlXG5cbiAgK21lZGlhKFwiPD10YWJsZXRcIilcbiAgICB3aWR0aDogMTAwJVxuXG4vLzMgY29sdW1ucyB3aWRlXG4vLyBUaGlzIGlzIHVzZWQgaW4gdGhlIGZvb3RlciBmb3IgZmF0dGVyIGNvbHVtbnMgb2YgbG9uZ2VyLXRpdGxlZCBsaW5rc1xuLmNvbC0zLTEyXG4gIHdpZHRoOiAzLzEyICogMTAwJVxuXG4gICttZWRpYShcIjw9dGFibGV0XCIpXG4gICAgd2lkdGg6IDEwMCVcblxuLy8gNCBjb2x1bW5zIHdpZGUuXG4vLyBUaGlzIGlzIHVzZWQgaW4gdGhlIExlYWRlcnNoaXAgcGFnZS5cbi5jb2wtNC0xMlxuICB3aWR0aDogNC8xMiAqIDEwMCVcblxuICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgIHdpZHRoOiAxMDAlXG5cblxuLy8gNSBjb2x1bW5zIHdpZGUuXG4vLyBUaGlzIGlzIHVzZWQgaW4gbW9zdCBvZiB0aGUgYmFubmVycy5cbi8vIEl0IGlzIGFsc28gdXNlZCBpbiB0aGUgTWFpbiBtb2R1bGUgYXJlYSB0aGF0IGluY2x1ZGVzIHRoZSBzaWRlYmFyLlxuLmNvbC01LTEyXG4gIHdpZHRoOiA1LzEyICogMTAwJVxuXG4gICttZWRpYShcIjw9dGFibGV0XCIpXG4gICAgd2lkdGg6IDEwMCVcblxuXG4vLyA2IGNvbHVtbnMgd2lkZS5cbi8vIFRoaXMgd2lsbCBzcGFuIGhhbGYgdGhlIGF2YWlsYWJsZSB3aWR0aFxuLy8gVGhlIENhcmQgTW9kdWxlIG9uIHRoZSBob21lcGFnZSB1c2VzIHRoaXNcbi5jb2wtNi0xMlxuICB3aWR0aDogNi8xMiAqIDEwMCVcblxuICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgIHdpZHRoOiAxMDAlXG5cblxuLy8gNyBjb2x1bW5zIHdpZGUuXG4vLyBUaGlzIGlzIHVzZWQgaW4gbW9zdCBvZiB0aGUgYmFubmVycy5cbi8vIEl0IGlzIGFsc28gdXNlZCBpbiB0aGUgTWFpbiBtb2R1bGUgYXJlYSB0aGF0IGluY2x1ZGVzIHRoZSBzaWRlYmFyLlxuLy8gW2NsYXNzKj0nLS1jb2wtNy0xMiddXG4uY29sLTctMTJcbiAgd2lkdGg6IDcvMTIgKiAxMDAlXG5cbiAgK21lZGlhKFwiPD10YWJsZXRcIilcbiAgICB3aWR0aDogMTAwJVxuXG5cbi8vIDggY29sdW1ucyB3aWRlLlxuLy8gVGhpcyBpcyB1c2VkIGluIHRoZSBMZWFkZXJzaGlwIHBhZ2UuXG4uY29sLTgtMTJcbiAgd2lkdGg6IDgvMTIgKiAxMDAlXG5cbiAgK21lZGlhKFwiPD10YWJsZXRcIilcbiAgICB3aWR0aDogMTAwJVxuXG5cbi5jb2wtOS0xMlxuICB3aWR0aDogOS8xMiAqIDEwMCVcblxuICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgIHdpZHRoOiAxMDAlXG5cblxuLmNvbC0xMC0xMlxuICB3aWR0aDogMTAvMTIgKiAxMDAlXG5cbiAgK21lZGlhKFwiPD10YWJsZXRcIilcbiAgICB3aWR0aDogMTAwJVxuXG4uY29sLTExLTEyXG4gIHdpZHRoOiAxMS8xMiAqIDEwMCVcblxuICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgIHdpZHRoOiAxMDAlXG5cbi5icmVhZGNydW1iXG4gIHBhZGRpbmc6MXJlbSAycmVtIDAgMnJlbTtcbiAgZm9udC1zaXplOjE0cHg7XG5cbiAgYVxuICAgIGNvbG9yOiRncmVlblxuICAgICY6aG92ZXJcbiAgICAgIGNvbG9yOiRuaWdodGdyZWVuXG4gIHNwYW4gXG4gICAgY29sb3I6JHN0b25lXG4iLCIqXG4gIG1hcmdpbjogMFxuICBwYWRkaW5nOiAwXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3hcblxuICAmOjphZnRlciwgJjo6YmVmb3JlXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveFxuXG5ib2R5XG4gIGJhY2tncm91bmQtY29sb3I6ICRzbGF0ZVxuICBwYWRkaW5nOiAwXG5cbmFcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lXG5cbi8vUmVzZXQgZmxleGJveCBzZXR0aW5ncyB3aGVuIHJlc3BvbmRpbmcgYmVsb3cgZGVza3RvcFxuPXJlc3BvbnNpdmUtc3RhY2tcbiAgK21lZGlhKFwiPD10YWJsZXRcIilcbiAgICBmbGV4LWZsb3c6IGNvbHVtblxuIiwiLy8gVGhlIHRhYmxlcyBzdGFydCB0byBsb29rIGZ1Z2x5IGF0IGFyb3VuZCA3MDBweCwgc28gbGV0J3Mgc3RhcnQgcmVzcG9uZGluZyB0aGVyZVxuJHRhYmxlLWJyZWFrOiBcIjw9NzAwcHhcIlxuXG50YWJsZVxuXHRtYXJnaW46IDAgMCAxLjVlbVxuXHR3aWR0aDogMTAwJVxuXG50clxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGNsb3VkXG5cbiAgK21lZGlhKCR0YWJsZS1icmVhaylcbiAgICBtYXJnaW4tdG9wOiAwICFpbXBvcnRhbnQ7XG5cbiAgICAmOmZpcnN0LWNoaWxkXG4gICAgICBib3JkZXItdG9wOiAxcHggc29saWQgJGNsb3VkXG5cbiAgJjpudGgtY2hpbGQoZXZlbilcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc3RlYW1cblxudGRcbiAgdmVydGljYWwtYWxpZ246IHRvcFxuICBwYWRkaW5nOiAxMHB4IDVweFxuXG4gICttZWRpYSgkdGFibGUtYnJlYWspXG4gICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZVxuICAgIHBhZGRpbmctbGVmdDogNDAlXG5cbiAgICAmOmJlZm9yZVxuICAgICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgICB0b3A6IDZweFxuICAgICAgbGVmdDogNnB4XG4gICAgICB3aWR0aDogNDAlXG4gICAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4XG4gICAgICB3aGl0ZS1zcGFjZTogbm93cmFwXG4gICAgICBmb250LXdlaWdodDogJHNlbWlib2xkXG5cblxuICAgICY6bnRoLW9mLXR5cGUoMSlcbiAgICAgICY6YmVmb3JlXG4gICAgICAgIGNvbnRlbnQ6IFwiQ2l0eTogXCJcbiAgICAmOm50aC1vZi10eXBlKDIpXG4gICAgICAmOmJlZm9yZVxuICAgICAgICBjb250ZW50OiBcIkFkZHJlc3M6IFwiXG4gICAgJjpudGgtb2YtdHlwZSgzKVxuICAgICAgJjpiZWZvcmVcbiAgICAgICAgY29udGVudDogXCJQaG9uZTogXCJcblxudGhlYWRcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNsb3VkXG5cbiAgdHJcbiAgICAvL0hpZGUgdGhlIHRoZWFkIGluZm9ybWF0aW9uIGluIGFuIGFjY2Vzc2libGUgd2F5XG5cbiAgICArbWVkaWEoJHRhYmxlLWJyZWFrKVxuICAgICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgICB0b3A6IC05OTk5cHhcbiAgICAgIGxlZnQ6IC05OTk5cHhcblxuICB0aFxuICAgIGZvbnQtd2VpZ2h0OiAkc2VtaWJvbGRcbiAgICB0ZXh0LWFsaWduOiBsZWZ0XG4gICAgcGFkZGluZzogNXB4XG5cbnRhYmxlLCB0aGVhZCwgdGJvZHksIHRoLCB0ZCwgdHJcbiAgK21lZGlhKCR0YWJsZS1icmVhaylcbiAgICBkaXNwbGF5OiBibG9ja1xuIiwiLm5hdi1taW5vclxuICBkaXNwbGF5OiBibG9ja1xuICB0ZXh0LWFsaWduOiByaWdodFxuXG4gICZfX2NvbnRhaW5lclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZVxuICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgJGJvcmRlckNvbG9yXG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJGJvcmRlckNvbG9yXG4gICAgbWFyZ2luOiAwIGF1dG9cbiAgICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW1cbiAgICBwYWRkaW5nLXRvcDogMXJlbVxuICAgIG1heC13aWR0aDogMTIwMHB4XG5cbiAgICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgICAgLy9kaXNwbGF5OiBub25lXG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXJcblxuICBsaVxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9ja1xuXG4gICAgJjphZnRlclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gICAgICBjb250ZW50OiAnIHwgJ1xuICAgICAgY29sb3I6ICRncmVlblxuICAgICAgbWFyZ2luOiAwIDJweFxuXG4gICAgJjpudGgtY2hpbGQoMylcblxuICAgICAgJjphZnRlclxuICAgICAgICBjb250ZW50OiAnICdcbiAgICAmOmxhc3QtY2hpbGRcbiAgICAgIGFcbiAgICAgICAgZm9udC13ZWlnaHQ6Ym9sZFxuXG4gICZfX2xpbmtcbiAgICBjb2xvcjogJGNoYXJjb2FsXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gICAgcGFkZGluZzogMCAwcmVtIDAgLjVyZW1cblxuICAgICY6aG92ZXJcbiAgICAgIGNvbG9yOiAkZ3JlZW5cblxuLnNpdGUtbWFwXG4gIGFcbiAgICBjb2xvcjokY2hhcmNvYWxcbiAgICAmOmhvdmVyXG4gICAgICBjb2xvcjogJGdyZWVuXG5cbiIsIi8vIGhlYWRlciBzaXplXG4kaGVhZGVyLWhlaWdodC1TOiA1MHB4XG4kaGVhZGVyLWhlaWdodC1MOiA4MHB4XG5cbi8vIE5hdmlnYXRpb24gc2l6ZVxuJG5hdi13aWR0aC1TOiAyNjBweFxuXG4vLyBTZWFyY2ggc2l6ZVxuJHNlYXJjaC1oZWlnaHQtUzogNTBweFxuJHNlYXJjaC1oZWlnaHQtTDogMTIwcHhcblxuLy8gei1pbmRleFxuJGJlbG93LWNvbnRlbnQ6IDFcbiRjb250ZW50OiAyXG4kYWJvdmUtY29udGVudDogM1xuXG4vL1xuICBcInBob25lXCI6IDMyMHB4LFxuICBcInRhYmxldFwiOiA3NjhweCxcbiAgXCJkZXNrdG9wXCI6IDEwMjRweClcblxuXG4vLyBicmVha3BvaW50c1xuICAkUzogNDgwcHhcbiAgJE06IDc2OHB4XG4gICRMOiAxMDI0cHhcbiAgJG1heEw6ICRMIC0gMXB4XG5cblxuLy9cbiAgK01RKG1heEwpXG4gICttZWRpYShcIjxkZXNrdG9wXCIpXG5cbi8vXG4gICtNUShMKVxuICArbWVkaWEoXCI+ZGVza3RvcFwiKVxuXG5cbi8vIHN1cGVyIGxpZ2h0IGdyaWQgLSBpdCB3b3JrcyB3aXRoIHRoZSAuY2QtY29udGFpbmVyIGNsYXNzIGluc2lkZSBzdHlsZS5zY3NzXG5cbj1jb2x1bW4oJHBlcmNlbnRhZ2UsICRmbG9hdC1kaXJlY3Rpb246IGxlZnQpXG4gIHdpZHRoOiAxMDAlICogJHBlcmNlbnRhZ2VcbiAgZmxvYXQ6ICRmbG9hdC1kaXJlY3Rpb25cblxuPWNsZWFyZml4XG4gICY6YWZ0ZXJcbiAgICBjb250ZW50OiBcIlwiXG4gICAgZGlzcGxheTogdGFibGVcbiAgICBjbGVhcjogYm90aFxuXG5hLmNkLW5hdi1pdGVtXG4gICY6aG92ZXJcbiAgICBpbWdcbiAgICAgIG9wYWNpdHk6IC43ICFpbXBvcnRhbnRcbiAgICBoM1xuICAgICAgY29sb3I6ICRuaWdodGdyZWVuICFpbXBvcnRhbnRcblxuXG4vL1ByaW1hcnkgc3R5bGVcblxuXG5ib2R5XG4gICttZWRpYShcIjxkZXNrdG9wXCIpXG4gICAgLy8gbGF5b3V0IG1peGlucyBpbnNpZGUgcGFydGlhbHMgPiBfbGF5b3V0LnNjc3NcbiAgICAmLm5hdi1vbi1sZWZ0Lm92ZXJmbG93LWhpZGRlblxuICAgICAgb3ZlcmZsb3c6IGhpZGRlblxuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotbXMtY2xlYXJcbiAgLy8gcmVtb3ZlcyBjbG9zZSBpY29uIC0gSUVcbiAgZGlzcGxheTogbm9uZVxuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLXJlc3VsdHMtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtcmVzdWx0cy1kZWNvcmF0aW9uXG4gIGRpc3BsYXk6IG5vbmVcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKk1haW4gY29tcG9uZW50c1xuICpcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXG5cbi5jZC1tYWluLWNvbnRlbnQsXG4uY2QtbWFpbi1oZWFkZXJcbiAgLyogRm9yY2UgSGFyZHdhcmUgQWNjZWxlcmF0aW9uIGluIFdlYktpdFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMClcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybVxuXG4gIHVsXG4gICAgbGlzdC1zdHlsZTogbm9uZVxuXG4uY2QtbWFpbi1jb250ZW50XG4gIHBvc2l0aW9uOiByZWxhdGl2ZVxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zc1xuXG4gICttZWRpYShcIjxkZXNrdG9wXCIpXG4gICAgJi5uYXYtaXMtdmlzaWJsZVxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0kbmF2LXdpZHRoLVMpXG5cbiAgICAubmF2LW9uLWxlZnQgJi5uYXYtaXMtdmlzaWJsZVxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKCRuYXYtd2lkdGgtUylcblxuLmNkLW1haW4taGVhZGVyXG4gIGZvbnQtZmFtaWx5OiAkc2VyaWZcbiAgcG9zaXRpb246IHJlbGF0aXZlXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzXG5cbiAgK21lZGlhKFwiPGRlc2t0b3BcIilcbiAgICAmLm5hdi1pcy12aXNpYmxlXG4gICAgICAvL3RyYW5zZm9ybTogdHJhbnNsYXRlWCgtJG5hdi13aWR0aC1TKVxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApXG5cbiAgICAubmF2LW9uLWxlZnQgJi5uYXYtaXMtdmlzaWJsZVxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKCRuYXYtd2lkdGgtUylcblxuLmNkLW1haW4tY29udGVudFxuICAvL0NIQU5HRURcbiAgLy9iYWNrZ3JvdW5kOiAkY2xvdWRcbiAgbWluLWhlaWdodDogMTAwdmhcbiAgei1pbmRleDogJGNvbnRlbnRcblxuLmNkLW1haW4taGVhZGVyXG4gIGhlaWdodDogJGhlYWRlci1oZWlnaHQtU1xuICBiYWNrZ3JvdW5kOiAkd2hpdGVcbiAgei1pbmRleDogJGFib3ZlLWNvbnRlbnRcblxuICAvL0NIQU5HRURcbiAgLy9ib3gtc2hhZG93OiAwIDFweCA1cHggcmdiYSgxMDAsMTAwLDEwMCwgLjUpXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY2xvdWRcblxuICAubmF2LWlzLWZpeGVkICZcbiAgICAvKiBhZGQgLm5hdi1pcy1maXhlZCBjbGFzcyB0byBib2R5IGlmIHlvdSB3YW50IGEgZml4ZWQgbmF2aWdhdGlvbiBvbiA+IDEwMjRweFxuICAgIHBvc2l0aW9uOiBmaXhlZFxuICAgIHRvcDogMFxuICAgIGxlZnQ6IDBcbiAgICB3aWR0aDogMTAwJVxuXG4gICttZWRpYShcIj5kZXNrdG9wXCIpXG4gICAgaGVpZ2h0OiAkaGVhZGVyLWhlaWdodC1MXG4gICAgK2NsZWFyZml4XG5cbi5jZC1sb2dvXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZVxuICB0b3A6IDEycHhcbiAgbGVmdDogNSVcblxuICBpbWdcbiAgICBkaXNwbGF5OiBibG9ja1xuXG4gICttZWRpYShcIjxkZXNrdG9wXCIpXG4gICAgLm5hdi1vbi1sZWZ0ICZcbiAgICAgIGxlZnQ6IGF1dG9cbiAgICAgIHJpZ2h0OiA1JVxuXG4gICttZWRpYShcIj5kZXNrdG9wXCIpXG4gICAgdG9wOiAyNnB4XG4gICAgbGVmdDogNGVtXG5cbi5jZC1oZWFkZXItYnV0dG9uc1xuICBwb3NpdGlvbjogYWJzb2x1dGVcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gIHRvcDogM3B4XG4gIHJpZ2h0OiA1JVxuXG4gIGxpXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG5cbiAgK21lZGlhKFwiPGRlc2t0b3BcIilcbiAgICAubmF2LW9uLWxlZnQgJlxuICAgICAgcmlnaHQ6IGF1dG9cbiAgICAgIGxlZnQ6IDUlXG4gICAgICBsaVxuICAgICAgICBmbG9hdDogcmlnaHRcblxuICArbWVkaWEoXCI+ZGVza3RvcFwiKVxuICAgIHRvcDogMXJlbVxuICAgIHJpZ2h0OiAxcmVtXG5cbi5jZC1zZWFyY2gtdHJpZ2dlcixcbi5jZC1uYXYtdHJpZ2dlclxuICBwb3NpdGlvbjogcmVsYXRpdmVcbiAgZGlzcGxheTogYmxvY2tcbiAgd2lkdGg6IDQ0cHhcbiAgaGVpZ2h0OiA0NHB4XG4gIG92ZXJmbG93OiBoaWRkZW5cbiAgd2hpdGUtc3BhY2U6IG5vd3JhcFxuICAvKiBoaWRlIHRleHRcbiAgY29sb3I6IHRyYW5zcGFyZW50XG4gIHotaW5kZXg6ICRhYm92ZS1jb250ZW50XG5cbi5jZC1zZWFyY2gtdHJpZ2dlclxuICAmOjpiZWZvcmUsICY6OmFmdGVyXG4gICAgLyogc2VhcmNoIGljb25cbiAgICBjb250ZW50OiAnJ1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZVxuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zc1xuICAgIC8qIEZvcmNlIEhhcmR3YXJlIEFjY2VsZXJhdGlvbiBpbiBXZWJLaXRcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMClcbiAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW5cblxuICAmOjpiZWZvcmVcbiAgICAvKiBsZW5zXG4gICAgdG9wOiAxMXB4XG4gICAgbGVmdDogMTFweFxuICAgIHdpZHRoOiAxOHB4XG4gICAgaGVpZ2h0OiAxOHB4XG4gICAgYm9yZGVyLXJhZGl1czogNTAlXG4gICAgYm9yZGVyOiAzcHggc29saWQgJG5pZ2h0Z3JlZW5cblxuICAmOjphZnRlclxuICAgIC8qIGhhbmRsZVxuICAgIGhlaWdodDogM3B4XG4gICAgd2lkdGg6IDhweFxuICAgIGJhY2tncm91bmQ6ICRuaWdodGdyZWVuXG4gICAgYm90dG9tOiAxNHB4XG4gICAgcmlnaHQ6IDExcHhcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZylcbiAgc3BhblxuICAgIC8qIGNvbnRhaW5lciBmb3IgdGhlIFggaWNvblxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZVxuICAgIGhlaWdodDogMTAwJVxuICAgIHdpZHRoOiAxMDAlXG4gICAgdG9wOiAwXG4gICAgbGVmdDogMFxuICBzcGFuOjpiZWZvcmUsIHNwYW46OmFmdGVyXG4gICAgLyogY2xvc2UgaWNvblxuICAgIGNvbnRlbnQ6ICcnXG4gICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gICAgaGVpZ2h0OiAzcHhcbiAgICB3aWR0aDogMjJweFxuICAgIHRvcDogNTAlXG4gICAgbWFyZ2luLXRvcDogLTJweFxuICAgIGxlZnQ6IDUwJVxuICAgIG1hcmdpbi1sZWZ0OiAtMTFweFxuICAgIGJhY2tncm91bmQ6ICRuaWdodGdyZWVuXG4gICAgb3BhY2l0eTogMFxuICAgIC8qIEZvcmNlIEhhcmR3YXJlIEFjY2VsZXJhdGlvbiBpbiBXZWJLaXRcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMClcbiAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW5cbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MsIHRyYW5zZm9ybSAwLjNzXG5cbiAgc3Bhbjo6YmVmb3JlXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpXG5cbiAgc3Bhbjo6YWZ0ZXJcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpXG5cbiAgJi5zZWFyY2gtaXMtdmlzaWJsZVxuICAgICY6OmJlZm9yZSwgJjo6YWZ0ZXJcbiAgICAgIC8qIGhpZGUgc2VhcmNoIGljb25cbiAgICAgIG9wYWNpdHk6IDBcbiAgICBzcGFuOjpiZWZvcmUsIHNwYW46OmFmdGVyXG4gICAgICAvKiBzaG93IGNsb3NlIGljb25cbiAgICAgIG9wYWNpdHk6IDFcbiAgICBzcGFuOjpiZWZvcmVcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDEzNWRlZylcbiAgICBzcGFuOjphZnRlclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpXG5cbi5jZC1uYXYtdHJpZ2dlclxuICBzcGFuLCBzcGFuOjpiZWZvcmUsIHNwYW46OmFmdGVyXG4gICAgLyogaGFtYnVyZ2VyIGljb24gaW4gQ1NTXG4gICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gICAgaGVpZ2h0OiAzcHhcbiAgICB3aWR0aDogMjRweFxuICAgIGJhY2tncm91bmQ6ICRuaWdodGdyZWVuXG4gIHNwYW5cbiAgICAvKiBsaW5lIGluIHRoZSBjZW50ZXJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGVcbiAgICB0b3A6IDUwJVxuICAgIHJpZ2h0OiAxMHB4XG4gICAgbWFyZ2luLXRvcDogLTJweFxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMC4zcyAwLjNzXG4gIHNwYW46OmJlZm9yZSwgc3Bhbjo6YWZ0ZXJcbiAgICAvKiBvdGhlciAyIGxpbmVzXG4gICAgY29udGVudDogJydcbiAgICByaWdodDogMFxuICAgIC8qIEZvcmNlIEhhcmR3YXJlIEFjY2VsZXJhdGlvbiBpbiBXZWJLaXRcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMClcbiAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW5cbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwJSA1MCVcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcyAwLjNzXG4gIHNwYW46OmJlZm9yZVxuICAgIC8qIG1lbnUgaWNvbiB0b3AgbGluZVxuICAgIHRvcDogLTZweFxuICBzcGFuOjphZnRlclxuICAgIC8qIG1lbnUgaWNvbiBib3R0b20gbGluZVxuICAgIHRvcDogNnB4XG4gICYubmF2LWlzLXZpc2libGVcbiAgICBzcGFuXG4gICAgICAvKiBoaWRlIGxpbmUgaW4gdGhlIGNlbnRlclxuICAgICAgYmFja2dyb3VuZDogcmdiYSgkbmlnaHRncmVlbiwgMClcbiAgICBzcGFuOjpiZWZvcmUsIHNwYW46OmFmdGVyXG4gICAgICAvKiBrZWVwIHZpc2libGUgb3RoZXIgMiBsaW5lc1xuICAgICAgYmFja2dyb3VuZDogcmdiYSgkbmlnaHRncmVlbiwgMSlcbiAgICBzcGFuOjpiZWZvcmVcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCg0cHgpIHRyYW5zbGF0ZVkoLTNweCkgcm90YXRlKDQ1ZGVnKVxuICAgIHNwYW46OmFmdGVyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNHB4KSB0cmFuc2xhdGVZKDJweCkgcm90YXRlKC00NWRlZylcbiAgK21lZGlhKFwiPmRlc2t0b3BcIilcbiAgICBkaXNwbGF5OiBub25lXG5cblxuLmNkLXByaW1hcnktbmF2LFxuLmNkLXByaW1hcnktbmF2IHVsXG4gIHBvc2l0aW9uOiBmaXhlZFxuICB0b3A6IDBcbiAgcmlnaHQ6IDBcbiAgaGVpZ2h0OiAxMDAlXG4gIHdpZHRoOiAkbmF2LXdpZHRoLVNcbiAgYmFja2dyb3VuZDogJG5pZ2h0Z3JlZW5cbiAgb3ZlcmZsb3c6IGF1dG9cbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoXG4gIHotaW5kZXg6ICRiZWxvdy1jb250ZW50XG5cbiAgLyogRm9yY2UgSGFyZHdhcmUgQWNjZWxlcmF0aW9uIGluIFdlYktpdFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMClcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzXG5cbiAgYVxuICAgIGRpc3BsYXk6IGJsb2NrXG4gICAgZm9udC1zaXplOiAxLjJyZW1cbiAgICBoZWlnaHQ6IDUwcHhcbiAgICBsaW5lLWhlaWdodDogNTBweFxuICAgIHBhZGRpbmc6IDAgMjBweFxuICAgIGNvbG9yOiAkd2hpdGVcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZFxuICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGVcbiAgICBvdmVyZmxvdzogaGlkZGVuXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXNcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGxpZ2h0ZW4oJG5pZ2h0Z3JlZW4sIDUlKVxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKVxuICAgIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHlcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcywgb3BhY2l0eSAwLjNzXG5cbiAgJi5pcy1oaWRkZW5cbiAgICAvKiBzZWNvbmRhcnkgbmF2aWdhdGlvbnMgaGlkZGVuIGJ5IGRlZmF1bHRcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwJSlcblxuICAmLm1vdmVzLW91dCA+IGxpID4gYVxuICAgIC8qIHB1c2ggdGhlIG5hdmlnYXRpb24gaXRlbXMgdG8gdGhlIGxlZnQgLSBhbmQgbG93ZXIgZG93biBvcGFjaXR5IC0gd2hlbiBzZWNvbmRhcnkgbmF2IHNsaWRlcyBpblxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSlcbiAgICBvcGFjaXR5OiAwXG5cbittZWRpYShcIjxkZXNrdG9wXCIpXG4gIC5uYXYtb24tbGVmdCAuY2QtcHJpbWFyeS1uYXYsXG4gIC5uYXYtb24tbGVmdCAuY2QtcHJpbWFyeS1uYXYgdWxcbiAgICByaWdodDogYXV0b1xuICAgIGxlZnQ6IDBcblxuXG4uY2QtcHJpbWFyeS1uYXZcbiAgLnNlZS1hbGwgYVxuICAgIC8qIGRpZmZlcmVudCBzdHlsZSBmb3IgdGhlIFNlZSBhbGwgYnV0dG9uIG9uIG1vYmlsZSBhbmQgdGFibGV0XG4gICAgY29sb3I6ICRncmVlblxuXG4gIC5jZC1uYXYtZ2FsbGVyeSAuY2QtbmF2LWl0ZW0sXG4gIC5jZC1uYXYtaWNvbnMgLmNkLW5hdi1pdGVtXG4gICAgLyogaXRlbXMgd2l0aCBwaWN0dXJlIChvciBpY29uKSBhbmQgdGl0bGVcbiAgICBoZWlnaHQ6IDgwcHhcbiAgICBsaW5lLWhlaWdodDogODBweFxuXG4gICAgaDNcbiAgICAgIG92ZXJmbG93OiBoaWRkZW5cbiAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzXG5cbiAgLmNkLW5hdi1nYWxsZXJ5IC5jZC1uYXYtaXRlbVxuICAgIC8vcGFkZGluZy1sZWZ0OiA5MHB4XG5cbiAgICBpbWdcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZVxuICAgICAgZGlzcGxheTogYmxvY2tcbiAgICAgIGhlaWdodDogNDBweFxuICAgICAgd2lkdGg6IGF1dG9cbiAgICAgIGxlZnQ6IDIwcHhcbiAgICAgIHRvcDogNTAlXG4gICAgICBtYXJnaW4tdG9wOiAtMjBweFxuXG4gICAgICArbWVkaWEoXCI8ZGVza3RvcFwiKVxuICAgICAgICBkaXNwbGF5OiBub25lXG5cbiAgLmNkLW5hdi1pY29ucyAuY2QtbmF2LWl0ZW1cbiAgICBwYWRkaW5nLWxlZnQ6IDc1cHhcblxuICAgIHBcbiAgICAgIGNvbG9yOiAkbmlnaHRncmVlblxuICAgICAgZm9udC1zaXplOiAxLjNyZW1cbiAgICAgIC8qIGhpZGUgZGVzY3JpcHRpb24gb24gc21hbGwgZGV2aWNlc1xuICAgICAgZGlzcGxheTogbm9uZVxuXG4gICAgJjo6YmVmb3JlXG4gICAgICAvKiBpdGVtIGljb25cbiAgICAgIGNvbnRlbnQ6ICcnXG4gICAgICBkaXNwbGF5OiBibG9ja1xuICAgICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgICBsZWZ0OiAyMHB4XG4gICAgICB0b3A6IDUwJVxuICAgICAgbWFyZ2luLXRvcDogLTIwcHhcbiAgICAgIHdpZHRoOiA0MHB4XG4gICAgICBoZWlnaHQ6IDQwcHhcbiAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXRcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXJcbiAgICAgIGJhY2tncm91bmQtc2l6ZTogNDBweCA0MHB4XG5cbiAgICAmLml0ZW0tMTo6YmVmb3JlXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvaW1hZ2VzL2xpbmUtaWNvbi0xLnN2Z1wiKVxuICAgICYuaXRlbS0yOjpiZWZvcmVcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi9pbWFnZXMvbGluZS1pY29uLTIuc3ZnXCIpXG4gICAgJi5pdGVtLTM6OmJlZm9yZVxuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL2ltYWdlcy9saW5lLWljb24tMy5zdmdcIilcbiAgICAmLml0ZW0tNDo6YmVmb3JlXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvaW1hZ2VzL2xpbmUtaWNvbi00LnN2Z1wiKVxuICAgICYuaXRlbS01OjpiZWZvcmVcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi9pbWFnZXMvbGluZS1pY29uLTUuc3ZnXCIpXG4gICAgJi5pdGVtLTY6OmJlZm9yZVxuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL2ltYWdlcy9saW5lLWljb24tNi5zdmdcIilcbiAgICAmLml0ZW0tNzo6YmVmb3JlXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvaW1hZ2VzL2xpbmUtaWNvbi03LnN2Z1wiKVxuICAgICYuaXRlbS04OjpiZWZvcmVcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi9pbWFnZXMvbGluZS1pY29uLTguc3ZnXCIpXG5cbiAgK21lZGlhKFwiPGRlc2t0b3BcIilcbiAgICAvKiBieSBkZWZhdWx0IC5jZC1wcmltYXJ5LW5hdiBpcyBoaWRkZW4gLSB0cmljayBmb3IgaU9TIGRldmljZXMgd2hlcmUgeW91IGNhbiBzZWUgdGhlIG5hdmlnYXRpb24gaWYgeW91IHB1bGwgZG93blxuICAgIHZpc2liaWxpdHk6IGhpZGRlblxuICAgIHRyYW5zaXRpb246IHZpc2liaWxpdHkgMHMgMC4zc1xuICAgICYubmF2LWlzLXZpc2libGVcbiAgICAgIHZpc2liaWxpdHk6IHZpc2libGVcbiAgICAgIHRyYW5zaXRpb246IHZpc2liaWxpdHkgMHMgMHNcblxuK21lZGlhKFwiPmRlc2t0b3BcIilcblxuICAuY2QtcHJpbWFyeS1uYXZcbiAgICBwb3NpdGlvbjogc3RhdGljXG4gICAgcGFkZGluZzogMCA1MHB4IDAgMFxuICAgIGhlaWdodDogYXV0b1xuICAgIHdpZHRoOiAxMDAlXG4gICAgLy9mbG9hdDogcmlnaHRcbiAgICBvdmVyZmxvdzogdmlzaWJsZVxuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50XG4gICAgdGV4dC1hbGlnbjogY2VudGVyXG5cbiAgICArY2xlYXJmaXhcblxuICAgICYubW92ZXMtb3V0ID4gbGkgPiBhXG4gICAgICAvKiByZXNldCBtb2JpbGUgc3R5bGVcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKVxuICAgICAgb3BhY2l0eTogMVxuXG4gICAgdWxcbiAgICAgIHBvc2l0aW9uOiBzdGF0aWNcbiAgICAgIGhlaWdodDogYXV0b1xuICAgICAgd2lkdGg6IGF1dG9cbiAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50XG4gICAgICBvdmVyZmxvdzogdmlzaWJsZVxuICAgICAgdGV4dC1hbGlnbjogbGVmdFxuICAgICAgei1pbmRleDogJGFib3ZlLWNvbnRlbnRcblxuICAgICAgJi5pcy1oaWRkZW5cbiAgICAgICAgLyogcmVzZXQgbW9iaWxlIHN0eWxlXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKVxuXG4gICAgICAmLm1vdmVzLW91dCA+IGxpID4gYVxuICAgICAgICAvKiByZXNldCBtb2JpbGUgc3R5bGVcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApXG4gICAgICAgIG9wYWNpdHk6IDFcblxuICAgIC8vVG9wIG5hdiBpdGVtc1xuICAgID4gbGlcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9ja1xuICAgICAgLy9mbG9hdDogbGVmdFxuICAgICAgbWFyZ2luLWxlZnQ6IC41cmVtXG5cbiAgICA+IGxpID4gYVxuICAgICAgLyogbWFpbiBuYXZpZ2F0aW9uIGJ1dHRvbnMgc3R5bGVcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZVxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gICAgICBoZWlnaHQ6ICRoZWFkZXItaGVpZ2h0LUxcbiAgICAgIGxpbmUtaGVpZ2h0OiAkaGVhZGVyLWhlaWdodC1MXG4gICAgICBwYWRkaW5nOiAwXG4gICAgICBjb2xvcjogJG5pZ2h0Z3JlZW5cbiAgICAgIG92ZXJmbG93OiB2aXNpYmxlXG4gICAgICBib3JkZXItYm90dG9tOiBub25lXG4gICAgICB0cmFuc2l0aW9uOiBjb2xvciAwLjNzLCBib3gtc2hhZG93IDAuM3NcblxuICAgICAgJjpob3ZlclxuICAgICAgICBjb2xvcjogJGdyZWVuXG4gICAgICAmLnNlbGVjdGVkXG4gICAgICAgIGNvbG9yOiAkZ3JlZW5cbiAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAtMnB4IDAgJGdyZWVuXG5cbiAgICAuZ28tYmFjaywgLnNlZS1hbGxcbiAgICAgIGRpc3BsYXk6IG5vbmVcblxuICAgIC5jZC1zZWNvbmRhcnktbmF2LFxuICAgIC5jZC1uYXYtZ2FsbGVyeSxcbiAgICAuY2QtbmF2LWljb25zXG4gICAgICAvKiBkcm9wZG93biBtZW51IHN0eWxlXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGVcbiAgICAgIHRvcDogJGhlYWRlci1oZWlnaHQtTFxuICAgICAgLy93aWR0aDogMTAwdndcbiAgICAgIHdpZHRoOiAxMDAlXG4gICAgICBiYWNrZ3JvdW5kOiAkd2hpdGVcbiAgICAgIC8vQ0hBTkdFRFxuICAgICAgLy9wYWRkaW5nOiA0OHB4IDY0cHggMTMwcHhcbiAgICAgIHBhZGRpbmc6IDJyZW1cbiAgICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDAgJGNsb3VkLCAwIDNweCA2cHggcmdiYSgjMDAwLCAwLjA1KVxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApXG4gICAgICArY2xlYXJmaXhcblxuICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAuM3MgMHMsIHZpc2liaWxpdHkgMHMgMHNcblxuICAgICAgJi5pcy1oaWRkZW5cbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW5cbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAuM3MgMHMsIHZpc2liaWxpdHkgMHMgLjNzXG5cbiAgICAgID4gLnNlZS1hbGxcbiAgICAgICAgLyogdGhpcyBpcyB0aGUgQklHIFNlZSBhbGwgYnV0dG9uIGF0IHRoZSBib3R0b20gb2YgdGhlIGRyb3Bkb3duIG1lbnVcbiAgICAgICAgZGlzcGxheTogYmxvY2tcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgICAgIGxlZnQ6IDBcbiAgICAgICAgYm90dG9tOiAwXG4gICAgICAgIGhlaWdodDogODBweFxuICAgICAgICB3aWR0aDogMTAwJVxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuXG4gICAgICAgIC8qIHJlc2V0IHNvbWUgaW5oZXJpdGVkIHN0eWxlXG4gICAgICAgIG1hcmdpbjogMFxuICAgICAgICBwYWRkaW5nOiAwXG5cbiAgICAgICAgYVxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZVxuICAgICAgICAgIHdpZHRoOiAxMDAlXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlXG4gICAgICAgICAgdG9wOiAwXG4gICAgICAgICAgbGVmdDogMFxuICAgICAgICAgIGZvbnQtc2l6ZTogMi4ycmVtXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGRcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXJcbiAgICAgICAgICBsaW5lLWhlaWdodDogODBweFxuICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAkY2xvdWRcbiAgICAgICAgICAvKiByZXNldCBzb21lIGluaGVyaXRlZCBzdHlsZVxuICAgICAgICAgIGJvcmRlci1ib3R0b206IG5vbmVcbiAgICAgICAgICBtYXJnaW46IDBcbiAgICAgICAgICBwYWRkaW5nOiAwXG4gICAgICAgICAgdHJhbnNpdGlvbjogY29sb3IgMC4ycywgYmFja2dyb3VuZCAwLjJzLCBib3JkZXIgMC4yc1xuXG4gICAgICAgICAgJjpob3ZlclxuICAgICAgICAgICAgYmFja2dyb3VuZDogJG5pZ2h0Z3JlZW5cbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJG5pZ2h0Z3JlZW5cbiAgICAgICAgICAgIGNvbG9yOiAkd2hpdGVcblxuICAgIC5jZC1zZWNvbmRhcnktbmF2XG5cbiAgICAgID4gbGlcbiAgICAgICAgLyogY2hhbmdlIHRoZSBoZWlnaHQgYWNjb3JkaW5nIHRvIHlvdXIgbmVlZHMgLSB5b3UgY2FuIGV2ZW4gc2V0IGhlaWdodDogYXV0b1xuICAgICAgICBoZWlnaHQ6IDM0MHB4XG4gICAgICAgIC8qIGhlcmUgeW91IHNldCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgLSB1c2Ugd2lkdGggcGVyY2VudGFnZVxuICAgICAgICArY29sdW1uKDAuMjMpXG4gICAgICAgIC8vIHNlZSBwYXJ0aWFscyA+IF9sYXlvdXQuc2Nzc1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDIuNjYlXG4gICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICRjbG91ZFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuXG4gICAgICAgIG92ZXJmbG93LXg6IGhpZGRlblxuICAgICAgICBvdmVyZmxvdy15OiBhdXRvXG4gICAgICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaFxuXG4gICAgICAgICY6bnRoLWNoaWxkKDRuKzIpXG4gICAgICAgICAgLyogKzIgYmVjYXVzZSB3ZSBoYXZlIDIgbGlzdCBpdGVtcyB3aXRoIGRpc3BsYXk6bm9uZVxuICAgICAgICAgIG1hcmdpbi1yaWdodDogMFxuICAgICAgICAgIGJvcmRlci1yaWdodDogbm9uZVxuXG4gICAgICAgID4gYVxuICAgICAgICAgIC8qIHNlY29uZGFyeSBuYXYgdGl0bGVcbiAgICAgICAgICBjb2xvcjogJGdyZWVuXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGRcbiAgICAgICAgICBmb250LXNpemU6IDEuNnJlbVxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IC42ZW1cblxuICAgICAgYVxuICAgICAgICBoZWlnaHQ6IDMwcHhcbiAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHhcbiAgICAgICAgcGFkZGluZzogMCAxOCUgMCAwXG4gICAgICAgIGNvbG9yOiAkbmlnaHRncmVlblxuICAgICAgICBib3JkZXItYm90dG9tOiBub25lXG4gICAgICAgIGZvbnQtc2l6ZTogMS40cmVtXG5cbiAgICAgICAgJjpob3ZlclxuICAgICAgICAgIGNvbG9yOiAkZ3JlZW5cblxuICAgICAgdWxcbiAgICAgICAgLyogRm9yY2UgSGFyZHdhcmUgQWNjZWxlcmF0aW9uIGluIFdlYktpdFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMClcblxuICAgICAgdWwgdWxcbiAgICAgICAgLyogdGVydGlhcnkgbmF2aWdhdGlvblxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGVcbiAgICAgICAgdG9wOiAwXG4gICAgICAgIGxlZnQ6IDBcbiAgICAgICAgaGVpZ2h0OiAxMDAlXG4gICAgICAgIHdpZHRoOiAxMDAlXG5cbiAgICAgICAgJi5pcy1oaWRkZW5cbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwJSlcblxuICAgICAgICAuZ28tYmFja1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrXG5cbiAgICAgICAgICBhXG4gICAgICAgICAgICBjb2xvcjogdHJhbnNwYXJlbnRcblxuICAgICAgICAuc2VlLWFsbFxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrXG5cbiAgICAgIC5tb3Zlcy1vdXQgPiBsaSA+IGFcbiAgICAgICAgLyogcHVzaCB0aGUgbmF2aWdhdGlvbiBpdGVtcyB0byB0aGUgbGVmdCAtIGFuZCBsb3dlciBkb3duIG9wYWNpdHkgLSB3aGVuIHRlcnRpYXJ5IG5hdiBzbGlkZXMgaW5cbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKVxuXG4gICAgLmNkLW5hdi1nYWxsZXJ5XG4gICAgICBib3gtc2hhZG93OiAwIDVweCA1cHggcmdiYSgxMDAsMTAwLDEwMCwuMylcblxuICAgICAgbGlcbiAgICAgICAgLyogc2V0IGhlcmUgbnVtYmVyIG9mIGNvbHVtbnMgLSB1c2Ugd2lkdGggcGVyY2VudGFnZVxuICAgICAgICAvLytjb2x1bW4oMC4yMilcbiAgICAgICAgLy9tYXJnaW46IDAgNCUgNDBweCAwXG5cbiAgICAgICAgZmxvYXQ6IGxlZnRcbiAgICAgICAgd2lkdGg6IDI1JVxuICAgICAgICBwYWRkaW5nOiAxcmVtXG5cbiAgICAgICAgJjpudGgtY2hpbGQoNG4rMilcbiAgICAgICAgICAvKiArMiBiZWNhdXNlIHdlIGhhdmUgdHdvIGFkZGl0aW9uYWwgbGlzdCBpdGVtcyB3aXRoIGRpc3BsYXk6bm9uZVxuICAgICAgICAgIC8vbWFyZ2luLXJpZ2h0OiAwXG5cbiAgICAgIC5jZC1uYXYtaXRlbVxuICAgICAgICBib3JkZXItYm90dG9tOiBub25lXG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgICAgaGVpZ2h0OiBhdXRvXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjJcblxuICAgICAgICBpbWdcbiAgICAgICAgICBwb3NpdGlvbjogc3RhdGljXG4gICAgICAgICAgbWFyZ2luLXRvcDogMFxuICAgICAgICAgIGhlaWdodDogYXV0b1xuICAgICAgICAgIHdpZHRoOiAxMDAlXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogLjZyZW1cblxuICAgICAgICBoM1xuICAgICAgICAgIGNvbG9yOiAkZ3JlZW5cbiAgICAgICAgICBmb250LXdlaWdodDogYm9sZFxuICAgICAgICAgIGZvbnQtc2l6ZTogLjlyZW1cbiAgICAgICAgICBwYWRkaW5nOiAwIC40cmVtXG5cbiAgICAuY2QtbmF2LWljb25zXG5cbiAgICAgIGxpXG4gICAgICAgIC8qIHNldCBoZXJlIG51bWJlciBvZiBjb2x1bW5zIC0gdXNlIHdpZHRoIHBlcmNlbnRhZ2VcbiAgICAgICAgK2NvbHVtbigwLjMyKVxuICAgICAgICBtYXJnaW46IDAgMiUgMjBweCAwXG4gICAgICAgICY6bnRoLWNoaWxkKDNuKzIpXG4gICAgICAgICAgLyogKzIgYmVjYXVzZSB3ZSBoYXZlIHR3byBhZGRpdGlvbmFsIGxpc3QgaXRlbXMgd2l0aCBkaXNwbGF5Om5vbmVcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDBcbiAgICAgIC5jZC1uYXYtaXRlbVxuICAgICAgICBib3JkZXItYm90dG9tOiBub25lXG4gICAgICAgIGhlaWdodDogODBweFxuICAgICAgICBsaW5lLWhlaWdodDogMS4yXG4gICAgICAgIHBhZGRpbmc6IDI0cHggMCAwIDg1cHhcbiAgICAgICAgJjpob3ZlclxuICAgICAgICAgIGJhY2tncm91bmQ6IGxpZ2h0ZW4oJGNsb3VkLCA4JSlcbiAgICAgICAgaDNcbiAgICAgICAgICBjb2xvcjogJGdyZWVuXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGRcbiAgICAgICAgcFxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrXG4gICAgICAgICY6OmJlZm9yZVxuICAgICAgICAgIGxlZnQ6IDI1cHhcblxuXG4uaGFzLWNoaWxkcmVuID4gYSwgLmdvLWJhY2sgYVxuICBwb3NpdGlvbjogcmVsYXRpdmVcbiAgJjo6YmVmb3JlLCAmOjphZnRlclxuICAgIC8qIGFycm93IGljb24gaW4gQ1NTIC0gZm9yIGVsZW1lbnQgd2l0aCBuZXN0ZWQgdW5vcmRlcmVkIGxpc3RzXG4gICAgY29udGVudDogJydcbiAgICBwb3NpdGlvbjogYWJzb2x1dGVcbiAgICB0b3A6IDUwJVxuICAgIG1hcmdpbi10b3A6IC0xcHhcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcbiAgICBoZWlnaHQ6IDJweFxuICAgIHdpZHRoOiAxMHB4XG4gICAgYmFja2dyb3VuZDogbGlnaHRlbigkbmlnaHRncmVlbiwgMTAlKVxuXG4gICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuXG4gICY6OmJlZm9yZVxuICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKVxuICAmOjphZnRlclxuICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZylcbiAgK21lZGlhKFwiPmRlc2t0b3BcIilcbiAgICAmOjpiZWZvcmUsICY6OmFmdGVyXG4gICAgICBiYWNrZ3JvdW5kOiBkYXJrZW4oJGNsb3VkLCAxMCUpXG4gICAgJjpob3Zlcjo6YmVmb3JlLCAmOmhvdmVyOjphZnRlclxuICAgICAgYmFja2dyb3VuZDogJGdyZWVuXG5cbi5oYXMtY2hpbGRyZW4gPiBhXG4gIHBhZGRpbmctcmlnaHQ6IDQwcHhcbiAgJjo6YmVmb3JlLCAmOjphZnRlclxuICAgIC8qIGFycm93IGdvZXMgb24gdGhlIHJpZ2h0IHNpZGUgLSBjaGlsZHJlbiBuYXZpZ2F0aW9uXG4gICAgcmlnaHQ6IDIwcHhcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiA5cHggNTAlXG5cbi5jZC1wcmltYXJ5LW5hdiAuZ28tYmFjayBhXG4gIHBhZGRpbmctbGVmdDogNDBweFxuICAmOjpiZWZvcmUsICY6OmFmdGVyXG4gICAgLyogYXJyb3cgZ29lcyBvbiB0aGUgbGVmdCBzaWRlIC0gZ28gYmFjayBidXR0b25cbiAgICBsZWZ0OiAyMHB4XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogMXB4IDUwJVxuXG4rbWVkaWEoXCI+ZGVza3RvcFwiKVxuICAuaGFzLWNoaWxkcmVuID4gYVxuICAgICY6OmJlZm9yZSwgJjo6YWZ0ZXJcbiAgICAgIHJpZ2h0OiAxNSVcbiAgLmNkLXByaW1hcnktbmF2ID4gLmhhcy1jaGlsZHJlbiA+IGFcbiAgICAvKiBtYWluIG5hdmlnYXRpb24gYXJyb3dzIG9uIGxhcmdlciBkZXZpY2VzXG4gICAgcGFkZGluZy1yaWdodDogMzBweCAhaW1wb3J0YW50XG4gICAgJjo6YmVmb3JlLCAmOjphZnRlclxuICAgICAgd2lkdGg6IDlweFxuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDUwJVxuICAgICAgYmFja2dyb3VuZDogZGFya2VuKCRjbG91ZCwgMTAlKVxuXG4gICAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW5cbiAgICAgIHRyYW5zaXRpb246IHdpZHRoIDAuM3MsIHRyYW5zZm9ybSAwLjNzXG4gICAgJjo6YmVmb3JlXG4gICAgICByaWdodDogMTJweFxuICAgICY6OmFmdGVyXG4gICAgICByaWdodDogN3B4XG4gICAgJi5zZWxlY3RlZDo6YmVmb3JlLCAmLnNlbGVjdGVkOjphZnRlclxuICAgICAgd2lkdGg6IDE0cHhcbiAgICAmLnNlbGVjdGVkOjpiZWZvcmVcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCg1cHgpIHJvdGF0ZSgtNDVkZWcpXG4gICAgJi5zZWxlY3RlZDo6YWZ0ZXJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKVxuICAuY2Qtc2Vjb25kYXJ5LW5hdiA+IC5oYXMtY2hpbGRyZW4gPiBhOjpiZWZvcmUsIC5jZC1zZWNvbmRhcnktbmF2ID4gLmhhcy1jaGlsZHJlbiA+IGE6OmFmdGVyXG4gICAgLyogcmVtb3ZlIGFycm93cyBvbiBzZWNvbmRhcnkgbmF2IHRpdGxlc1xuICAgIGRpc3BsYXk6IG5vbmVcbiAgLmNkLXByaW1hcnktbmF2IC5nby1iYWNrIGFcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHhcbiAgICAmOjpiZWZvcmUsICY6OmFmdGVyXG4gICAgICBsZWZ0OiAxcHhcblxuXG5cblxuLmNkLXNlYXJjaFxuICBmbG9hdDpyaWdodDtcblxuICBcblxuICBmb3JtXG4gICAgcG9zaXRpb246cmVsYXRpdmVcbiAgaW5wdXRbdHlwZT1cInN1Ym1pdFwiXVxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi9pbWFnZXMvc2VhcmNoLWljb24ucG5nXCIpIFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXRcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9ja1xuICAgIHRleHQtaW5kZW50OiAtOTk5OTlweFxuICAgIGhlaWdodDogMjJweFxuICAgIHdpZHRoOiAyMnB4XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lXG4gICAgYm9yZGVyOiAwXG4gICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgdG9wOiA2cHhcbiAgICByaWdodDogM3B4XG4gICAgYmFja2dyb3VuZC1zaXplOiA3NSVcblxuICBpbnB1dFt0eXBlPVwic2VhcmNoXCJdXG4gICAgcGFkZGluZy1sZWZ0OjEwcHg7XG4gICAgLy9ib3gtc2hhZG93OiBpbnNldCAwIDFweCAwICRjbG91ZCwgMCAzcHggNnB4IHJnYmEoIzAwMCwgMC4wNSlcbiAgICBhcHBlYXJhbmNlOiBub25lXG4gICAgYm9yZGVyOiAxcHggc29saWQgJGdyYXBoaXRlXG5cbiAgICAmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyLFxuICAgICY6Oi1tb3otcGxhY2Vob2xkZXIsXG4gICAgJjotbXMtaW5wdXQtcGxhY2Vob2xkZXJcbiAgICAgIGNvbG9yOiBkYXJrZW4oJGNsb3VkLCAxMCUpXG5cbiAgICAmOmZvY3VzXG4gICAgICBvdXRsaW5lOiBub25lXG5cbiAgJi5pcy12aXNpYmxlXG4gICAgb3BhY2l0eTogMVxuICAgIHZpc2liaWxpdHk6IHZpc2libGVcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC4zcyAwcywgdmlzaWJpbGl0eSAwcyAwc1xuICAgIC8vYm94LXNoYWRvdzogMXB4IDFweCA1cHggcmdiYSgxMDAsMTAwLDEwMCwgLjUpXG5cbiAgLm5hdi1pcy1maXhlZCAmXG4gICAgcG9zaXRpb246IGZpeGVkXG5cbiAgK21lZGlhKFwiPmRlc2t0b3BcIilcbiAgIFxuXG4gICAgaW5wdXRcbiAgICAgIFxuXG5cbi5jZC1vdmVybGF5XG4gIC8qIHNoYWRvdyBsYXllciB2aXNpYmxlIHdoZW4gbmF2aWdhdGlvbiBpcyBhY3RpdmVcbiAgcG9zaXRpb246IGZpeGVkXG4gIHotaW5kZXg6IDJcbiAgaGVpZ2h0OiAxMDAlXG4gIHdpZHRoOiAxMDAlXG4gIHRvcDogMFxuICBsZWZ0OiAwXG4gIGN1cnNvcjogcG9pbnRlclxuICAvL2JhY2tncm91bmQtY29sb3I6IHJnYmEoJGdyZWVuLCAwLjgpXG4gIHZpc2liaWxpdHk6IGhpZGRlblxuICBvcGFjaXR5OiAwXG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlblxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgMHMsIHZpc2liaWxpdHkgMHMgMC4zcywgdHJhbnNmb3JtIDAuM3MgMHNcblxuICAmLmlzLXZpc2libGVcbiAgICBvcGFjaXR5OiAxXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZVxuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyAwcywgdmlzaWJpbGl0eSAwcyAwcywgdHJhbnNmb3JtIDAuM3MgMHNcblxuICArbWVkaWEoXCI8ZGVza3RvcFwiKVxuICAgICYuaXMtdmlzaWJsZVxuICAgICAgLy90cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLSRuYXYtd2lkdGgtUylcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKVxuXG4gICAgLm5hdi1vbi1sZWZ0ICYuaXMtdmlzaWJsZVxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKCRuYXYtd2lkdGgtUylcblxuICAgICYuaXMtdmlzaWJsZS5zZWFyY2gtaXMtdmlzaWJsZSxcbiAgICAubmF2LW9uLWxlZnQgJi5pcy12aXNpYmxlLnNlYXJjaC1pcy12aXNpYmxlXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMClcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKnN1cHBvcnQgZm9yIG5vIGpzXG4gKlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4ubm8tanMgLmNkLXByaW1hcnktbmF2XG4gIHBvc2l0aW9uOiByZWxhdGl2ZVxuICBoZWlnaHQ6IGF1dG9cbiAgd2lkdGg6IDEwMCVcbiAgb3ZlcmZsb3c6IHZpc2libGVcbiAgdmlzaWJpbGl0eTogdmlzaWJsZVxuICB6LWluZGV4OiAkY29udGVudFxuXG4ubm8tanMgLmNkLXNlYXJjaFxuICBwb3NpdGlvbjogcmVsYXRpdmVcbiAgdG9wOiAwXG4gIG9wYWNpdHk6IDFcbiAgdmlzaWJpbGl0eTogdmlzaWJsZVxuXG4rbWVkaWEoXCI+ZGVza3RvcFwiKVxuICAubm8tanMgLmNkLXByaW1hcnktbmF2XG4gICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgei1pbmRleDogJGFib3ZlLWNvbnRlbnRcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcbiAgICB3aWR0aDogYXV0b1xuICAgIHRvcDogMFxuICAgIHJpZ2h0OiAxNTBweFxuICAgIHBhZGRpbmc6IDBcbiAgLm5vLWpzIC5uYXYtaXMtZml4ZWQgLmNkLXByaW1hcnktbmF2XG4gICAgcG9zaXRpb246IGZpeGVkXG4iLCIubmF2LWZvb3RlclxuXHRwYWRkaW5nOiAzMHB4IDIwcHggMjBweFxuXHR0ZXh0LWFsaWduOiBsZWZ0XG5cblx0K21lZGlhKFwiPD10YWJsZXRcIilcblx0XHRkaXNwbGF5OiBub25lXG5cblx0Jl9faGVhZGluZ1xuXHRcdGZvbnQtZmFtaWx5OiAkc2Fuc1xuXHRcdGZvbnQtc2l6ZTogMXJlbVxuXHRcdGZvbnQtd2VpZ2h0OiAkYm9sZFxuXHRcdG1hcmdpbi1ib3R0b206IDFyZW1cblxuXHRcdGFcblx0XHRcdGNvbG9yOiAkY2hhcmNvYWxcblx0XHRcdCY6aG92ZXJcblx0XHRcdFx0Y29sb3I6ICRncmVlblxuXG5cdCZfX2xpbmtcblx0XHRmb250LXNpemU6IDE0cHhcblxuXHQmX19ib3hcblx0XHRwYWRkaW5nOiAwIDEwcHhcblx0XHR2ZXJ0aWNhbC1hbGlnbjogdG9wXG5cblx0Jl9fYm94LW5hcnJvd1xuXHRcdHBhZGRpbmc6IDAgMTBweFxuXHRcdHZlcnRpY2FsLWFsaWduOiB0b3BcblxuXHQmX19idXR0b25cblx0XHRib3JkZXItd2lkdGg6IDFweFxuXHRcdGNvbG9yOiAkZ3JlZW5cblx0XHRmb250LXNpemU6IC45cmVtXG5cdFx0bWFyZ2luLWJvdHRvbTogMXJlbVxuXHRcdHBhZGRpbmc6IC41cmVtIDFyZW1cblx0XHR3aWR0aDogMTAwJVxuXG5cblx0Ly8gU3ViLW5hdmlnYXRpb24sIHdoaWNoIGhpZGVzIG9uIHNtYWxsIHNpemVzXG5cdCZfX3N1Yi1saW5rc1xuXHRcdGZvbnQtc2l6ZTogMTRweFxuXG5cdFx0YVxuXHRcdFx0Y29sb3I6ICRjaGFyY29hbFxuXHRcdFx0Jjpob3ZlclxuXHRcdFx0XHRjb2xvcjogJGdyZWVuXG5cblx0XHRsaTpudGgtY2hpbGQoMSlcblx0XHRcdGZvbnQtZmFtaWx5OiAkc2Fuc1xuXHRcdFx0Zm9udC1zaXplOiAxcmVtXG5cdFx0XHRmb250LXdlaWdodDogJGJvbGRcblx0XHRcdG1hcmdpbi1ib3R0b206IC41cmVtXG4iLCIvL0Jhbm5lciBUYWxsIC0gVGhpcyBpcyBmb3VuZCBvbiB0aGUgaG9tZXBhZ2Ugb25seVxuLmJhbm5lci10YWxsXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChpbWFnZXMvaW5kZXhfaGVyby5qcGcpXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlclxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyXG4gIGhlaWdodDogMjAwcHhcbiAgcG9zaXRpb246IHJlbGF0aXZlXG5cbiAgK21lZGlhKFwiPnRhYmxldFwiKVxuICAgIGhlaWdodDogNDY1cHhcblxuXG4gICZfX2hlYWRsaW5lXG4gICAgYm90dG9tOiAzcmVtXG4gICAgY29sb3I6ICR3aGl0ZVxuICAgIGZvbnQtZmFtaWx5OiBzZXJpZlxuICAgIGZvbnQtc2l6ZTogNXJlbVxuICAgIGZvbnQtd2VpZ2h0OiAkbm9ybWFsXG4gICAgbGVmdDogMnJlbVxuICAgIGxpbmUtaGVpZ2h0OiAxXG4gICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgbWFyZ2luOiAwIDAgMXJlbSAxcmVtXG4gICAgdGV4dC1zaGFkb3c6IDJweCAycHggMnB4ICRjaGFyY29hbFxuXG4gICAgK21lZGlhKFwiPHRhYmxldFwiKVxuICAgICAgcG9zaXRpb246IHN0YXRpY1xuICAgICAgZm9udC1zaXplOiAycmVtXG4gICAgICBwYWRkaW5nOiAycmVtXG5cbi8vIEJhbm5lciBTdGFuZGFyZCAtIFRoaXMgaXMgZm91bmQgb24gdGhlIG1ham9yaXR5IG9mIHRoZSBpbnRlcm5hbCBwYWdlc1xuLmJhbm5lci1zdGFuZGFyZFxuICBiYWNrZ3JvdW5kOiAkZ3JlZW5cbiAgY29sb3I6ICR3aGl0ZVxuICBkaXNwbGF5OiB0YWJsZVxuICBoZWlnaHQ6IGF1dG9cblxuICAvLyBHZXQgcmlkIG9mIHdlaXJkIHNwYWNlIGJlbG93IGltYWdlIGluIHRoZSBiYW5uZXJzXG4gIGltZ1xuICAgIGRpc3BsYXk6IGJsb2NrXG5cbiAgJl9fYm94XG4gICAgcGFkZGluZzogMXJlbSAycmVtXG5cbiAgJl9faGVhZGluZ1xuICAgIGNvbG9yOiAkd2hpdGVcblxuICAmX190ZXh0XG5cbiAgJl9fbWVkaWFcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2xhdGVcblxuICAvLyBUaGlzIGlzIGZvdW5kIG9uIHRoZSBBcHByb2FjaCBQYWdlXG4gICZfX21lZGlhLWFwcHJvYWNoXG4gICAvLyBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vaW1hZ2VzL21lZXRpbmcuanBnKVxuICAgLy8gYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyXG4gICAvLyBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyXG5cbiAgICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgICAgaGVpZ2h0OiAzMDBweFxuXG4gIC8vIFRoaXMgaXMgZm91bmQgb24gdGhlIExlYWRlcnNoaXAgcGFnZVxuICAmX19tZWRpYS1sZWFkZXJzaGlwXG4gICAvLyBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vaW1hZ2VzL3Blb3BsZS5qcGcpXG4gICAvLyBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXJcbiAgIC8vIGJhY2tncm91bmQtc2l6ZTogY292ZXJcblxuICAgICttZWRpYShcIjw9dGFibGV0XCIpXG4gICAgICBoZWlnaHQ6IDMwMHB4XG5cbi8vIEJhbm5lciBQYW5vcmFtYSAtIFRoaXMgaXMgZm91bmQgb24gdGhlIE5ld3MgcGFnZVxuLmJhbm5lci1wYW5vcmFtYVxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vaW1hZ2VzL3RyZWVzLmpwZylcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXJcbiAgaGVpZ2h0OiAyNTVweFxuIiwiLmNhcmQtZGlwdGljXG4gIGRpc3BsYXk6IHRhYmxlXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAkYm9yZGVyQ29sb3JcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRib3JkZXJDb2xvclxuXG4gICtyZXNwb25zaXZlLXN0YWNrXG5cbiAgJl9fYm94XG4gICAgZGlzcGxheTogdGFibGUtY2VsbFxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGVcblxuICAgIHBhZGRpbmc6IDJyZW0gMXJlbVxuXG4gICAgK21lZGlhKFwiPnRhYmxldFwiKVxuICAgICAgcGFkZGluZzogMnJlbSAxcmVtIDJyZW0gMnJlbVxuXG4gICAgJjpudGgtY2hpbGQoMilcbiAgICAgICttZWRpYShcIj50YWJsZXRcIilcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAkYm9yZGVyQ29sb3JcbiAgICAgICAgcGFkZGluZzogMnJlbSAycmVtIDJyZW0gMXJlbVxuXG4gICZfX2hlYWRpbmdcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXJcblxuICAmX19tZWRpYVxuICAgIGJhY2tncm91bmQtY29sb3I6ICRncmVlblxuICAgIGhlaWdodDogMTUwcHhcbiAgICBvdmVyZmxvdzogaGlkZGVuXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbVxuXG4gICZfX3RleHRcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXJcbiAgICBtYXJnaW4tYm90dG9tOiAycmVtXG5cbiAgdWxcbiAgICBsaXN0LXN0eWxlOiBub25lXG4gICAgdGV4dC1hbGlnbjogY2VudGVyXG5cbiAgICBsaVxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gICAgICBwYWRkaW5nOiAuNXJlbVxuICAgICAgd2lkdGg6IDQ3JVxuXG5cbiAgJl9fbGlua1xuICAgIGNvbG9yOiAkc2l0ZS10ZXh0LWNvbG9yLWxpbmtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcbiAgICBmb250LWZhbWlseTogJHNlcmlmXG4gICAgcGFkZGluZzogMCAuNHJlbVxuICAgICY6aG92ZXJcbiAgICAgIGNvbG9yOiAkc2l0ZS10ZXh0LWNvbG9yLWxpbmstaG92ZXJcblxuXG4vLyBDYXJkIEJpbyAtIFRoZXNlIGFyZSBmb3VuZCBvbiB0aGUgTGVhZGVyc2hpcCBwYWdlXG4uY2FyZC1iaW9cbiAgcGFkZGluZy1ib3R0b206IDJyZW1cblxuICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY2xvdWRcbiAgICBtYXJnaW4tYm90dG9tOiAycmVtXG5cbiAgJl9fbWVkaWFcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wXG5cbiAgICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbVxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyXG5cbiAgICBpbWdcbiAgICAgICttZWRpYShcIjw9dGFibGV0XCIpXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9ja1xuICAgICAgICB3aWR0aDogMzMlXG5cbiAgJl9fYm94XG4gICAgcGFkZGluZy1sZWZ0OiAycmVtXG4gICAgcGFkZGluZy10b3A6IDBcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wXG5cbiAgICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgICAgcGFkZGluZzogMFxuXG4gICZfX2hlYWRpbmdcbiAgICAvL01peGluIGNhbiBiZSBmb3VuZCBpbiB0eXBvZ3JhcGh5XG4gICAgK3N0YW5kYXJkLWhlYWRpbmcoKVxuXG4gICZfX3N1YnRpdGxlXG4gICAgY29sb3I6ICRzdG9uZVxuXG4gICAgaDNcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9ja1xuICAgIGFcbiAgICAgIGNvbG9yOiAkZ3JlZW5cbiAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4XG4gICAgICBpXG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgJGdyZWVuXG4gICAgICAgIHBhZGRpbmc6IDJweFxuXG4gICZfX3RleHRcblxuICAgICttZWRpYShcIjw9dGFibGV0XCIpXG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0XG5cbiAgICAqICsgKlxuICAgICAgbWFyZ2luLXRvcDogMXJlbVxuXG5cbi8vIENhcmQgYXJ0aWNsZSAtIFRoZXNlIGFyZSBmb3VuZCBvbiB0aGUgTmV3cyBhbmQgSW5zaWdodHMgcGFnZVxuLmNhcmQtYXJ0aWNsZVxuXG5cbiAgJl9fYm94XG4gICAgYm94LXNoYWRvdzogMCAxcHggMCAkZ3JlZW5cbiAgICBkaXNwbGF5OiBub25lXG4gICAgK3ZlcnQtcGFkZGluZygxLDEpXG5cbiAgICAqICsgKlxuICAgICAgbWFyZ2luLXRvcDogMXJlbVxuXG4gIGgyXG4gICAgK3N0YW5kYXJkLWhlYWRpbmcoKSAvL01peGluIGNhbiBiZSBmb3VuZCBpbiB0eXBvZ3JhcGh5XG5cbiAgc21hbGxcbiAgICBjb2xvcjogIzY2NlxuICAgIGZvbnQtc2l6ZTogLjc1cmVtXG5cbiAgcFxuXG4ubG9hZGVyX19uYXZcbiAgZGlzcGxheTogdGFibGUtY2VsbFxuICBwYWRkaW5nLXRvcDogMS4yNXJlbVxuXG5cbi5jYXJkLXRyaXB0aWNcbiAgZGlzcGxheTogdGFibGVcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICRib3JkZXJDb2xvclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJvcmRlckNvbG9yXG5cbiAgJl9fYm94XG4gICAgcGFkZGluZzogMnJlbVxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3BcblxuICAgICY6bnRoLWNoaWxkKDIpXG4gICAgICArbWVkaWEoXCI+dGFibGV0XCIpXG4gICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgJGJvcmRlckNvbG9yXG4gICAgICAgIC8vcGFkZGluZzogMnJlbSAxcmVtIDJyZW0gMXJlbVxuXG4gICAgJjpudGgtY2hpbGQoMylcbiAgICAgICttZWRpYShcIj50YWJsZXRcIilcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAkYm9yZGVyQ29sb3JcbiAgICAgICAgLy9wYWRkaW5nOiAycmVtIDJyZW0gMnJlbSAxcmVtXG5cbiAgJl9fbWVkaWFcbiAgICAvL2JhY2tncm91bmQtY29sb3I6ICRncmVlblxuICAgIGhlaWdodDogMTUwcHhcbiAgICBvdmVyZmxvdzogaGlkZGVuXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbVxuXG4gICAgaW1nXG5cbiAgJl9faGVhZGluZy1saW5rXG4gICAgK3NtYWxsLWhlYWRpbmcoKVxuICAgIGNvbG9yOiAkc2l0ZS10ZXh0LWNvbG9yLWxpbmtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXJcblxuICAgICY6aG92ZXJcbiAgICAgIGNvbG9yOiAkc2l0ZS10ZXh0LWNvbG9yLWxpbmstaG92ZXJcblxuICAmX190ZXh0XG4gICAgdGV4dC1hbGlnbjogY2VudGVyXG4iLCIvL1xuLy9DVEFzIC0gQ2FsbCB0byBBY3Rpb24gbW9kdWxlc1xuLy9cblxuLy9Db250YWN0IENUQVxuLy9UaGlzIGlzIGZvdW5kIG9uIHRoZSBob21lcGFnZSBvbmx5IHJpZ2h0IG5vd1xuLmN0YS1jb250YWN0XG4gIGJhY2tncm91bmQtY29sb3I6ICRzbGF0ZVxuICBkaXNwbGF5OiB0YWJsZVxuICB3aWR0aDogMTAwJTtcblxuICAmX19ib3hcbiAgICBwYWRkaW5nOiAycmVtXG5cbiAgJl9fYm94Om50aC1jaGlsZCgyKVxuICAgIHBhZGRpbmc6IDJyZW0gMFxuXG5cbiAgJl9fdGV4dFxuICAgIG1hcmdpbjogMFxuICAgIHBhZGRpbmc6IDAgMy41cmVtIDAgMnJlbVxuXG4gICAgK21lZGlhKFwiPD10YWJsZXRcIilcbiAgICAgIHBhZGRpbmc6IDBcblxuICAmX19idXR0b25cbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcbiAgICBtYXJnaW46IDAgMnJlbSAwIDBcblxuICAgICttZWRpYShcIjw9dGFibGV0XCIpXG4gICAgICBtYXJnaW46IDBcblxuXG4vL1ZpZGVvIHRlYXNlciBDVEFcbi8vVGhpcyBpcyBmb3VuZCBvbiB0aGUgaG9tZXBhZ2Ugb25seSByaWdodCBub3dcbi5jdGEtdGVhc2VyXG4gIGRpc3BsYXk6IHRhYmxlXG4gIHBhZGRpbmc6IDFyZW0gMnJlbVxuXG4gICttZWRpYShcIjw9dGFibGV0XCIpXG4gICAgZmxleC1mbG93OiBjb2x1bW5cblxuICAmX19ib3hcbiAgICBwYWRkaW5nLXJpZ2h0OiAycmVtXG5cbiAgICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgICAgcGFkZGluZzogMFxuXG4gICZfX2hlYWRpbmdcblxuICAmX190ZXh0XG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbVxuXG5cbiAgJl9fbWVkaWFcbiAgICBoZWlnaHQ6IDMwMHB4XG4gICAgb3ZlcmZsb3c6IGhpZGRlblxuXG4gICAgK21lZGlhKFwiPD10YWJsZXRcIilcbiAgICAgIGhlaWdodDogYXV0b1xuICAgICAgbWFyZ2luLXRvcDogMnJlbVxuXG5cbi8vQ2VudGVyZWQgQ1RBXG4vL1RoaXMgaXMgZm91bmQgb24gdGhlIGhvbWVwYWdlIG9ubHkgcmlnaHQgbm93XG4uY3RhLWNlbnRlclxuICBwYWRkaW5nOiAycmVtXG4gIHRleHQtYWxpZ246IGNlbnRlclxuXG4gICZfX2hlYWRpbmdcblxuICAmX190ZXh0XG4gICAgcGFkZGluZzogMCA4cmVtXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbVxuXG4gICAgK21lZGlhKFwiPD10YWJsZXRcIilcbiAgICAgIHBhZGRpbmc6IDBcblxuICAmX19idXR0b25cblxuXG5cbi8vU3Vic2NyaWJlIENUQSAtIFRoaXMgaXMgZm91bmQgYXQgdGhlIHRvcCBvZiB0aGUgZm9vdGVyXG4uY3RhLXN1YnNjcmliZVxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JlZW5cbiAgY29sb3I6ICR3aGl0ZVxuICArdmVydC1wYWRkaW5nKDEsMS41KVxuXG4gICZfX2hlYWRpbmdcbiAgICBjb2xvcjogJHdoaXRlXG4gICAgdGV4dC1hbGlnbjogY2VudGVyXG5cbiAgJl9fYm94XG4gICAgZGlzcGxheTogdGFibGVcbiAgICBtYXJnaW46IDAgYXV0b1xuICAgIHdpZHRoOiA3NSVcblxuICAvLyBUT0RPIHVzZSBjb2wgY2xhc3MgaW5zdGVhZCBmb3Igd2lkdGhcbiAgJl9faW5wdXQtYWRkLW9uXG5cblxuICAmX19pbnB1dFxuICAgIHBhZGRpbmc6IC45cmVtXG4gICAgd2lkdGg6IDEwMCVcblxuICAmX19idXR0b25cbiAgICBib3JkZXI6IDFweCBzb2xpZCAkd2hpdGVcbiAgICBjb2xvcjogJHdoaXRlXG4gICAgZm9udC1zaXplOiAxLjVyZW1cbiAgICBtYXJnaW4tbGVmdDogMXJlbVxuICAgIHdpZHRoOiAxMDAlXG4gICAgdHJhbnNpdGlvbjogYWxsIC4ycyBlYXNlXG5cbiAgICAmOmhvdmVyXG4gICAgICAvKlRoZXNlIHdpbGwgdHJhbnNpdGlvbiBvbiBob3ZlclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlXG4gICAgICBjb2xvcjogJGdyZWVuXG5cbiAgICArbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgICAgbWFyZ2luOiAxcmVtIDAgMCAwXG5cbiAgJl9fbWVzc2FnZVxuICAgIGRpc3BsYXk6IG5vbmVcbiAgICBwYWRkaW5nLXRvcDogMi41cmVtXG5cbiAgJl9fZXJyb3JcbiAgICBkaXNwbGF5OiBub25lXG4gICAgcGFkZGluZy10b3A6IDFyZW1cblxuICAgICYtbXNnXG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXJcblxuXG4vL1NpZGViYXIgQ1RBIC0gVGhpcyBpcyBmb3VuZCBvbiBpbnRlcm5hbCBwYWdlcyBvbmx5XG4uY3RhLXNpZGViYXJcbiAgcGFkZGluZzogMXJlbSAwIDAgNXJlbVxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wXG5cbiAgK21lZGlhKFwiPD10YWJsZXRcIilcbiAgICBwYWRkaW5nOiAzcmVtIDJyZW1cblxuICAmX19tZWRpYVxuICAgIC8vaGVpZ2h0OiAxODBweFxuICAgIC8vb3ZlcmZsb3c6IGhpZGRlblxuXG4gICAgK21lZGlhKFwiPD10YWJsZXRcIilcblxuXG4gICAgaW1nXG5cbiAgJl9faGVhZGluZ1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbVxuICAgICt2ZXJ0LW1hcmdpbiguNSwuNSlcblxuICAmX190ZXh0XG5cbiAgJl9fYnV0dG9uXG4gICAgbWFyZ2luLXRvcDogMXJlbVxuXG4vL0FkZCBzb21lIHNwYWNpbmcgd2hlbiB0aGVyZSdzIG11bHRpcGxlIHNpZGViYXIgaXRlbXNcbi5jdGEtc2lkZWJhcl9fYnV0dG9uICsgLmN0YS1zaWRlYmFyX19oZWFkaW5nLFxuLmN0YS1zaWRlYmFyX190ZXh0ICsgLmN0YS1zaWRlYmFyX19oZWFkaW5nXG4gIG1hcmdpbi10b3A6IDJyZW1cblxuXG5cbi8vU29jaWFsIENUQSAtIFRoZXNlIGFyZSBjdXJyZW50bHkgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGUgYmxvZyBwb3N0c1xuLmN0YS1zb2NpYWxcbiAgcGFkZGluZy1sZWZ0OiAxcmVtXG5cbiAgLmljb25cbiAgICBmaWxsOiAkZ3JlZW5cblxuICAgICY6aG92ZXJcbiAgICAgIGZpbGw6ICRncmFwaGl0ZVxuIiwiLy9Gb290ZXJcbiRmb290ZXItaGVhZGVyLW5hdjogVHJlYnVjaGV0IE1TXG5cbmZvb3RlclxuXHRwYWRkaW5nLWJvdHRvbTogNXJlbVxuXG5cdCttZWRpYShcIjw9dGFibGV0XCIpXG5cdFx0cGFkZGluZzogMFxuXG5cbi5mb290ZXItY29weXJpZ2h0XG5cdGJvcmRlci10b3A6IDFweCBzb2xpZCAkY2xvdWRcblx0ZGlzcGxheTogdGFibGVcblx0cGFkZGluZzogMnJlbVxuXHR3aWR0aDogMTAwJVxuXG5cdCttZWRpYShcIjw9dGFibGV0XCIpXG5cdFx0cGFkZGluZzogMnJlbSAwIDAgMFxuXG5cdCZfX2xvZ28tYm94XG5cdFx0d2lkdGg6IDQ1MHB4XG5cblx0XHQrbWVkaWEoXCI8PXRhYmxldFwiKVxuXHRcdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrXG5cblx0XHRcdC5sb2dvX19zdGFja2VkXG5cdFx0XHRcdGRpc3BsYXk6IGlubGluZS1ibG9ja1xuXHRcdFx0XHR3aWR0aDogMjUwcHhcblxuXG5cdCZfX2JveFxuXHRcdHRleHQtYWxpZ246IHJpZ2h0XG5cblx0XHQrbWVkaWEoXCI+PXRhYmxldFwiLCBcIj49ZGVza3RvcFwiKVxuXHRcdFx0dGV4dC1hbGlnbjogcmlnaHRcblxuXHRcdHNtYWxsXG5cdFx0XHRkaXNwbGF5OiBpbmxpbmUtYmxvY2tcblx0XHRcdGZvbnQtc2l6ZTogMTRweFxuXHRcdFx0cGFkZGluZy1yaWdodDogLjVyZW1cblxuXHRcdFx0Jjo6YmVmb3JlXG5cdFx0XHRcdGNvbnRlbnQ6ICd8J1xuXG5cdFx0XHQmOm50aC1jaGlsZCgxKVxuXHRcdFx0XHQmOjpiZWZvcmVcblx0XHRcdFx0XHRjb250ZW50OiAnICdcblxuXG5cdFx0XHQrbWVkaWEoXCI+PXRhYmxldFwiLCBcIj49ZGVza3RvcFwiKVxuXHRcdFx0XHRmb250LXNpemU6IDEycHhcblxuXHRcdC5uYXYtbWlub3JcblxuXHRcdFx0bGlcblx0XHRcdCAgYVxuXHRcdFx0ICAgIGZvbnQtc2l6ZTogMTRweFxuXG5cdFx0XHQgICAgK21lZGlhKFwiPj10YWJsZXRcIiwgXCI+PWRlc2t0b3BcIilcblx0XHRcdCAgICAgIGZvbnQtc2l6ZTogMTJweFxuXG4uZm9vdGVyLWRpc2NsYWltZXJcblx0dGV4dC1hbGlnbjogY2VudGVyXG5cdHdpZHRoOiAxMDAlXG5cblx0Jl9fYm94XG5cdFx0Ym9yZGVyOiAxcHggc29saWQgJGZvb3Rlci10ZXh0XG5cdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrXG5cdFx0dGV4dC1hbGlnbjogY2VudGVyXG5cdFx0cGFkZGluZzogMjBweFxuXHRcdG1hcmdpbjogNTBweCBhdXRvIDEwcHhcblxuXHRoNiwgcCwgdWxcblx0XHRmb250LXNpemU6IDE0cHhcblx0XHRtYXJnaW4tYm90dG9tOiAxcmVtXG5cblx0XHQrbWVkaWEoXCI+PXRhYmxldFwiLCBcIj49ZGVza3RvcFwiKVxuXHRcdFx0Zm9udC1zaXplOiAxMnB4XG5cblx0dWxcblx0XHRAZXh0ZW5kICVtZW51XG5cdFx0bWFyZ2luLXRvcDogMFxuXG5cdFx0bGlcblx0XHRcdGRpc3BsYXk6IGlubGluZS1ibG9ja1xuXHRcdFx0bWFyZ2luOiAwIDEwcHhcblx0XHRcdHBhZGRpbmc6IC41cmVtXG4iLCJcbkBrZXlmcmFtZXMgZmFkZUluXG4gIGZyb21cbiAgICBvcGFjaXR5OiAwXG4gIHRvXG4gICAgb3BhY2l0eTogMVxuXG4uaGVhZGVyX19sb2dvLWJveFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGVcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAkYm9yZGVyQ29sb3JcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJGJvcmRlckNvbG9yXG4gIG1hcmdpbjogMCBhdXRvXG4gIG1heC13aWR0aDogMTIwMHB4XG5cbi8vIEZvciBJRTlcbi5uby1jc3NhbmltYXRpb25zIC5oZWFkZXJfX2xvZ28tYm94XG4gIHBhZGRpbmctdG9wOiAwXG5cbi5oZWFkZXJfX2xvZ29cbiAgYmFja2dyb3VuZDogJHdoaXRlXG5cblxuLmxvZ29cbiAgZGlzcGxheTogYmxvY2tcbiAgcGFkZGluZzogMHJlbSAwIDByZW0gMnJlbVxuICB3aWR0aDogNjAwcHhcblxuICArbWVkaWEoXCI8OTAwcHhcIilcbiAgICB3aWR0aDogNDAwcHhcblxuICArbWVkaWEoXCI8NTAwcHhcIilcbiAgICBwYWRkaW5nOiAxcmVtXG4gICAgd2lkdGg6IDMwMHB4XG5cbi8vIEZvciBJRTlcbi5uby1jc3NhbmltYXRpb25zIC5sb2dvXG4gIGhlaWdodDogNjhweFxuICBwYWRkaW5nOiAwIDFyZW1cblxuXG5zdmdcblxuICBwYXRoLCBwb2x5Z29uXG4gICAgZmlsbDogJGdyZWVuXG5cbiAgJjpob3ZlciBwYXRoLFxuICAmOmhvdmVyIHBvbHlnb25cbiAgICBvcGFjaXR5OiAuN1xuICAgIHRyYW5zaXRpb246IGZpbGwgMC4ycyBlYXNlXG4gICAgZmlsbC1vcGFjaXR5OiAwLjdcblxuLmxvZ29fX3N0cmV0Y2hlZFxuICBkaXNwbGF5OiBibG9ja1xuXG4gICttZWRpYShcIjw5MDBweFwiKVxuICAgIGRpc3BsYXk6IG5vbmVcblxuLmxvZ29fX3N0YWNrZWRcbiAgZGlzcGxheTogbm9uZVxuXG4gICttZWRpYShcIjw5MDBweFwiKVxuICAgIGRpc3BsYXk6IGJsb2NrXG5cblxuLy8gMjUgcGllY2VzXG4ubG9nb19fZ2xvYmVcbiAgcGF0aFxuICAvL0xvZ28gTG9hZCBBbmltYXRpb25cbiAgLy8gICBvcGFjaXR5OiAwXG4gIC8vICAgYW5pbWF0aW9uOiBmYWRlSW4gZWFzZS1pbiAxXG4gIC8vICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHNcbiAgLy8gICBhbmltYXRpb24tZHVyYXRpb246IC41c1xuXG4gIC8vIHBhdGg6bnRoLWNoaWxkKDEpXG4gIC8vICAgYW5pbWF0aW9uLWRlbGF5OiAwLjFzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoMilcbiAgLy8gICBhbmltYXRpb24tZGVsYXk6IDAuMTFzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoMylcbiAgLy8gICBhbmltYXRpb24tZGVsYXk6IDAuMjJzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoNClcbiAgLy8gICBhbmltYXRpb24tZGVsYXk6IDAuMTNzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoNSlcbiAgLy8gICBhbmltYXRpb24tZGVsYXk6IDAuMTRzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoNilcbiAgLy8gICBhbmltYXRpb24tZGVsYXk6IDAuMTVzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoNylcbiAgLy8gICBhbmltYXRpb24tZGVsYXk6IDAuMTZzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoOClcbiAgLy8gICBhbmltYXRpb24tZGVsYXk6IDAuMzdzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoOSlcbiAgLy8gICBhbmltYXRpb24tZGVsYXk6IDAuMThzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoMTApXG4gIC8vICAgYW5pbWF0aW9uLWRlbGF5OiAwLjE5c1xuXG4gIC8vIHBhdGg6bnRoLWNoaWxkKDExKVxuICAvLyAgIGFuaW1hdGlvbi1kZWxheTogMC4yMHNcblxuICAvLyBwYXRoOm50aC1jaGlsZCgxMilcbiAgLy8gICBhbmltYXRpb24tZGVsYXk6IDAuMjFzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoMTMpXG4gIC8vICAgYW5pbWF0aW9uLWRlbGF5OiAwLjEyc1xuXG4gIC8vIHBhdGg6bnRoLWNoaWxkKDE0KVxuICAvLyAgIGFuaW1hdGlvbi1kZWxheTogMC4yM3NcblxuICAvLyBwYXRoOm50aC1jaGlsZCgxNSlcbiAgLy8gICBhbmltYXRpb24tZGVsYXk6IDAuMzRzXG5cbiAgLy8gcGF0aDpudGgtY2hpbGQoMTYpXG4gIC8vICAgYW5pbWF0aW9uLWRlbGF5OiAwLjI1c1xuXG5cbi5uby1jc3NhbmltYXRpb25zIC5sb2dvX19nbG9iZVxuICBwYXRoXG4gICAgZmlsbDogJGdyZWVuXG4gICAgb3BhY2l0eTogMVxuXG4vLyBPdGhlciBjbGFzc2VzIGZvciBhbmltYWl0b24gbWF5YmVcbi8vIC5sb2dvX190ZXh0XG4vL1xuLy8gLmxvZ29fX2NvbW1lcmNlXG4vLyAgIHBhdGgsIHBvbHlnb25cbi8vXG4vL1xuLy8gLmxvZ29fX3RydXN0XG4vLyAgIHBhdGgsIHBvbHlnb25cbi8vXG4vL1xuLy8gLmxvZ29fX3RhZ2xpbmVcbi8vICAgcGF0aCwgcG9seWdvblxuIiwiLy8tIFRoaXMgY29udGFpbmVyIGhvbGQgdGhlIG1haW4gY29udGVudCBvbiBlYWNoIHBhZ2Vcbi8vLSBJdCBpcyBmb3VuZCBvbiBhbGwgaW50ZXJuYWwgcGFnZXNcblxuLy8tIEFsbCBcIk1haW5cIiBjbGFzc2VzIGhhdmUgc2hhcmUgdGhlc2UgcnVsZXNcbiVtYWluXG4gIGRpc3BsYXk6IHRhYmxlXG4gIHBhZGRpbmc6IDFyZW0gMnJlbVxuXG4ubWFpbi1zdGFuZGFyZFxuICBAZXh0ZW5kICVtYWluXG4gIHBhZGRpbmctYm90dG9tOiA1cmVtXG5cbiAgJl9fY29udGVudFxuXG4gICAgK21lZGlhKFwiPD10YWJsZXRcIilcbiAgICAgIHRleHQtYWxpZ246IGxlZnRcblxuICAmX190ZXh0XG5cbiAgICAqICsgKlxuICAgICAgbWFyZ2luLXRvcDogMXJlbVxuXG4gICAgaDJcbiAgICAgICtzdGFuZGFyZC1oZWFkaW5nKClcbiAgICAgICt2ZXJ0LXBhZGRpbmcoMSwwKVxuXG4gICAgLy8gRGVmYXVsdCB1bm9yZGVyZWQgbGlzdHMgaW4gY29udGVudCBhcmVhc1xuICAgIHVsXG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW1cbiAgICAgIGxpc3Qtc3R5bGU6IGRpc2NcblxuICAgICAgbGlcbiAgICAgICAgbWFyZ2luLXRvcDogMC41cmVtXG5cbiAgICAvLyBEZWZhdWx0IG9yZGVyZWQgbGlzdHMgaW4gY29udGVudCBhcmVhc1xuICAgIG9sXG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW1cbiAgICAgIC8vbGlzdC1zdHlsZS10eXBlOiB1cHBlci1yb21hblxuXG4gICAgLy8gS2VlcCBzbWFsbCBpbWFnZXMgZnJvbSBnZXR0aW5nIGdpYW50XG4gICAgaW1nXG4gICAgICB3aWR0aDogYXV0b1xuICAgICAgbWF4LXdpZHRoOjEwMCVcblxuXG4vLyBNYWluIGNvbnRlbnQgYmxvY2sgb24gTGVhZGVyc2hpcCBwYWdlXG4ubWFpbi1iaW9zXG4gIGRpc3BsYXk6IHRhYmxlXG4gIHBhZGRpbmc6IDJyZW1cblxuXG4vLyBNYWluIGNvbnRlbnQgYmxvY2sgb24gTmV3cyBwYWdlXG4ubWFpbi1uZXdzXG4gIEBleHRlbmQgJW1haW5cblxuLy9NYWluIGNvbnRlbnQgbG9jYXRpb25zIHRhYmxlXG4uY2l0eS1jb2x1bW5cbiAgd2lkdGg6MTM1cHhcbi5hZGRyZXNzLWNvbHVtblxuICB3aWR0aDozMzVweFxuLnBob25lLWNvbHVtblxuXG4ubG9jYXRpb24tcGhvbmUgXG4gIGNvbG9yOiRuaWdodGdyZWVuXG4gICY6aG92ZXJcbiAgICBjb2xvcjokZ3JlZW5cblxuXG4vLyBNYWluIGNvbnRlbnQgYmxvY2sgb24gQmxvZyBQb3N0IHBhZ2Vcbi5tYWluLXBvc3RcbiAgQGV4dGVuZCAlbWFpblxuXG4gICZfX3RleHRcblxuICAgICttZWRpYShcIjw9dGFibGV0XCIpXG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0XG5cbiAgICAqICsgKlxuICAgICAgbWFyZ2luLXRvcDogMXJlbVxuXG4gICAgaDJcbiAgICAgICtzdGFuZGFyZC1oZWFkaW5nKClcblxuICAgIGgzXG4gICAgICArbWlub3ItaGVhZGluZygpXG5cbiAgICBmaWdjYXB0aW9uXG4gICAgICBjb2xvcjogJGdyYXBoaXRlXG4gICAgICBmb250LXNpemU6IC43NXJlbVxuICAgICAgbWFyZ2luLXRvcDogMFxuXG4gICAgYmxvY2txdW90ZVxuICAgICAgK2Jsb2NrcXVvdGUoKVxuIiwiLmZvcm0tc3RhbmRhcmRcbiAgbWFyZ2luLXRvcDogMnJlbVxuXG4gIGlucHV0LFxuICBpbnB1dFt0eXBlPVwiZW1haWxcIl0sXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl0sXG4gIGlucHV0W3R5cGU9XCJwYXNzd29yZFwiXSxcbiAgaW5wdXRbdHlwZT1cInNlYXJjaFwiXSxcbiAgaW5wdXRbdHlwZT1cInRlbFwiXSxcbiAgaW5wdXRbdHlwZT1cInRleHRcIl0sXG4gIGlucHV0W3R5cGU9XCJ1cmxcIl0sXG4gIGlucHV0W3R5cGU9XCJjb2xvclwiXSxcbiAgaW5wdXRbdHlwZT1cImRhdGVcIl0sXG4gIGlucHV0W3R5cGU9XCJuYW1lXCJdLFxuICBpbnB1dFt0eXBlPVwiZGF0ZXRpbWVcIl0sXG4gIGlucHV0W3R5cGU9XCJkYXRldGltZS1sb2NhbFwiXSxcbiAgaW5wdXRbdHlwZT1cIm1vbnRoXCJdLFxuICBpbnB1dFt0eXBlPVwidGltZVwiXSxcbiAgaW5wdXRbdHlwZT1cIndlZWtcIl0sXG4gIHRleHRhcmVhXG4gIFx0Y29sb3I6ICRzaXRlLXRleHQtY29sb3JcbiAgXHRib3JkZXI6IDFweCBzb2xpZCAkYm9yZGVyQ29sb3JcbiAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveFxuICBcdGJvcmRlci1yYWRpdXM6IDBcbiAgICBmb250LXNpemU6IDFyZW1cbiAgXHRwYWRkaW5nOiAxcmVtXG4gIFx0ZGlzcGxheTogYmxvY2tcbiAgXHR3aWR0aDogMTAwJVxuXG5cbiAgbGFiZWxcbiAgICBkaXNwbGF5OiBibG9ja1xuXG4gIGlucHV0W3R5cGU9XCJidXR0b25cIl0sXG4gIGlucHV0W3R5cGU9XCJyZXNldFwiXSxcbiAgaW5wdXRbdHlwZT1cInN1Ym1pdFwiXVxuICAgIC8vIGFueSBkZWZhdWx0IGJ1dHRvbiBzdHlsZXMgdGhhdCBuZWVkIHRvIGJlIGRpZmZlcmVudCBvbiBmb3JtcyBnbyBoZXJlXG4gICAgZGlzcGxheTogYmxvY2tcblxuXG4gICZfX2NoZWNrYm94XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gICAgZmxvYXQ6IGxlZnQgIWltcG9ydGFudDtcbiAgICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xuXG4gICZfX2NoZWNrYm94ICsgbGFiZWxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcbiAgICBmbG9hdDogbGVmdCAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogMTBweCAxMHB4IDIwcHggMTBweCAhaW1wb3J0YW50O1xuXG4gIOKAmFxuICAuc2VsZWN0Ym94XG4gICAgYmFja2dyb3VuZDogJHdoaXRlXG4gICAgYm9yZGVyLXJhZGl1czogMFxuICAgIGN1cnNvcjogcG9pbnRlclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZVxuICAgIGhlaWdodDogNDhweFxuXG5cbiAgc2VsZWN0XG4gICAgYmFja2dyb3VuZDogJHdoaXRlXG4gICAgYm94LXNoYWRvdzogbm9uZVxuICAgIGJvcmRlci1yYWRpdXM6IDBcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkYm9yZGVyQ29sb3JcbiAgICBjb2xvcjogJHNpdGUtdGV4dC1jb2xvclxuICAgIGN1cnNvcjogcG9pbnRlclxuICAgIGRpc3BsYXk6IGJsb2NrXG4gICAgZm9udC1zaXplOiAxcmVtXG4gICAgaGVpZ2h0OiA0NXB4XG4gICAgcGFkZGluZzogMXJlbVxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZVxuICAgIHdpZHRoOiAxMDAlXG5cbi5jb250YWN0LXVzX19idXR0b25cbiAgYmFja2dyb3VuZC1jb2xvcjogJHNsYXRlXG4gIG1heC13aWR0aDoxODNweFxuICBjbGVhcjpib3RoO1xuIiwiLy9cblx0IF8gICAgICAgICAgICBfICAgICAgICAgICBfICAgICAgICAgICAgICAgICAgICAgICAgICAgXyBfXG5cdChfKSAgICAgICAgICB8IHwgICAgICAgICB8IHwgICAgICAgICAgICAgICAgICAgICAgICAgfCAoXylcblx0IF8gXyBfXyAgIF9fX3wgfF8gICBfICBfX3wgfCBfX18gICBfIF9fIF9fXyAgIF9fXyAgX198IHxfICBfXyBfXG5cdHwgfCAnXyBcXCAvIF9ffCB8IHwgfCB8LyBfYCB8LyBfIFxcIHwgJ18gYCBfIFxcIC8gXyBcXC8gX2AgfCB8LyBfYCB8XG5cdHwgfCB8IHwgfCAoX198IHwgfF98IHwgKF98IHwgIF9fLyB8IHwgfCB8IHwgfCAgX18vIChffCB8IHwgKF98IHxcblx0fF98X3wgfF98XFxfX198X3xcXF9fLF98XFxfXyxffFxcX19ffCB8X3wgfF98IHxffFxcX19ffFxcX18sX3xffFxcX18sX3xcblxuXHRTaW1wbGUsIGVsZWdhbnQgYW5kIG1haW50YWluYWJsZSBtZWRpYSBxdWVyaWVzIGluIFNhc3NcblxuXHRodHRwOi8vaW5jbHVkZS1tZWRpYS5jb21cblxuICBBdXRob3I6IEVkdWFyZG8gQm91Y2FzIDxtYWlsQGVkdWFyZG9ib3VjYXMuY29tPlxuXG5cbiAgQ3JlYXRlcyBhIGxpc3Qgb2YgZ2xvYmFsIGJyZWFrcG9pbnRzXG5cbiAgQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xuXG4gIEBleGFtcGxlIHNjc3MgLSBDcmVhdGVzIGEgc2luZ2xlIGJyZWFrcG9pbnQgd2l0aCB0aGUgbGFiZWwgYHBob25lYFxuICAkYnJlYWtwb2ludHM6ICgncGhvbmUnOiAzMjBweCk7XG5cbiRicmVha3BvaW50czogKFwicGhvbmVcIjogMzIwcHgsIFwidGFibGV0XCI6IDc2OHB4LCBcImRlc2t0b3BcIjogMTAyM3B4KSAhZGVmYXVsdFxuXG4vL1xuICBDcmVhdGVzIGEgbGlzdCBvZiBzdGF0aWMgZXhwcmVzc2lvbnMgb3IgbWVkaWEgdHlwZXNcblxuICBAYXV0aG9yIEVkdWFyZG8gQm91Y2FzXG5cbiAgQGV4YW1wbGUgc2NzcyAtIENyZWF0ZXMgYSBzaW5nbGUgbWVkaWEgdHlwZSAoc2NyZWVuKVxuICAgJG1lZGlhLWV4cHJlc3Npb25zOiAoJ3NjcmVlbic6ICdzY3JlZW4nKTtcblxuICBAZXhhbXBsZSBzY3NzIC0gQ3JlYXRlcyBhIHN0YXRpYyBleHByZXNzaW9uIHdpdGggbG9naWNhbCBkaXNqdW5jdGlvbiAoT1Igb3BlcmF0b3IpXG4gICAkbWVkaWEtZXhwcmVzc2lvbnM6IChcbiAgXHRcdCdyZXRpbmEyeCc6IChcbiAgXHRcdFx0Jygtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpJyxcbiAgXHRcdFx0JyhtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSdcbiAgXHRcdClcbiAgXHQpO1xuXG4kbWVkaWEtZXhwcmVzc2lvbnM6IChcInNjcmVlblwiOiBcInNjcmVlblwiLCBcInByaW50XCI6IFwicHJpbnRcIiwgXCJoYW5kaGVsZFwiOiBcImhhbmRoZWxkXCIsIFwicmV0aW5hMnhcIjogKFwiKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMilcIiwgXCIobWluLXJlc29sdXRpb246IDE5MmRwaSlcIiksIFwicmV0aW5hM3hcIjogKFwiKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMylcIiwgXCIobWluLXJlc29sdXRpb246IDM1MGRwaSlcIikpICFkZWZhdWx0XG5cbi8vXG4gIERlZmluZXMgYSBudW1iZXIgdG8gYmUgYWRkZWQgb3Igc3VidHJhY3RlZCBmcm9tIGVhY2ggdW5pdCB3aGVuIGRlY2xhcmluZyBicmVha3BvaW50cyB3aXRoIGV4Y2x1c2l2ZSBpbnRlcnZhbHNcblxuICBAYXV0aG9yIEVkdWFyZG8gQm91Y2FzXG5cbiAgQGV4YW1wbGUgc2NzcyAtIEludGVydmFsIGZvciBwaXhlbHMgaXMgZGVmaW5lZCBhcyBgMWAgYnkgZGVmYXVsdFxuICAgQGluY2x1ZGUgbWVkaWEoXCI+MTI4cHhcIikge31cblxuICBHZW5lcmF0ZXM6XG4gIEBtZWRpYSAobWluLXdpZHRoOiAxMjlweCkge31cblxuICBAZXhhbXBsZSBzY3NzIC0gSW50ZXJ2YWwgZm9yIGVtcyBpcyBkZWZpbmVkIGFzIGAwLjAxYCBieSBkZWZhdWx0XG4gICBAaW5jbHVkZSBtZWRpYShcIj4yMGVtXCIpIHt9XG5cbiAgR2VuZXJhdGVzOlxuICBAbWVkaWEgKG1pbi13aWR0aDogMjAuMDFlbSkge31cblxuICBAZXhhbXBsZSBzY3NzIC0gSW50ZXJ2YWwgZm9yIHJlbXMgaXMgZGVmaW5lZCBhcyBgMC4xYCBieSBkZWZhdWx0LCB0byBiZSB1c2VkIHdpdGggYGZvbnQtc2l6ZTogNjIuNSU7YFxuICAgQGluY2x1ZGUgbWVkaWEoXCI+Mi4wcmVtXCIpIHt9XG5cbiAgR2VuZXJhdGVzOlxuICBAbWVkaWEgKG1pbi13aWR0aDogMi4xcmVtKSB7fVxuXG4kdW5pdC1pbnRlcnZhbHM6IChcInB4XCI6IDEsIFwiZW1cIjogMC4wMSwgXCJyZW1cIjogMC4xKSAhZGVmYXVsdFxuXG4vL1xuICBHZW5lcmF0ZXMgYSBtZWRpYSBxdWVyeSBiYXNlZCBvbiBhIGxpc3Qgb2YgY29uZGl0aW9uc1xuXG4gIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcblxuICBAcGFyYW0ge0xpc3R9ICAgJGNvbmRpdGlvbnMgIC0gTWVkaWEgcXVlcnkgY29uZGl0aW9uc1xuXG4gIEBleGFtcGxlIHNjc3MgLSBXaXRoIGEgc2luZ2xlIHNldCBicmVha3BvaW50XG4gICBAaW5jbHVkZSBtZWRpYShcIj5waG9uZVwiKSB7IH1cblxuICBAZXhhbXBsZSBzY3NzIC0gV2l0aCB0d28gc2V0IGJyZWFrcG9pbnRzXG4gICBAaW5jbHVkZSBtZWRpYShcIj5waG9uZVwiLCBcIjw9dGFibGV0XCIpIHsgfVxuXG4gIEBleGFtcGxlIHNjc3MgLSBXaXRoIGN1c3RvbSB2YWx1ZXNcbiAgIEBpbmNsdWRlIG1lZGlhKFwiPj0zNThweFwiLCBcIjw4NTBweFwiKSB7IH1cblxuICBAZXhhbXBsZSBzY3NzIC0gV2l0aCBzZXQgYnJlYWtwb2ludHMgd2l0aCBjdXN0b20gdmFsdWVzXG4gICBAaW5jbHVkZSBtZWRpYShcIj5kZXNrdG9wXCIsIFwiPD0xMzUwcHhcIikgeyB9XG5cbiAgQGV4YW1wbGUgc2NzcyAtIFdpdGggYSBzdGF0aWMgZXhwcmVzc2lvblxuICAgQGluY2x1ZGUgbWVkaWEoXCJyZXRpbmEyeFwiKSB7IH1cblxuICBAZXhhbXBsZSBzY3NzIC0gTWl4aW5nIGV2ZXJ5dGhpbmdcbiAgIEBpbmNsdWRlIG1lZGlhKFwiPj0zNTBweFwiLCBcIjx0YWJsZXRcIiwgXCJyZXRpbmEzeFwiKSB7IH1cblxuXG49bWVkaWEoJGNvbmRpdGlvbnMuLi4pXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRjb25kaXRpb25zKVxuICAgICRjb25kaXRpb25zOiBzZXQtbnRoKCRjb25kaXRpb25zLCAkaSwgcGFyc2UtZXhwcmVzc2lvbihudGgoJGNvbmRpdGlvbnMsICRpKSkpXG4gICRicmFuY2hlczogZ2V0LXF1ZXJ5LWJyYW5jaGVzKCRjb25kaXRpb25zKVxuICAkcXVlcnk6IFwiXCJcbiAgQGVhY2ggJGJyYW5jaCBpbiAkYnJhbmNoZXNcbiAgICBAaWYgc3RyLWxlbmd0aCgkcXVlcnkpICE9IDBcbiAgICAgICRxdWVyeTogJHF1ZXJ5ICsgXCIsIFwiXG4gICAgJHF1ZXJ5OiAkcXVlcnkgKyAkYnJhbmNoXG4gIEBtZWRpYSAjeyRxdWVyeX1cbiAgICBAY29udGVudFxuXG4vL1xuICBSZWFkcyBhIGxpc3Qgb2YgbWVkaWEgcXVlcnkgZXhwcmVzc2lvbnMgYW5kIHNlcGFyYXRlcyBsb2dpY2FsIGRpc2p1bmN0aW9ucyBpbnRvIGRpZmZlcmVudCBicmFuY2hlc1xuXG4gIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbiAgQHBhcmFtIHtMaXN0fSAgICRleHByZXNzaW9ucyAgLSBsaXN0IG9mIGV4cHJlc3Npb25zXG4gIEB0aHJvd3MgYCRleHByZXNzaW9uYCBpcyBub3QgYSB2YWxpZCBleHByZXNzaW9uXG5cbiAgQHJldHVybiB7TGlzdCB8IE51bGx9XG5cblxuQGZ1bmN0aW9uIGdldC1xdWVyeS1icmFuY2hlcygkZXhwcmVzc2lvbnMpXG4gICRyZXN1bHQ6IFwiXCJcbiAgJGhhcy1ncm91cHM6IGZhbHNlXG4gIC8vIEdldHRpbmcgaW5pdGlhbCBzbmFwc2hvdCBhbmQgbG9va2luZyBmb3IgZ3JvdXBzXG4gIEBlYWNoICRleHByZXNzaW9uIGluICRleHByZXNzaW9uc1xuICAgIEBpZiBzdHItbGVuZ3RoKCRyZXN1bHQpICE9IDBcbiAgICAgICRyZXN1bHQ6ICRyZXN1bHQgKyBcIiBhbmQgXCJcbiAgICBAaWYgdHlwZS1vZigkZXhwcmVzc2lvbikgPT0gXCJzdHJpbmdcIlxuICAgICAgJHJlc3VsdDogJHJlc3VsdCArICRleHByZXNzaW9uXG4gICAgQGVsc2UgaWYgdHlwZS1vZigkZXhwcmVzc2lvbikgPT0gXCJsaXN0XCJcbiAgICAgICRyZXN1bHQ6ICRyZXN1bHQgKyBudGgoJGV4cHJlc3Npb24sIDEpXG4gICAgICAkaGFzLWdyb3VwczogdHJ1ZVxuICAgIEBlbHNlXG4gICAgICBAd2FybiBcIiN7JGV4cHJlc3Npb259IGlzIG5vdCBhIHZhbGlkIGV4cHJlc3Npb24uXCJcbiAgLy8gSWYgd2UgaGF2ZSBncm91cHMsIHdlIGhhdmUgdG8gY3JlYXRlIGFsbCBwb3NzaWJsZSBjb21iaW5hdGlvbnNcbiAgQGlmICRoYXMtZ3JvdXBzXG4gICAgQGVhY2ggJGV4cHJlc3Npb24gaW4gJGV4cHJlc3Npb25zXG4gICAgICBAaWYgdHlwZS1vZigkZXhwcmVzc2lvbikgPT0gXCJsaXN0XCJcbiAgICAgICAgJGZpcnN0OiBudGgoJGV4cHJlc3Npb24sIDEpXG4gICAgICAgIEBlYWNoICRtZW1iZXIgaW4gJGV4cHJlc3Npb25cbiAgICAgICAgICBAaWYgJG1lbWJlciAhPSAkZmlyc3RcbiAgICAgICAgICAgIEBlYWNoICRwYXJ0aWFsIGluICRyZXN1bHRcbiAgICAgICAgICAgICAgJHJlc3VsdDogam9pbigkcmVzdWx0LCBzdHItcmVwbGFjZS1maXJzdCgkZmlyc3QsICRtZW1iZXIsICRwYXJ0aWFsKSlcbiAgQHJldHVybiAkcmVzdWx0XG5cbi8vXG4gIFBhcnNlcyBhIHN0cmluZyB0byBmb3JtIGEgbWVkaWEgcXVlcnkgZXhwcmVzc2lvblxuXG4gIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcblxuICBAcGFyYW0ge1N0cmluZ30gICAkZXhwcmVzc2lvbiAgLSBleHByZXNzaW9uIChpbiBzdHJpbmcpXG4gIEB0aHJvd3MgRXhwcmVzc2lvbiB3aXRoIHR5cGUgYHR5cGUtb2YoJGV4cHJlc3Npb24pYCBkZXRlY3RlZCwgc3RyaW5nIGV4cGVjdGVkXG4gIEB0aHJvd3MgYCRleHByZXNzaW9uYCBpcyBtaXNzaW5nIGFuIG9wZXJhdG9yXG4gIEB0aHJvd3MgVW5rbm93biB1bml0OiBgJHVuaXRgXG5cbiAgQHJldHVybiB7U3RyaW5nIHwgTnVsbH1cblxuXG5AZnVuY3Rpb24gcGFyc2UtZXhwcmVzc2lvbigkZXhwcmVzc2lvbilcbiAgJG9wZXJhdG9yOiBcIlwiXG4gICR2YWx1ZTogXCJcIlxuICAkZWxlbWVudDogXCJcIlxuICAkcmVzdWx0OiBcIlwiXG4gICRpcy13aWR0aDogdHJ1ZVxuICBAaWYgdHlwZS1vZigkZXhwcmVzc2lvbikgIT0gXCJzdHJpbmdcIlxuICAgIEB3YXJuIFwiRXhwcmVzc2lvbiB3aXRoIHR5cGUgYCN7dHlwZS1vZigkZXhwcmVzc2lvbil9YCBkZXRlY3RlZCwgc3RyaW5nIGV4cGVjdGVkLlwiXG4gIC8vIFNlcGFyYXRpbmcgdGhlIG9wZXJhdG9yIGZyb20gdGhlIHJlc3Qgb2YgdGhlIGV4cHJlc3Npb25cbiAgQGlmIHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgMiwgMikgPT0gXCI9XCJcbiAgICAkb3BlcmF0b3I6IHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgMSwgMilcbiAgICAkdmFsdWU6IHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgMylcbiAgQGVsc2VcbiAgICAkb3BlcmF0b3I6IHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgMSwgMSlcbiAgICAkdmFsdWU6IHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgMilcbiAgLy8gQ2hlY2tpbmcgd2hhdCB0eXBlIG9mIGV4cHJlc3Npb24gd2VyZSBkZWFsaW5nIHdpdGhcbiAgQGlmIG1hcC1oYXMta2V5KCRicmVha3BvaW50cywgJHZhbHVlKVxuICAgICRyZXN1bHQ6IG1hcC1nZXQoJGJyZWFrcG9pbnRzLCAkdmFsdWUpXG4gIEBlbHNlIGlmIG1hcC1oYXMta2V5KCRtZWRpYS1leHByZXNzaW9ucywgJGV4cHJlc3Npb24pXG4gICAgJHJlc3VsdDogbWFwLWdldCgkbWVkaWEtZXhwcmVzc2lvbnMsICRleHByZXNzaW9uKVxuICAgICRpcy13aWR0aDogZmFsc2VcbiAgQGVsc2VcbiAgICAkcmVzdWx0OiB0by1udW1iZXIoJHZhbHVlKVxuICBAaWYgJGlzLXdpZHRoXG4gICAgJHVuaXQ6IHVuaXQoJHJlc3VsdClcbiAgICAkaW50ZXJ2YWw6IDBcbiAgICBAaWYgbWFwLWhhcy1rZXkoJHVuaXQtaW50ZXJ2YWxzLCAkdW5pdClcbiAgICAgICRpbnRlcnZhbDogbWFwLWdldCgkdW5pdC1pbnRlcnZhbHMsICR1bml0KVxuICAgIEBlbHNlXG4gICAgICBAd2FybiBcIlVua25vd24gdW5pdDogI3skdW5pdH1cIlxuICAgIEBpZiAkb3BlcmF0b3IgPT0gXCI+XCJcbiAgICAgICRlbGVtZW50OiBcIihtaW4td2lkdGg6ICN7JHJlc3VsdCArICRpbnRlcnZhbH0pXCJcbiAgICBAZWxzZSBpZiAkb3BlcmF0b3IgPT0gXCI8XCJcbiAgICAgICRlbGVtZW50OiBcIihtYXgtd2lkdGg6ICN7JHJlc3VsdCAtICRpbnRlcnZhbH0pXCJcbiAgICBAZWxzZSBpZiAkb3BlcmF0b3IgPT0gXCI+PVwiXG4gICAgICAkZWxlbWVudDogXCIobWluLXdpZHRoOiAjeyRyZXN1bHR9KVwiXG4gICAgQGVsc2UgaWYgJG9wZXJhdG9yID09IFwiPD1cIlxuICAgICAgJGVsZW1lbnQ6IFwiKG1heC13aWR0aDogI3skcmVzdWx0fSlcIlxuICAgIEBlbHNlXG4gICAgICBAd2FybiBcIiN7JGV4cHJlc3Npb259IGlzIG1pc3NpbmcgYW4gb3BlcmF0b3IuXCJcbiAgQGVsc2VcbiAgICAkZWxlbWVudDogJHJlc3VsdFxuICBAcmV0dXJuICRlbGVtZW50XG5cbi8vXG4gIFJlcGxhY2VzIHRoZSBmaXJzdCBvY2N1cmVuY2Ugb2YgdGhlIHN0cmluZyB3aXRoIHRoZSByZXBsYWNlbWVudCBzdHJpbmdcblxuICBAYXV0aG9yIEVkdWFyZG8gQm91Y2FzXG5cbiAgQHBhcmFtIHtTdHJpbmd9ICAgJHNlYXJjaCAgLSBUaGUgdmFsdWUgYmVpbmcgc2VhcmNoZWQgZm9yXG4gIEBwYXJhbSB7U3RyaW5nfSAgICRyZXBsYWNlICAtIFRoZSByZXBsYWNlbWVudCBzdHJpbmdcbiAgQHBhcmFtIHtTdHJpbmd9ICAgJHN1YmplY3QgIC0gVGhlIHN0cmluZyBiZWluZyByZXBsYWNlZCBvblxuXG4gIEByZXR1cm4ge1N0cmluZyB8IE51bGx9XG5cblxuQGZ1bmN0aW9uIHN0ci1yZXBsYWNlLWZpcnN0KCRzZWFyY2gsICRyZXBsYWNlLCAkc3ViamVjdClcbiAgJHNlYXJjaC1zdGFydDogc3RyLWluZGV4KCRzdWJqZWN0LCAkc2VhcmNoKVxuICBAaWYgJHNlYXJjaC1zdGFydCA9PSBudWxsXG4gICAgQHJldHVybiAkc3ViamVjdFxuICAkcmVzdWx0OiBzdHItc2xpY2UoJHN1YmplY3QsIDAsICRzZWFyY2gtc3RhcnQgLSAxKVxuICAkcmVzdWx0OiAkcmVzdWx0ICsgJHJlcGxhY2VcbiAgJHJlc3VsdDogJHJlc3VsdCArIHN0ci1zbGljZSgkc3ViamVjdCwgJHNlYXJjaC1zdGFydCArIHN0ci1sZW5ndGgoJHNlYXJjaCkpXG4gIEByZXR1cm4gJHJlc3VsdFxuXG4vL1xuICBDYXN0cyBhIG51bWJlciB0byBhIHN0cmluZ1xuXG4gIEBhdXRob3IgSHVnbyBHaXJhdWRlbFxuXG4gIEBwYXJhbSB7U3RyaW5nfSAgICRzdHJpbmcgIC0gTnVtYmVyIHRvIGJlIHBhcnNlZFxuXG4gIEByZXR1cm4ge0xpc3QgfCBOdWxsfVxuXG5AZnVuY3Rpb24gdG8tbnVtYmVyKCRzdHJpbmcpXG4gIC8vIE1hdHJpY2VzXG4gICRzdHJpbmdzOiBcIjBcIiBcIjFcIiBcIjJcIiBcIjNcIiBcIjRcIiBcIjVcIiBcIjZcIiBcIjdcIiBcIjhcIiBcIjlcIlxuICAkbnVtYmVyczogMCAxIDIgMyA0IDUgNiA3IDggOVxuICAvLyBSZXN1bHRcbiAgJHJlc3VsdDogMFxuICAkZGl2aWRlcjogMFxuICAkbWludXM6IGZhbHNlXG4gIC8vIExvb3BpbmcgdGhyb3VnaCBhbGwgY2hhcmFjdGVyc1xuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIHN0ci1sZW5ndGgoJHN0cmluZylcbiAgICAkY2hhcmFjdGVyOiBzdHItc2xpY2UoJHN0cmluZywgJGksICRpKVxuICAgICRpbmRleDogaW5kZXgoJHN0cmluZ3MsICRjaGFyYWN0ZXIpXG4gICAgQGlmICRjaGFyYWN0ZXIgPT0gXCItXCJcbiAgICAgICRtaW51czogdHJ1ZVxuICAgIEBlbHNlIGlmICRjaGFyYWN0ZXIgPT0gXCIuXCJcbiAgICAgICRkaXZpZGVyOiAxXG4gICAgQGVsc2VcbiAgICAgIEBpZiB0eXBlLW9mKCRpbmRleCkgIT0gXCJudW1iZXJcIlxuICAgICAgICAkcmVzdWx0OiBpZigkbWludXMsICRyZXN1bHQgKiAtMSwgJHJlc3VsdClcbiAgICAgICAgQHJldHVybiBfbGVuZ3RoKCRyZXN1bHQsIHN0ci1zbGljZSgkc3RyaW5nLCAkaSkpXG4gICAgICAkbnVtYmVyOiBudGgoJG51bWJlcnMsICRpbmRleClcbiAgICAgIEBpZiAkZGl2aWRlciA9PSAwXG4gICAgICAgICRyZXN1bHQ6ICRyZXN1bHQgKiAxMFxuICAgICAgQGVsc2VcbiAgICAgICAgLy8gTW92ZSB0aGUgZGVjaW1hbCBkb3QgdG8gdGhlIGxlZnRcbiAgICAgICAgJGRpdmlkZXI6ICRkaXZpZGVyICogMTBcbiAgICAgICAgJG51bWJlcjogJG51bWJlciAvICRkaXZpZGVyXG4gICAgICAkcmVzdWx0OiAkcmVzdWx0ICsgJG51bWJlclxuICBAcmV0dXJuIGlmKCRtaW51cywgJHJlc3VsdCAqIC0xLCAkcmVzdWx0KVxuXG5AZnVuY3Rpb24gX2xlbmd0aCgkbnVtYmVyLCAkdW5pdClcbiAgJHN0cmluZ3M6IFwicHhcIiBcImNtXCIgXCJtbVwiIFwiJVwiIFwiY2hcIiBcInBpY2FcIiBcImluXCIgXCJlbVwiIFwicmVtXCIgXCJwdFwiIFwicGNcIiBcImV4XCIgXCJ2d1wiIFwidmhcIiBcInZtaW5cIiBcInZtYXhcIlxuICAkdW5pdHM6IDFweCAxY20gMW1tIDElIDFjaCAxcGljYSAxaW4gMWVtIDFyZW0gMXB0IDFwYyAxZXggMXZ3IDF2aCAxdm1pbiAxdm1heFxuICAkaW5kZXg6IGluZGV4KCRzdHJpbmdzLCAkdW5pdClcbiAgQGlmIHR5cGUtb2YoJGluZGV4KSAhPSBcIm51bWJlclwiXG4gICAgQHdhcm4gXCJVbmtub3duIHVuaXQgYCN7JHVuaXR9YC5cIlxuICAgIEByZXR1cm4gZmFsc2VcbiAgQHJldHVybiAkbnVtYmVyICogbnRoKCR1bml0cywgJGluZGV4KVxuIl19 */