article, aside, details, figcaption, figure, footer, header, hgroup, nav, section, summary {
  display: block; }

audio, canvas, video {
  display: inline-block; }

audio:not([controls]) {
  display: none;
  height: 0; }

[hidden], template {
  display: none; }

html {
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%; }

body {
  margin: 0; }

a {
  background: transparent; }
  a:hover, a:active {
    outline: 0; }

/* @if \$normalize_headings == true {
    h1 {
        font-size: \$h1_font_size;
        margin: \$h1_margin;
    }

    h2 {
        font-size: \$h2_font_size;
        margin: \$h2_margin;
    }

    h3 {
        font-size: \$h3_font_size;
        margin: \$h3_margin;
    }

    h4 {
        font-size: \$h4_font_size;
        margin: \$h4_margin;
    }

    h5 {
        font-size: \$h5_font_size;
        margin: \$h5_margin;
    }

    h6 {
        font-size: \$h6_font_size;
        margin: \$h6_margin;
    }
} */
abbr[title] {
  border-bottom: 1px dotted; }

b, strong {
  font-weight: bold; }

dfn {
  font-style: italic; }

mark {
  background: #ff0;
  color: #000; }

code, kbd, pre, samp {
  font-family: monospace, serif;
  font-size: 1em; }

pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word; }

q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

q:before, q:after {
  content: '';
  content: none; }

/* /small {
    font-size: 80%;
} */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

img {
  border: 0; }

svg:not(:root) {
  overflow: hidden; }

figure {
  margin: 0; }

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

legend {
  border: 0;
  padding: 0;
  white-space: normal; }

button, input, select, textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
  vertical-align: baseline; }

button, input {
  line-height: normal; }

button, select {
  text-transform: none; }

button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer; }

button[disabled], input[disabled] {
  cursor: default; }

button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

textarea {
  overflow: auto;
  vertical-align: top; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

input[type="search"] {
  -webkit-appearance: textfield;
  -moz-box-sizing: content-box;
  box-sizing: content-box; }
  input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }
input[type="checkbox"], input[type="radio"] {
  -moz-box-sizing: border-box;
       box-sizing: border-box;
  padding: 0; }

html {
  -moz-box-sizing: border-box;
       box-sizing: border-box;
  font-size: 20px;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased; }

*, *:before, *:after {
  -moz-box-sizing: inherit;
       box-sizing: inherit; }

body {
  color: #333;
  line-height: 1.5;
  font-family: News Cycle, sans-serif;
  -moz-background-size: auto 30px;
       background-size: auto 30px;
  margin: 0; }

.clearfix:after {
  content: "";
  display: table;
  clear: both; }

img, iframe, embed {
  width: 100%; }

.container {
  background-color: #fff;
  border-left: 1px solid #ccc;
  border-right: 1px solid #ccc;
  margin: 0 auto;
  max-width: 1200px; }

.col-2-12 {
  width: 16.66667%; }

.col-3-12 {
  width: 25%; }

.col-4-12 {
  width: 33.33333%; }

.col-5-12 {
  width: 41.66667%; }

.col-6-12 {
  width: 50%; }

.col-7-12 {
  width: 58.33333%; }

.col-8-12 {
  width: 66.66667%; }

* {
  margin: 0;
  padding: 0; }

body {
  background-color: #edeeeb;
  padding: 0; }

a {
  text-decoration: none; }

[class*=__button], input[type="button"], input[type="reset"], input[type="submit"] {
  border: 2px solid #267e64;
  display: inline-block;
  font-family: Playfair Display, serif;
  font-size: 24px;
  font-size: 1.2rem;
  font-style: italic;
  text-align: center;
  padding: 10px 20px;
  padding: .5rem 1rem;
  text-decoration: none;
  /*Items for transition */
  background-color: transparent;
  color: #267e64;
  /*Transition settings */
  -webkit-transition: all .2s ease;
     -moz-transition: all .2s ease;
       -o-transition: all .2s ease;
          transition: all .2s ease; }
  [class*=__button]:hover, input[type="button"]:hover, input[type="reset"]:hover, input[type="submit"]:hover {
    /*These will transition on hover */
    background-color: #267e64;
    color: #fff; }

table {
  margin: 0 0 1.5em;
  width: 100%; }

tr {
  border-bottom: 1px solid #e5e6e7; }
  tr:nth-child(even) {
    background-color: #f8f8f8; }

td {
  vertical-align: top;
  padding: 10px 5px; }

thead {
  background-color: #e5e6e7; }
  thead th {
    font-weight: 600;
    text-align: left;
    padding: 5px; }

.nav-minor {
  display: none; }
  .nav-minor li {
    display: inline-block; }
    .nav-minor li:after {
      display: inline-block;
      content: '|';
      color: #267e64;
      margin: 0 2px; }
    .nav-minor li:last-child:after {
      display: none; }
  .nav-minor__link {
    color: #333;
    display: inline-block;
    font-size: 16px; }
    .nav-minor__link:hover {
      color: #267e64; }

.nav-major {
  display: none; }
  .nav-major li {
    text-align: center;
    position: relative; }
    .nav-major li a {
      color: #333;
      font-family: Playfair Display, serif;
      font-size: 22px;
      font-size: 1.1rem;
      display: block;
      padding: 10px 0;
      padding: .5rem 0; }
      .nav-major li a:hover {
        background-color: #fff;
        color: #267e64; }
    .nav-major li ul {
      display: none;
      width: 100%;
      position: absolute;
      list-style-type: none; }
    .nav-major li:hover > ul {
      background-color: #fff;
      display: block; }

#mobile-menu {
  display: none !important; }

a.meanmenu-reveal {
  display: none; }

.mean-container .mean-bar {
  width: 100%;
  padding: 4px 0;
  min-height: 42px;
  z-index: 999999;
  position: absolute; }

.mean-container a.meanmenu-reveal {
  width: 22px;
  height: 22px;
  padding: 13px 13px 11px 13px;
  position: absolute;
  top: 0;
  right: 0;
  cursor: pointer;
  color: #267e64;
  text-decoration: none;
  font-size: 18px;
  text-indent: -9999em;
  line-height: 22px;
  font-size: 1px;
  display: block;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: 700; }

.mean-container a.meanmenu-reveal span {
  display: block;
  background: #267e64;
  height: 3px;
  margin-top: 3px; }

.mean-container .mean-nav {
  float: left;
  width: 100%;
  background: #fff;
  margin-top: 44px; }

.mean-container .mean-nav ul {
  padding: 0;
  margin: 0;
  width: 100%;
  list-style-type: none; }

.mean-container .mean-nav ul li {
  position: relative;
  float: left;
  width: 100%; }

.mean-container .mean-nav ul li a {
  display: block;
  float: left;
  width: 90%;
  padding: 0.75em 5%;
  font-size: 0.85em;
  margin: 0;
  text-align: left;
  color: #333;
  border-top: solid 1px #e5e6e7;
  text-decoration: none;
  font-family: Playfair Display, serif; }
  .mean-container .mean-nav ul li a:active {
    color: #267e64; }
  .mean-container .mean-nav ul li a.mean-clicked {
    border: 1px solid red;
    background: #267e64 !important;
    color: #fff; }

.mean-container .mean-nav ul li li a {
  width: 80%;
  padding: 1em 10%;
  border-top: solid 1px #e5e6e7;
  text-shadow: none !important;
  visibility: visible; }

.mean-container .mean-nav ul li.mean-last a {
  border-bottom: solid 1px #e5e6e7;
  margin-bottom: 0; }

.mean-container .mean-nav ul li li li a {
  width: 70%;
  padding: 1em 15%; }

.mean-container .mean-nav ul li li li li a {
  width: 60%;
  padding: 1em 20%; }

.mean-container .mean-nav ul li li li li li a {
  width: 50%;
  padding: 1em 25%; }

.mean-container .mean-nav ul li a:hover {
  background: #252525;
  background: rgba(255, 255, 255, 0.1); }

.mean-container .mean-nav ul li a.mean-expand {
  margin-top: 1px;
  width: 26px;
  height: 28px;
  padding: 10px !important;
  text-align: center;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 2;
  font-weight: 700;
  background: #fff;
  border: 1px solid #267e64; }

.mean-container .mean-nav ul li a.mean-expand:hover {
  background: #267e64;
  color: #fff; }

.mean-container .mean-push {
  float: left;
  width: 100%;
  padding: 0;
  margin: 0;
  clear: both; }

.mean-nav .wrapper {
  width: 100%;
  padding: 0;
  margin: 0; }

.mean-container .mean-bar, .mean-container .mean-bar * {
  -moz-box-sizing: content-box;
  box-sizing: content-box; }

.mean-remove {
  display: none !important; }

.banner-tall {
  background-image: url(images/boat.jpg);
  background-position: center;
  -moz-background-size: cover;
       background-size: cover;
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  height: 200px; }
  .banner-tall__title {
    -webkit-align-self: center;
        -ms-flex-item-align: center;
            align-self: center;
    color: #fff;
    font-family: serif;
    font-size: 40px;
    font-size: 2rem;
    font-weight: 400;
    line-height: 1;
    margin: 0 0 20px 20px;
    margin: 0 0 1rem 1rem;
    text-shadow: 2px 2px 2px #333; }

.banner-standard {
  background: #267e64;
  color: #fff;
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: row wrap;
      -ms-flex-flow: row wrap;
          flex-flow: row wrap;
  -webkit-justify-content: space-around;
      -ms-flex-pack: distribute;
          justify-content: space-around;
  -webkit-box-align: stretch;
  -webkit-align-items: stretch;
     -moz-box-align: stretch;
      -ms-flex-align: stretch;
          align-items: stretch; }
  .banner-standard__box {
    padding: 20px 40px;
    padding: 1rem 2rem; }
  .banner-standard__title {
    font-family: Playfair Display, serif;
    font-size: 40px;
    font-size: 2rem;
    font-weight: 400; }
  .banner-standard__media {
    background-color: #edeeeb; }
  .banner-standard__media-approach {
    background-image: url(../images/meeting.jpg);
    background-position: center;
    -moz-background-size: cover;
         background-size: cover; }
  .banner-standard__media-leadership {
    background-image: url(../images/people.jpg);
    background-position: center;
    -moz-background-size: cover;
         background-size: cover; }

.banner-panorama {
  background-image: url(../images/trees.jpg);
  background-position: center;
  -moz-background-size: cover;
       background-size: cover;
  height: 255px; }

.card-diptic {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  border-top: 1px solid #ccc;
  border-bottom: 1px solid #ccc; }
  .card-diptic__box {
    padding: 40px 20px;
    padding: 2rem 1rem; }
  .card-diptic__title {
    color: #267e64;
    font-family: Playfair Display, serif;
    font-size: 40px;
    font-size: 2rem;
    font-weight: 400;
    line-height: 1;
    text-align: center; }
  .card-diptic__media {
    background-color: #267e64;
    height: 150px; }
  .card-diptic__text {
    text-align: center; }
  .card-diptic ul {
    text-align: center; }
    .card-diptic ul li {
      display: inline-block;
      list-style: none; }
  .card-diptic__link {
    display: block; }

.card-bio {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  padding-bottom: 40px;
  padding-bottom: 2rem; }
  .card-bio__media {
    background-color: #267e64;
    height: 355px; }
  .card-bio__box {
    -webkit-box-flex: 4;
    -webkit-flex: 4;
       -moz-box-flex: 4;
        -ms-flex: 4;
            flex: 4;
    padding-top: 20px;
    padding-top: 1rem; }
  .card-bio__title {
    color: #267e64;
    font-family: Playfair Display, serif;
    font-size: 40px;
    font-size: 2rem;
    font-weight: 400;
    line-height: 1; }
  .card-bio__subtitle {
    color: #ccc; }
  .card-bio__text * + * {
    margin-top: 20px;
    margin-top: 1rem; }

.card-article__box {
  -moz-box-shadow: 0 1px 0 #267e64;
       box-shadow: 0 1px 0 #267e64;
  padding-top: 30px;
  padding-bottom: 30px; }
  .card-article__box * + * {
    margin-top: 20px;
    margin-top: 1rem; }
.card-article h2 {
  color: #267e64;
  font-family: Playfair Display, serif;
  font-size: 40px;
  font-size: 2rem;
  font-weight: 400;
  line-height: 1; }
.card-article small {
  color: #ccc;
  font-size: 15px;
  font-size: .75rem; }

.cta-contact {
  background-color: #edeeeb;
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
     -moz-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
     -moz-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center; }
  .cta-contact__box {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    padding: 20px 40px;
    padding: 1rem 2rem; }
  .cta-contact__text {
    -webkit-box-flex: 4;
    -webkit-flex: 4;
       -moz-box-flex: 4;
        -ms-flex: 4;
            flex: 4;
    margin: 0; }
  .cta-contact__button {
    -webkit-box-flex: 1;
    -webkit-flex: 1;
       -moz-box-flex: 1;
        -ms-flex: 1;
            flex: 1; }

.cta-teaser {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: row wrap;
      -ms-flex-flow: row wrap;
          flex-flow: row wrap;
  -webkit-justify-content: space-around;
      -ms-flex-pack: distribute;
          justify-content: space-around;
  -webkit-box-align: stretch;
  -webkit-align-items: stretch;
     -moz-box-align: stretch;
      -ms-flex-align: stretch;
          align-items: stretch; }
  .cta-teaser__box {
    padding: 20px 40px;
    padding: 1rem 2rem; }
  .cta-teaser__title {
    color: #267e64;
    font-family: Playfair Display, serif;
    font-size: 40px;
    font-size: 2rem;
    font-weight: 400;
    line-height: 1; }
  .cta-teaser__button {
    display: inline-block;
    margin-top: 20px;
    margin-top: 1rem; }
  .cta-teaser__media {
    background-image: url(../images/meeting.jpg);
    background-position: center;
    -moz-background-size: cover;
         background-size: cover; }

.cta-center {
  padding: 40px;
  padding: 2rem;
  text-align: center; }
  .cta-center__title {
    color: #267e64;
    font-family: Playfair Display, serif;
    font-size: 40px;
    font-size: 2rem;
    font-weight: 400;
    line-height: 1; }
  .cta-center__button {
    margin-top: 20px;
    margin-top: 1rem; }

.cta-subscribe {
  background-color: #267e64;
  color: #fff;
  padding-top: 30px;
  padding-bottom: 30px; }
  .cta-subscribe__title {
    font-family: Playfair Display, serif;
    margin: 0;
    text-align: center; }
  .cta-subscribe__box {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: center;
    -webkit-justify-content: center;
       -moz-box-pack: center;
        -ms-flex-pack: center;
            justify-content: center; }
  .cta-subscribe__input-add-on {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    width: 66.66667%; }
  .cta-subscribe__input {
    -webkit-box-flex: 1;
    -webkit-flex: 1;
       -moz-box-flex: 1;
        -ms-flex: 1;
            flex: 1; }
  .cta-subscribe__button {
    margin-left: 10px;
    color: #fff !important;
    border: 2px solid #fff !important; }
.cta-sidebar__media {
  background-color: #267e64; }
.cta-sidebar__title {
  color: #267e64;
  font-family: Playfair Display, serif;
  font-size: 25px;
  font-size: 1.25rem;
  font-weight: 400;
  margin-top: 15px;
  margin-bottom: 15px; }
.cta-sidebar__button {
  margin-top: 20px;
  margin-top: 1rem; }

.cta-social {
  padding-left: 20px;
  padding-left: 1rem; }
  .cta-social .icon {
    fill: #267e64; }
    .cta-social .icon:hover {
      fill: #ccc; }

.nav-footer .footer-nav__major, .footer-copyright__box .nav-minor, .footer-disclaimer ul {
  list-style: none;
  margin-left: 0;
  margin-bottom: 0;
  padding-left: 0; }
  .nav-footer .footer-nav__major ul, .footer-copyright__box .nav-minor ul, .footer-disclaimer ul ul {
    list-style: none;
    margin-left: 0;
    margin-bottom: 0;
    padding-left: 0; }

.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px; }

footer {
  padding-bottom: 205px; }

.nav-footer {
  padding: 30px 20px 20px;
  text-align: center; }
  .nav-footer__link {
    font-size: 14px; }
  .nav-footer__box {
    padding: 0 10px; }
  .nav-footer__box-narrow {
    padding: 0 10px; }
  .nav-footer__button {
    display: block;
    color: #455652;
    border: 1px solid #455652;
    font-size: 16px;
    margin-bottom: 25px;
    word-wrap: break-word; }
  .nav-footer .footer-nav__major {
    margin-top: 0; }
    .nav-footer .footer-nav__major > li {
      font-family: Trebuchet MS;
      font-size: 16px; }
    .nav-footer .footer-nav__major a {
      color: #333; }
      .nav-footer .footer-nav__major a:hover {
        color: #267e64; }
  .nav-footer__sub-links {
    font-size: 14px;
    display: none; }

.footer-copyright {
  border-top: 1px solid #e5e6e7;
  padding: 20px 30px 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex; }
  .footer-copyright__logo {
    display: none; }
  .footer-copyright__box {
    text-align: center; }
    .footer-copyright__box small, .footer-copyright__box .nav-minor {
      display: inline-block;
      font-size: 14px; }
    .footer-copyright__box .nav-minor li a {
      font-size: 14px; }

.footer-disclaimer {
  border: 1px solid #455652;
  text-align: center;
  padding: 20px;
  margin: 50px auto 10px;
  width: 91.66667%; }
  .footer-disclaimer h6, .footer-disclaimer p, .footer-disclaimer ul {
    font-size: 14px; }
  .footer-disclaimer p {
    margin-bottom: 0; }
  .footer-disclaimer h6 {
    margin: 0; }
  .footer-disclaimer ul {
    margin-top: 0; }
    .footer-disclaimer ul li {
      display: inline-block;
      margin: 0 10px; }

header {
  background-color: #fff;
  padding: 0 40px;
  padding: 0 2rem; }

.header__logo {
  display: block;
  width: 275px; }

.main-standard, .main-bios, .main-news, .main-post {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  padding: 20px 40px;
  padding: 1rem 2rem; }

.main-standard__text * + * {
  margin-top: 20px;
  margin-top: 1rem; }
.main-standard__text h2 {
  color: #267e64;
  font-family: Playfair Display, serif;
  font-size: 40px;
  font-size: 2rem;
  font-weight: 400;
  line-height: 1; }

.main-bios {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
     -moz-box-orient: vertical;
     -moz-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column; }

.main-post__text * + * {
  margin-top: 20px;
  margin-top: 1rem; }
.main-post__text h2, .main-post__text h3 {
  color: #267e64;
  font-family: Playfair Display, serif;
  font-size: 40px;
  font-size: 2rem;
  font-weight: 400;
  line-height: 1; }
.main-post__text figcaption {
  color: #ccc;
  font-size: 15px;
  font-size: .75rem;
  margin-top: 0; }

input[type="email"], input[type="number"], input[type="password"], input[type="search"], input[type="tel"], input[type="text"], input[type="url"], input[type="color"], input[type="date"], input[type="name"], input[type="datetime"], input[type="datetime-local"], input[type="month"], input[type="time"], input[type="week"], select, textarea {
  color: #333;
  border: 1px solid #ccc;
  -moz-border-radius: 0;
       border-radius: 0;
  padding: 15px;
  display: block;
  width: 100%; }

label {
  display: block; }

input[type="button"], input[type="reset"], input[type="submit"] {
  display: block; }

.form-standard__checkbox {
  display: inline-block; }
.form-standard__checkbox + label {
  display: inline-block; }


@media (max-width: 768px) {

  .col-2-12 {
    width: 100%; }

  .col-3-12 {
    width: 100%; }

  .col-4-12 {
    width: 100%; }

  .col-5-12 {
    width: 100%; }

  .col-6-12 {
    width: 100%; }

  .col-7-12 {
    width: 100%; }

  .col-8-12 {
    width: 100%; }

  .banner-standard {
    -webkit-flex-flow: column;
        -ms-flex-flow: column;
            flex-flow: column; }

  .banner-standard__media-approach {
    height: 300px; }

  .banner-standard__media-leadership {
    height: 300px; }

  .card-diptic {
    -webkit-flex-flow: column;
        -ms-flex-flow: column;
            flex-flow: column; }

  .card-bio {
    -webkit-flex-flow: column;
        -ms-flex-flow: column;
            flex-flow: column; }

  .cta-contact__box {
    -webkit-flex-flow: column;
        -ms-flex-flow: column;
            flex-flow: column; }

  .cta-contact__button {
    margin-top: 20px; }

  .cta-teaser {
    -webkit-flex-flow: column;
        -ms-flex-flow: column;
            flex-flow: column; }

  .cta-teaser__media {
    height: 300px; }

  .main-standard, .main-bios, .main-news, .main-post {
    -webkit-flex-flow: column;
        -ms-flex-flow: column;
            flex-flow: column; } }


@media (max-width: 700px) {

  tr {
    margin-top: 0 !important; }

  tr:first-child {
    border-top: 1px solid #e5e6e7; }

  td {
    margin-top: 0 !important;
    position: relative;
    padding-left: 40%; }

  td:before {
    position: absolute;
    top: 6px;
    left: 6px;
    width: 40%;
    padding-right: 10px;
    white-space: nowrap;
    font-weight: 600; }

  td:nth-of-type(1):before {
    content: "City: "; }

  td:nth-of-type(2):before {
    content: "Address: "; }

  td:nth-of-type(3):before {
    content: "Phone: "; }

  thead tr {
    position: absolute;
    top: -9999px;
    left: -9999px; }

  table, thead, tbody, th, td, tr {
    display: block; } }


@media (min-width: 1025px) {

  .nav-minor {
    display: block;
    padding-top: 1rem;
    text-align: right; }

  .nav-major {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
       -moz-box-pack: justify;
        -ms-flex-pack: justify;
            justify-content: space-between;
    list-style: none;
    margin: 1rem 0; } }


@media (min-width: 768px) {

  .mean-container .mean-nav {
    margin-top: 63px; }

  .header__logo {
    width: 550px; } }


@media (min-width: 769px) {

  .banner-tall {
    height: 465px; }

  .banner-tall__title {
    font-size: 3.5rem;
    -webkit-align-self: flex-end;
        -ms-flex-item-align: end;
            align-self: flex-end;
    margin: 0 0 2rem 2rem; }

  .banner-standard {
    height: 335px; }

  .card-diptic__box {
    padding: 2rem 1rem 2rem 2rem; }

  .card-diptic__box:nth-child(2) {
    border-left: 1px solid #ccc;
    padding: 2rem 2rem 2rem 1rem; }

  .card-bio__box {
    padding-left: 2rem;
    padding-top: 0; }

  .cta-sidebar {
    padding: 1rem 0 0 3rem; }

  .cta-sidebar__media {
    height: 180px; } }


@media (min-width: 768px) and (min-width: 1024px) {

  .nav-footer {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    text-align: left; }

  .nav-footer__sub-links {
    display: block; }

  .footer-copyright__logo {
    display: block;
    width: 484px; }

  .footer-copyright__box {
    text-align: right; }

  .footer-copyright__box small, .footer-copyright__box .nav-minor {
    font-size: 12px; }

  .footer-copyright__box .nav-minor li a {
    font-size: 12px; }

  .footer-disclaimer {
    width: 75%; }

  .footer-disclaimer h6, .footer-disclaimer p, .footer-disclaimer ul {
    font-size: 12px; } }


@media (max-width: 767px) {

  header {
    min-height: 50px; } }


@media (min-width: 480px) and (max-width: 767px) {

  .header__logo {
    width: 330px; } }


/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci9fbm9ybWFsaXplLnNjc3MiLCJiYXNlL190eXBvZ3JhcGh5LnNhc3MiLCJiYXNlL19jb2xvcnMuc2FzcyIsImJhc2UvX2NsZWFyLWZpeC5zYXNzIiwiYmFzZS9faW1hZ2VzLnNhc3MiLCJiYXNlL19sYXlvdXQuc2FzcyIsImJhc2UvX2luY2x1ZGUtbWVkaWEuc2NzcyIsImJhc2UvX2dsb2JhbC5zYXNzIiwiYmFzZS9fdGFibGVzLnNhc3MiLCJtb2R1bGVzL25hdi9fbmF2LW1pbm9yLnNhc3MiLCJtb2R1bGVzL25hdi9fbmF2LW1ham9yLnNhc3MiLCJtb2R1bGVzL25hdi9fbmF2LW1vYmlsZS5zYXNzIiwibW9kdWxlcy9iYW5uZXIvX19iYW5uZXIuc2FzcyIsIm1vZHVsZXMvY2FyZHMvX19jYXJkcy5zYXNzIiwibW9kdWxlcy9jdGEvX19jdGEuc2FzcyIsIm1vZHVsZXMvZm9vdGVyL19mb290ZXIuc2FzcyIsIm1vZHVsZXMvaGVhZGVyL19oZWFkZXIuc2FzcyIsIm1vZHVsZXMvbWFpbi9fbWFpbi5zYXNzIiwibW9kdWxlcy9mb3JtL19mb3JtLnNhc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNENBLEFBQVMsQUFBTyxBQUFTLEFBQVksQUFBUSxBQUFRLEFBQVEsQUFBUSxBQUFLLEFBQVM7RUFXL0UsQUFBUzs7QUFLYixBQUFPLEFBQVE7RUFHWCxBQUFTOztBQVViLEFBQUssQUFBSztFQUNOLEFBQVM7RUFDVCxBQUFROztBQVFaLEFBQVU7RUFDTixBQUFTOztBQVliO0VBTUksQUFBMEI7RUFDMUIsQUFBc0I7O0FBZTFCO0VBQ0ksQUFBUTs7QUFZWjtFQUdJLEFBQVk7RUFVaEIsQUFBQyxBQUFRLEFBQUM7SUFFRixBQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2Q2pCLEFBQUk7RUFDQSxBQUFlOztBQUtuQixBQUFHO0VBRUMsQUFBYTs7QUFXakI7RUFDSSxBQUFZOztBQUtoQjtFQUNJLEFBQVk7RUFDWixBQUFPOztB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LEFBQVc7RUFDWCxBQUFZOztBQzVDbEIsQUFBSyxBQUFnQixBQUFLLEFBQWlCLEFBQUssQUFBbUIsQUFBSyxBQUFpQixBQUFLLEFBQWMsQUFBSyxBQUFlLEFBQUssQUFBYyxBQUFLLEFBQWdCLEFBQUssQUFBZSxBQUFLLEFBQWUsQUFBSyxBQUFtQixBQUFLLEFBQXlCLEFBQUssQUFBZ0IsQUFBSyxBQUFlLEFBQUssQUFBZSxBQUFRO0VoQlNoVSxBZ0JRVjtFQUNBLEFBQVE7RUFDUixBQUFlO0VBQ2YsQUFBUztFQUNULEFBQVM7RUFDVCxBQUFPOztBQUtSO0VBQ0UsQUFBUzs7QUFFWCxBQUFLLEFBQWlCLEFBQUssQUFBZ0IsQUFBSztFQUc5QyxBQUFTOztBQUdYO0VBQ0ksQUFBUztBQUViLEFBQTJCO0VBQ3ZCLEFBQVMiLCJmaWxlIjoic3R5bGUuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIE5vcm1hbGl6ZS5zY3NzIGJhc2VkIG9uIE5pY29sYXMgR2FsbGFnaGVyIGFuZCBKb25hdGhhbiBOZWFsJ3Ncbi8vIG5vcm1hbGl6ZS5jc3MgdjIuMS4zIHwgTUlUIExpY2Vuc2UgfCBnaXQuaW8vbm9ybWFsaXplXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTm9ybWFsaXplLnNjc3Mgc2V0dGluZ3Ncbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuLy8gU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYWRkIHN1cHBvcnQgZm9yIElFNiBhbmQgSUU3XG4vLyBOb3RpY2U6IHNldHRpbmcgdG8gdHJ1ZSBtaWdodCByZW5kZXIgc29tZSBlbGVtZW50c1xuLy8gc2xpZ2h0bHkgZGlmZmVyZW50bHkgdGhhbiB3aGVuIHNldCB0byBmYWxzZVxuJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZTogZmFsc2UgIWRlZmF1bHQ7IC8vIFVzZWQgYWxzbyBpbiBDb21wYXNzXG5cblxuLy8gU2V0IHRoZSBkZWZhdWx0IGZvbnQgZmFtaWx5IGhlcmUgc28geW91IGRvbid0IGhhdmUgdG8gb3ZlcnJpZGUgaXQgbGF0ZXJcbiRub3JtYWxpemVkX2ZvbnRfZmFtaWx5OiBzYW5zLXNlcmlmICFkZWZhdWx0O1xuXG4kbm9ybWFsaXplX2hlYWRpbmdzOiB0cnVlICFkZWZhdWx0O1xuXG4kaDFfZm9udF9zaXplOiAyZW0gIWRlZmF1bHQ7XG4kaDJfZm9udF9zaXplOiAxLjVlbSAhZGVmYXVsdDtcbiRoM19mb250X3NpemU6IDEuMTdlbSAhZGVmYXVsdDtcbiRoNF9mb250X3NpemU6IDFlbSAhZGVmYXVsdDtcbiRoNV9mb250X3NpemU6IDAuODNlbSAhZGVmYXVsdDtcbiRoNl9mb250X3NpemU6IDAuNzVlbSAhZGVmYXVsdDtcblxuJGgxX21hcmdpbjogMC42N2VtIDAgIWRlZmF1bHQ7XG4kaDJfbWFyZ2luOiAwLjgzZW0gMCAhZGVmYXVsdDtcbiRoM19tYXJnaW46IDFlbSAwICFkZWZhdWx0O1xuJGg0X21hcmdpbjogMS4zM2VtIDAgIWRlZmF1bHQ7XG4kaDVfbWFyZ2luOiAxLjY3ZW0gMCAhZGVmYXVsdDtcbiRoNl9tYXJnaW46IDIuMzNlbSAwICFkZWZhdWx0O1xuXG4kYmFja2dyb3VuZDogI2ZmZiAhZGVmYXVsdDtcbiRjb2xvcjogIzAwMCAhZGVmYXVsdDtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIENvcnJlY3RzIGJsb2NrIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUU2LzcvOC85ICYgRkYzXG5cbmFydGljbGUsXG5hc2lkZSxcbmRldGFpbHMsXG5maWdjYXB0aW9uLFxuZmlndXJlLFxuZm9vdGVyLFxuaGVhZGVyLFxuaGdyb3VwLFxubmF2LFxuc2VjdGlvbixcbnN1bW1hcnkge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vLyBDb3JyZWN0cyBpbmxpbmUtYmxvY2sgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRTYvNy84LzkgJiBGRjNcblxuYXVkaW8sXG5jYW52YXMsXG52aWRlbyB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIEBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICAgICAgKmRpc3BsYXk6IGlubGluZTtcbiAgICAgICAgKnpvb206IDE7XG4gICAgfVxufVxuXG4vLyAxLiBQcmV2ZW50cyBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nICdhdWRpbycgd2l0aG91dCBjb250cm9sc1xuLy8gMi4gUmVtb3ZlIGV4Y2VzcyBoZWlnaHQgaW4gaU9TNSBkZXZpY2VzXG5cbmF1ZGlvOm5vdChbY29udHJvbHNdKSB7XG4gICAgZGlzcGxheTogbm9uZTsgLy8gMVxuICAgIGhlaWdodDogMDsgLy8gMlxufVxuXG4vL1xuLy8gQWRkcmVzcyBgW2hpZGRlbl1gIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LlxuLy8gSGlkZSB0aGUgYHRlbXBsYXRlYCBlbGVtZW50IGluIElFLCBTYWZhcmksIGFuZCBGaXJlZm94IDwgMjIuXG4vL1xuXG5baGlkZGVuXSwgdGVtcGxhdGUge1xuICAgIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBCYXNlXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyAxLiBDb3JyZWN0cyB0ZXh0IHJlc2l6aW5nIG9kZGx5IGluIElFNi83IHdoZW4gYm9keSBmb250LXNpemUgaXMgc2V0IHVzaW5nIGVtIHVuaXRzXG4vLyAgICBodHRwOi8vY2xhZ251dC5jb20vYmxvZy8zNDgvI2M3OTBcbi8vIDIuIFByZXZlbnRzIGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmcgdXNlciB6b29tXG4vLyAgICB3d3cuNDU2YmVyZWFzdHJlZXQuY29tL2FyY2hpdmUvMjAxMDEyL2NvbnRyb2xsaW5nX3RleHRfc2l6ZV9pbl9zYWZhcmlfZm9yX2lvc193aXRob3V0X2Rpc2FibGluZ191c2VyX3pvb20vXG5cbmh0bWwge1xuICAgIEBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICAgICAgZm9udC1zaXplOiAxMDAlOyAvLyAxXG4gICAgfVxuXHRcdC8vYmFja2dyb3VuZDogJGJhY2tncm91bmQ7XG5cdFx0Ly9jb2xvcjogJGNvbG9yO1xuICAgIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLy8gMlxuICAgIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvLyAyXG59XG5cbi8vIEFkZHJlc3NlcyBmb250LWZhbWlseSBpbmNvbnNpc3RlbmN5IGJldHdlZW4gJ3RleHRhcmVhJyBhbmQgb3RoZXIgZm9ybSBlbGVtZW50cy5cblxuaHRtbCxcbmJ1dHRvbixcbmlucHV0LFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICAgIC8vZm9udC1mYW1pbHk6ICRub3JtYWxpemVkX2ZvbnRfZmFtaWx5O1xufVxuXG4vLyBBZGRyZXNzZXMgbWFyZ2lucyBoYW5kbGVkIGluY29ycmVjdGx5IGluIElFNi83XG5cbmJvZHkge1xuICAgIG1hcmdpbjogMDtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIExpbmtzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyAxLiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbi8vIDIuIEFkZHJlc3NlcyBvdXRsaW5lIGRpc3BsYXllZCBvZGRseSBpbiBDaHJvbWVcbi8vIDMuIEltcHJvdmVzIHJlYWRhYmlsaXR5IHdoZW4gZm9jdXNlZCBhbmQgYWxzbyBtb3VzZSBob3ZlcmVkIGluIGFsbCBicm93c2Vyc1xuLy8gICAgcGVvcGxlLm9wZXJhLmNvbS9wYXRyaWNrbC9leHBlcmltZW50cy9rZXlib2FyZC90ZXN0XG5cbmEge1xuICAgIC8vIDFcblxuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXG4gICAgLy8gMlxuXG4gICAgJjpmb2N1cyB7XG4gICAgICAgIC8vb3V0bGluZTogdGhpbiBkb3R0ZWQ7XG4gICAgfVxuXG4gICAgLy8gM1xuXG4gICAgJjpob3ZlcixcbiAgICAmOmFjdGl2ZSB7XG4gICAgICAgIG91dGxpbmU6IDA7XG4gICAgfVxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVHlwb2dyYXBoeVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gQWRkcmVzc2VzIGZvbnQgc2l6ZXMgYW5kIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIElFNi83XG4vLyBBZGRyZXNzZXMgZm9udCBzaXplcyB3aXRoaW4gJ3NlY3Rpb24nIGFuZCAnYXJ0aWNsZScgaW4gRkY0KywgQ2hyb21lLCBTNVxuXG4vKiBAaWYgXFwkbm9ybWFsaXplX2hlYWRpbmdzID09IHRydWUge1xuICAgIGgxIHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoMV9mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDFfbWFyZ2luO1xuICAgIH1cblxuICAgIGgyIHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoMl9mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDJfbWFyZ2luO1xuICAgIH1cblxuICAgIGgzIHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoM19mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDNfbWFyZ2luO1xuICAgIH1cblxuICAgIGg0IHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoNF9mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDRfbWFyZ2luO1xuICAgIH1cblxuICAgIGg1IHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoNV9mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDVfbWFyZ2luO1xuICAgIH1cblxuICAgIGg2IHtcbiAgICAgICAgZm9udC1zaXplOiBcXCRoNl9mb250X3NpemU7XG4gICAgICAgIG1hcmdpbjogXFwkaDZfbWFyZ2luO1xuICAgIH1cbn0gKi9cblxuLy8gQWRkcmVzc2VzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LCBTNSwgQ2hyb21lXG5cbmFiYnJbdGl0bGVdIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkO1xufVxuXG4vLyBBZGRyZXNzZXMgc3R5bGUgc2V0IHRvICdib2xkZXInIGluIEZGMyssIFM0LzUsIENocm9tZVxuXG5iLFxuc3Ryb25nIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICAgIGJsb2NrcXVvdGUge1xuICAgICAgICBtYXJnaW46IDFlbSA0MHB4O1xuICAgIH1cbn1cblxuLy8gQWRkcmVzc2VzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gUzUsIENocm9tZVxuXG5kZm4ge1xuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cblxuLy8gQWRkcmVzc2VzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUU2LzcvOC85XG5cbm1hcmsge1xuICAgIGJhY2tncm91bmQ6ICNmZjA7XG4gICAgY29sb3I6ICMwMDA7XG59XG5cbi8vIEFkZHJlc3NlcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBJRTYvN1xuQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICAgIHAsXG4gICAgcHJlIHtcbiAgICAgICAgbWFyZ2luOiAxZW0gMDtcbiAgICB9XG59XG5cbi8vIENvcnJlY3RzIGZvbnQgZmFtaWx5IHNldCBvZGRseSBpbiBJRTYsIFM0LzUsIENocm9tZVxuLy8gZW4ud2lraXBlZGlhLm9yZy93aWtpL1VzZXI6RGF2aWRnb3RoYmVyZy9UZXN0NTlcblxuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIHNlcmlmO1xuICAgIEBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICAgICAgX2ZvbnQtZmFtaWx5OiAnY291cmllciBuZXcnLCBtb25vc3BhY2U7XG4gICAgfVxuICAgIGZvbnQtc2l6ZTogMWVtO1xufVxuXG4vLyBJbXByb3ZlcyByZWFkYWJpbGl0eSBvZiBwcmUtZm9ybWF0dGVkIHRleHQgaW4gYWxsIGJyb3dzZXJzXG5cbnByZSB7XG4gICAgd2hpdGUtc3BhY2U6IHByZTtcbiAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xufVxuXG4vLyBTZXQgY29uc2lzdGVudCBxdW90ZSB0eXBlcy5cblxucSB7XG4gICAgcXVvdGVzOiBcIlxcMjAxQ1wiIFwiXFwyMDFEXCIgXCJcXDIwMThcIiBcIlxcMjAxOVwiO1xufVxuXG4vLyAxLiBBZGRyZXNzZXMgQ1NTIHF1b3RlcyBub3Qgc3VwcG9ydGVkIGluIElFNi83XG4vLyAyLiBBZGRyZXNzZXMgcXVvdGUgcHJvcGVydHkgbm90IHN1cHBvcnRlZCBpbiBTNFxuXG4vLyAxXG5AaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgcSB7XG4gICAgICAgIHF1b3Rlczogbm9uZTtcbiAgICB9XG59XG5cbi8vIDJcbnEge1xuICAgICY6YmVmb3JlLFxuICAgICY6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgY29udGVudDogbm9uZTtcbiAgICB9XG59XG5cbi8vIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuXG4vKiAvc21hbGwge1xuICAgIGZvbnQtc2l6ZTogODAlO1xufSAqL1xuXG4vLyBQcmV2ZW50cyBzdWIgYW5kIHN1cCBhZmZlY3RpbmcgbGluZS1oZWlnaHQgaW4gYWxsIGJyb3dzZXJzXG4vLyBnaXN0LmdpdGh1Yi5jb20vNDEzOTMwXG5cbnN1YixcbnN1cCB7XG4gICAgZm9udC1zaXplOiA3NSU7XG4gICAgbGluZS1oZWlnaHQ6IDA7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3VwIHtcbiAgICB0b3A6IC0wLjVlbTtcbn1cblxuc3ViIHtcbiAgICBib3R0b206IC0wLjI1ZW07XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBMaXN0c1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gQWRkcmVzc2VzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIElFNi83XG5AaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgZGwsXG4gICAgbWVudSxcbiAgICBvbCxcbiAgICB1bCB7XG4gICAgICAgIC8vbWFyZ2luOiAxZW0gMDtcbiAgICB9XG59XG5cbkBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICBkZCB7XG4gICAgICAgIG1hcmdpbjogMCAwIDAgNDBweDtcbiAgICB9XG59XG5cbi8vIEFkZHJlc3NlcyBwYWRkaW5ncyBzZXQgZGlmZmVyZW50bHkgaW4gSUU2LzdcbkBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICBtZW51LFxuICAgIG9sLFxuICAgIHVsIHtcbiAgICAgICAgLy9wYWRkaW5nOiAwIDAgMCA0MHB4O1xuICAgIH1cbn1cblxuLy8gQ29ycmVjdHMgbGlzdCBpbWFnZXMgaGFuZGxlZCBpbmNvcnJlY3RseSBpbiBJRTdcblxubmF2IHtcbiAgICB1bCxcbiAgICBvbCB7XG4gICAgICAgIEBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICAgICAgICAgIC8vbGlzdC1zdHlsZS1pbWFnZTogbm9uZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEVtYmVkZGVkIGNvbnRlbnRcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIDEuIFJlbW92ZXMgYm9yZGVyIHdoZW4gaW5zaWRlICdhJyBlbGVtZW50IGluIElFNi83LzgvOSwgRkYzXG4vLyAyLiBJbXByb3ZlcyBpbWFnZSBxdWFsaXR5IHdoZW4gc2NhbGVkIGluIElFN1xuLy8gICAgY29kZS5mbGlja3IuY29tL2Jsb2cvMjAwOC8xMS8xMi9vbi11aS1xdWFsaXR5LXRoZS1saXR0bGUtdGhpbmdzLWNsaWVudC1zaWRlLWltYWdlLXJlc2l6aW5nL1xuXG5pbWcge1xuICAgIGJvcmRlcjogMDsgLy8gMVxuICAgIEBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICAgICAgLW1zLWludGVycG9sYXRpb24tbW9kZTogYmljdWJpYzsgLy8gMlxuICAgIH1cbn1cblxuLy8gQ29ycmVjdHMgb3ZlcmZsb3cgZGlzcGxheWVkIG9kZGx5IGluIElFOVxuXG5zdmc6bm90KDpyb290KSB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEZpZ3VyZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIEFkZHJlc3NlcyBtYXJnaW4gbm90IHByZXNlbnQgaW4gSUU2LzcvOC85LCBTNSwgTzExXG5cbmZpZ3VyZSB7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRm9ybXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIENvcnJlY3RzIG1hcmdpbiBkaXNwbGF5ZWQgb2RkbHkgaW4gSUU2LzdcbkBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICBmb3JtIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgIH1cbn1cblxuLy8gRGVmaW5lIGNvbnNpc3RlbnQgYm9yZGVyLCBtYXJnaW4sIGFuZCBwYWRkaW5nXG5cbmZpZWxkc2V0IHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICAgIG1hcmdpbjogMCAycHg7XG4gICAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtO1xufVxuXG4vLyAxLiBDb3JyZWN0cyBjb2xvciBub3QgYmVpbmcgaW5oZXJpdGVkIGluIElFNi83LzgvOVxuLy8gMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuLy8gMy4gQ29ycmVjdHMgdGV4dCBub3Qgd3JhcHBpbmcgaW4gRkYzXG4vLyA0LiBDb3JyZWN0cyBhbGlnbm1lbnQgZGlzcGxheWVkIG9kZGx5IGluIElFNi83XG5cbmxlZ2VuZCB7XG4gICAgYm9yZGVyOiAwOyAvLyAxXG4gICAgcGFkZGluZzogMDsgLy8gMlxuICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7IC8vIDNcbiAgICBAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgICAgICptYXJnaW4tbGVmdDogLTdweDsgLy8gNFxuICAgIH1cbn1cblxuLy8gMS4gQ29ycmVjdCBmb250IGZhbWlseSBub3QgYmVpbmcgaW5oZXJpdGVkIGluIGFsbCBicm93c2Vycy5cbi8vIDIuIENvcnJlY3RzIGZvbnQgc2l6ZSBub3QgYmVpbmcgaW5oZXJpdGVkIGluIGFsbCBicm93c2Vyc1xuLy8gMy4gQWRkcmVzc2VzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIElFNi83LCBGRjMrLCBTNSwgQ2hyb21lXG4vLyA0LiBJbXByb3ZlcyBhcHBlYXJhbmNlIGFuZCBjb25zaXN0ZW5jeSBpbiBhbGwgYnJvd3NlcnNcblxuYnV0dG9uLFxuaW5wdXQsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7IC8vIDFcbiAgICBmb250LXNpemU6IDEwMCU7IC8vIDJcbiAgICBtYXJnaW46IDA7IC8vIDNcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IC8vIDRcbiAgICBAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgICAgICp2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyAvLyA0XG4gICAgfVxufVxuXG4vLyBBZGRyZXNzZXMgRkYzLzQgc2V0dGluZyBsaW5lLWhlaWdodCBvbiAnaW5wdXQnIHVzaW5nICFpbXBvcnRhbnQgaW4gdGhlIFVBIHN0eWxlc2hlZXRcblxuYnV0dG9uLCBpbnB1dCB7XG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbn1cblxuLy8gQWRkcmVzcyBpbmNvbnNpc3RlbnQgYHRleHQtdHJhbnNmb3JtYCBpbmhlcml0YW5jZSBmb3IgYGJ1dHRvbmAgYW5kIGBzZWxlY3RgLlxuLy8gQWxsIG90aGVyIGZvcm0gY29udHJvbCBlbGVtZW50cyBkbyBub3QgaW5oZXJpdCBgdGV4dC10cmFuc2Zvcm1gIHZhbHVlcy5cbi8vIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gQ2hyb21lLCBTYWZhcmkgNSssIGFuZCBJRSA4Ky5cbi8vIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCA0KyBhbmQgT3BlcmEuXG5cbmJ1dHRvbixcbnNlbGVjdCB7XG4gICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5cbi8vIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4vLyAgICBhbmQgYHZpZGVvYCBjb250cm9sc1xuLy8gMi4gQ29ycmVjdHMgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSAnaW5wdXQnIHR5cGVzIGluIGlPU1xuLy8gMy4gSW1wcm92ZXMgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4vLyAgICAnaW5wdXQnIGFuZCBvdGhlcnNcbi8vIDQuIFJlbW92ZXMgaW5uZXIgc3BhY2luZyBpbiBJRTcgd2l0aG91dCBhZmZlY3Rpbmcgbm9ybWFsIHRleHQgaW5wdXRzXG4vLyAgICBLbm93biBpc3N1ZTogaW5uZXIgc3BhY2luZyByZW1haW5zIGluIElFNlxuXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sIC8vIDFcbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvLyAyXG4gICAgY3Vyc29yOiBwb2ludGVyOyAvLyAzXG4gICAgQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICAgICAgICAqb3ZlcmZsb3c6IHZpc2libGU7ICAvLyA0XG4gICAgfVxufVxuXG4vLyBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzXG5cbmJ1dHRvbltkaXNhYmxlZF0sXG5pbnB1dFtkaXNhYmxlZF0ge1xuICAgIGN1cnNvcjogZGVmYXVsdDtcbn1cblxuLy8gUmVtb3ZlcyBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRkYzK1xuLy8gd3d3LnNpdGVwZW4uY29tL2Jsb2cvMjAwOC8wNS8xNC90aGUtZGV2aWxzLWluLXRoZS1kZXRhaWxzLWZpeGluZy1kb2pvcy10b29sYmFyLWJ1dHRvbnMvXG5cbmJ1dHRvbiwgaW5wdXQge1xuICAgICY6Oi1tb3otZm9jdXMtaW5uZXIge1xuICAgICAgICBib3JkZXI6IDA7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgfVxufVxuXG4vLyAxLiBSZW1vdmVzIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFNi83LzgvOVxuLy8gMi4gSW1wcm92ZXMgcmVhZGFiaWxpdHkgYW5kIGFsaWdubWVudCBpbiBhbGwgYnJvd3NlcnNcblxudGV4dGFyZWEge1xuICAgIG92ZXJmbG93OiBhdXRvOyAvLyAxXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDsgLy8gMlxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVGFibGVzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBSZW1vdmUgbW9zdCBzcGFjaW5nIGJldHdlZW4gdGFibGUgY2VsbHNcblxudGFibGUge1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgYm9yZGVyLXNwYWNpbmc6IDA7XG59XG5cbmlucHV0IHtcbiAgICAvLyAxLiBBZGRyZXNzZXMgYXBwZWFyYW5jZSBzZXQgdG8gc2VhcmNoZmllbGQgaW4gUzUsIENocm9tZVxuICAgIC8vIDIuIEFkZHJlc3NlcyBib3gtc2l6aW5nIHNldCB0byBib3JkZXItYm94IGluIFM1LCBDaHJvbWUgKGluY2x1ZGUgLW1veiB0byBmdXR1cmUtcHJvb2YpXG4gICAgJlt0eXBlPVwic2VhcmNoXCJdIHtcbiAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8vIDFcbiAgICAgICAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgICAgICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLy8gMlxuICAgICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcblxuICAgIFx0Ly8gUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIHNlYXJjaCBjYW5jZWwgYnV0dG9uIGluIFNhZmFyaSA1IGFuZCBDaHJvbWVcbiAgICAgICAgLy8gb24gT1MgWC5cbiAgICAgICAgJjo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbiAgICAgICAgJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gICAgICAgICAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGBjb250ZW50LWJveGAgaW4gSUUgOC85LzEwLlxuICAgIC8vIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuXG4gICAgLy8gMy4gUmVtb3ZlcyBleGNlc3MgcGFkZGluZyBpbiBJRTdcbiAgICAvLyAgICBLbm93biBpc3N1ZTogZXhjZXNzIHBhZGRpbmcgcmVtYWlucyBpbiBJRTZcbiAgICAmW3R5cGU9XCJjaGVja2JveFwiXSxcbiAgICAmW3R5cGU9XCJyYWRpb1wiXSB7XG4gICAgXHRib3gtc2l6aW5nOiBib3JkZXItYm94OyAvLyAxXG4gICAgXHRwYWRkaW5nOiAwOyAvLyAyXG4gICAgXHRAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgICAgIFx0KmhlaWdodDogMTNweDsgLy8gM1xuICAgICAgICBcdCp3aWR0aDogMTNweDsgLy8gM1xuICAgIFx0fVxuICAgIH1cbn1cbiIsIi8vIFZhcnNcbiRiYXNlLWZvbnQtc2l6ZTogMjBweFxuJGJhc2UtbGluZS1oZWlnaHQ6IDEuNVxuXG4vLyBUeXBlZmFjZXNcbiRzYW5zOiBOZXdzIEN5Y2xlLCBzYW5zLXNlcmlmXG4kc2VyaWY6IFBsYXlmYWlyIERpc3BsYXksIHNlcmlmXG5cbi8vIEZvbnQgd2VpZ2h0c1xuJHhsaWdodDogMjAwXG4kbGlnaHQ6IDMwMFxuJG5vcm1hbDogNDAwXG4kc2VtaWJvbGQ6IDYwMFxuJGJvbGQ6IDcwMFxuXG4vLyBMaW5lIGhlaWdodCBmdW5jdGlvblxuQGZ1bmN0aW9uIGxpbmUtaGVpZ2h0KClcbiAgQHJldHVybiAkYmFzZS1mb250LXNpemUgKiAkYmFzZS1saW5lLWhlaWdodFxuXG4vLyBWYXIgbXVzdCBiZSBzcGVjaWZpZWQgYWZ0ZXIgcmV0dXJuaW5nIHRoZSBsaW5lLWhlaWdodCBmdW5jdGlvblxuJGNhbC1saW5lLWhlaWdodDogbGluZS1oZWlnaHQoKVxuXG4vLyBNaXhpbnNcbj12ZXJ0LW1hcmdpbigkdG9wOiAxLCAkYm90dG9tOiAxKVxuICBtYXJnaW4tdG9wOiAkY2FsLWxpbmUtaGVpZ2h0ICogJHRvcFxuICBtYXJnaW4tYm90dG9tOiAkY2FsLWxpbmUtaGVpZ2h0ICogJGJvdHRvbVxuXG49dmVydC1wYWRkaW5nKCR0b3A6IDEsICRib3R0b206IDEpXG4gIHBhZGRpbmctdG9wOiAkY2FsLWxpbmUtaGVpZ2h0ICogJHRvcFxuICBwYWRkaW5nLWJvdHRvbTogJGNhbC1saW5lLWhlaWdodCAqICRib3R0b21cblxuXG5odG1sXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3hcbiAgLy8gQm94LXNpemluZyBzZXR1cCBwZXIgTXIuIElyaXNoIGh0dHA6Ly93d3cucGF1bGlyaXNoLmNvbS8yMDEyL2JveC1zaXppbmctYm9yZGVyLWJveC1mdHcvXG4gIGZvbnQtc2l6ZTogJGJhc2UtZm9udC1zaXplXG4gIC8vIEZvbnQgc2l6ZSBvbiA6cm9vdCAoaHRtbCB0YWcpIHNvIEkgY2FuIHVzZSBSRU1zXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGVcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWRcblxuXG4qLCAqOmJlZm9yZSwgKjphZnRlclxuICBib3gtc2l6aW5nOiBpbmhlcml0XG5cblxuYm9keVxuICBjb2xvcjogJGNoYXJjb2FsXG4gIGxpbmUtaGVpZ2h0OiAxLjVcbiAgZm9udC1mYW1pbHk6ICRzYW5zXG4gIC8vYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRyYW5zcGFyZW50LCB0cmFuc3BhcmVudCBsaW5lLWhlaWdodCgpIC0gMXB4LCAkZ3JlZW4gMXB4ICwgdHJhbnNwYXJlbnQpXG4gIGJhY2tncm91bmQtc2l6ZTogYXV0byBsaW5lLWhlaWdodCgpXG4gIG1hcmdpbjogMFxuXG5cbj1zdGFuZGFyZC1oZWFkaW5nKClcbiAgY29sb3I6ICRncmVlblxuICBmb250LWZhbWlseTogJHNlcmlmXG4gIGZvbnQtc2l6ZTogMnJlbVxuICBmb250LXdlaWdodDogJG5vcm1hbFxuICBsaW5lLWhlaWdodDogMVxuIiwiLy8gU2l0ZSBjb2xvciBwYWxldHRlXG4kZ3JlZW46ICMyNjdlNjRcbiRzbGF0ZTogI2VkZWVlYlxuXG4vLyA1MCBzaGFkZXMgb2YgZ3JheVxuJHdoaXRlOiAjZmZmXG4kc3RlYW06ICNmOGY4ZjhcbiRjbG91ZDogI2U1ZTZlN1xuJGdyYXBoaXRlOiAjY2NjXG4kc3RvbmU6ICM3ZjdlN2VcbiRsZWFkOiAjNmU2YjZjXG4kY2hhcmNvYWw6ICMzMzNcbiRibGFjazogIzAwMFxuXG4vLyBOYXZpZ2F0aW9uIGNvbG9yc1xuLy8gJG5hdi1saW5rOlxuLy8gJG5hdi1saW5rLWN1cnJlbnQtcGFnZTpcbi8vICRuYXYtbGluay1ob3ZlcjpcblxuLy9Cb3JkZXIgQ29sb3JcbiRib3JkZXJDb2xvcjogJGdyYXBoaXRlXG5cbi8vIFNpdGUgYmFzZSB0ZXh0IGNvbG9yc1xuJHNpdGUtdGV4dC1jb2xvcjogJGNoYXJjb2FsXG4vLyAkc2l0ZS10ZXh0LWNvbG9yLWxpbms6XG4vLyAkc2l0ZS10ZXh0LWNvbG9yLWxpbmstaG92ZXI6XG5cbi8vIEJ1dHRvbnNcbi8vICRidXR0b24tY29sb3I6XG4vLyAkYnV0dG9uLWJnOlxuLy8gJGJ1dHRvbi1ob3Zlci1jb2xvcjpcbi8vICRidXR0b24taG92ZXItYmc6XG5cbi8vIEZvb3RlciBjb2xvcnNcbiRmb290ZXItdGV4dDogIzQ1NTY1MlxuJGZvb3Rlci10ZXh0LWxpbms6ICRmb290ZXItdGV4dFxuJGZvb3Rlci10ZXh0LWxpbmstaG92ZXI6ICRncmVlblxuXG4vLyBTb2NpYWwgY29sb3JzXG4vLyAkc29jaWFsLWljb24tY29sb3I6XG4vLyAkc29jaWFsLWljb24tYmctY29sb3I6XG4vLyAkc29jaWFsLWljb24tY29sb3ItaG92ZXI6XG4iLCIvLyBodHRwOi8vY3NzbW9qby5jb20vbGF0ZXN0X25ld19jbGVhcmZpeF9zb19mYXIvXG4uY2xlYXJmaXg6YWZ0ZXJcbiAgY29udGVudDogXCJcIlxuICBkaXNwbGF5OiB0YWJsZVxuICBjbGVhcjogYm90aFxuIiwiLy8gUkVTUE9OU0lWRSBJTUFHRVNcbmltZywgaWZyYW1lLCBlbWJlZFxuICB3aWR0aDogMTAwJVxuIiwiLmNvbnRhaW5lclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgJGJvcmRlckNvbG9yXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICRib3JkZXJDb2xvclxuICBtYXJnaW46IDAgYXV0b1xuICBtYXgtd2lkdGg6IDEyMDBweFxuXG4vLzIgY29sdW1ucyB3aWRlXG4vLyBUaGlzIGlzIHVzZWQgaW4gdGhlIGZvb3RlciBmb3IgbmFycm93ZXIgY29sdW1ucyBvZiBsaW5rc1xuLmNvbC0yLTEyXG4gIHdpZHRoOiAyLzEyICogMTAwJVxuXG4gIEBpbmNsdWRlIG1lZGlhKFwiPD10YWJsZXRcIilcbiAgICB3aWR0aDogMTAwJVxuXG4vLzMgY29sdW1ucyB3aWRlXG4vLyBUaGlzIGlzIHVzZWQgaW4gdGhlIGZvb3RlciBmb3IgZmF0dGVyIGNvbHVtbnMgb2YgbG9uZ2VyLXRpdGxlZCBsaW5rc1xuLmNvbC0zLTEyXG4gIHdpZHRoOiAzLzEyICogMTAwJVxuXG4gIEBpbmNsdWRlIG1lZGlhKFwiPD10YWJsZXRcIilcbiAgICB3aWR0aDogMTAwJVxuXG4vLyA0IGNvbHVtbnMgd2lkZS5cbi8vIFRoaXMgaXMgdXNlZCBpbiB0aGUgTGVhZGVyc2hpcCBwYWdlLlxuLmNvbC00LTEyXG4gIHdpZHRoOiA0LzEyICogMTAwJVxuXG4gIEBpbmNsdWRlIG1lZGlhKFwiPD10YWJsZXRcIilcbiAgICB3aWR0aDogMTAwJVxuXG5cbi8vIDUgY29sdW1ucyB3aWRlLlxuLy8gVGhpcyBpcyB1c2VkIGluIG1vc3Qgb2YgdGhlIGJhbm5lcnMuXG4vLyBJdCBpcyBhbHNvIHVzZWQgaW4gdGhlIE1haW4gbW9kdWxlIGFyZWEgdGhhdCBpbmNsdWRlcyB0aGUgc2lkZWJhci5cbi5jb2wtNS0xMlxuICB3aWR0aDogNS8xMiAqIDEwMCVcblxuICBAaW5jbHVkZSBtZWRpYShcIjw9dGFibGV0XCIpXG4gICAgd2lkdGg6IDEwMCVcblxuXG4vLyA2IGNvbHVtbnMgd2lkZS5cbi8vIFRoaXMgd2lsbCBzcGFuIGhhbGYgdGhlIGF2YWlsYWJsZSB3aWR0aFxuLy8gVGhlIENhcmQgTW9kdWxlIG9uIHRoZSBob21lcGFnZSB1c2VzIHRoaXNcbi5jb2wtNi0xMlxuICB3aWR0aDogNi8xMiAqIDEwMCVcblxuICBAaW5jbHVkZSBtZWRpYShcIjw9dGFibGV0XCIpXG4gICAgd2lkdGg6IDEwMCVcblxuXG4vLyA3IGNvbHVtbnMgd2lkZS5cbi8vIFRoaXMgaXMgdXNlZCBpbiBtb3N0IG9mIHRoZSBiYW5uZXJzLlxuLy8gSXQgaXMgYWxzbyB1c2VkIGluIHRoZSBNYWluIG1vZHVsZSBhcmVhIHRoYXQgaW5jbHVkZXMgdGhlIHNpZGViYXIuXG4vLyBbY2xhc3MqPSctLWNvbC03LTEyJ11cbi5jb2wtNy0xMlxuICB3aWR0aDogNy8xMiAqIDEwMCVcblxuICBAaW5jbHVkZSBtZWRpYShcIjw9dGFibGV0XCIpXG4gICAgd2lkdGg6IDEwMCVcblxuXG4vLyA4IGNvbHVtbnMgd2lkZS5cbi8vIFRoaXMgaXMgdXNlZCBpbiB0aGUgTGVhZGVyc2hpcCBwYWdlLlxuLmNvbC04LTEyXG4gIHdpZHRoOiA4LzEyICogMTAwJVxuXG4gIEBpbmNsdWRlIG1lZGlhKFwiPD10YWJsZXRcIilcbiAgICB3aWR0aDogMTAwJVxuIiwiLy8gIFx0IF8gICAgICAgICAgICBfICAgICAgICAgICBfICAgICAgICAgICAgICAgICAgICAgICAgICAgXyBfXG4vLyAgXHQoXykgICAgICAgICAgfCB8ICAgICAgICAgfCB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgKF8pXG4vLyAgXHQgXyBfIF9fICAgX19ffCB8XyAgIF8gIF9ffCB8IF9fXyAgIF8gX18gX19fICAgX19fICBfX3wgfF8gIF9fIF9cbi8vICBcdHwgfCAnXyBcXCAvIF9ffCB8IHwgfCB8LyBfYCB8LyBfIFxcIHwgJ18gYCBfIFxcIC8gXyBcXC8gX2AgfCB8LyBfYCB8XG4vLyAgXHR8IHwgfCB8IHwgKF9ffCB8IHxffCB8IChffCB8ICBfXy8gfCB8IHwgfCB8IHwgIF9fLyAoX3wgfCB8IChffCB8XG4vLyAgXHR8X3xffCB8X3xcXF9fX3xffFxcX18sX3xcXF9fLF98XFxfX198IHxffCB8X3wgfF98XFxfX198XFxfXyxffF98XFxfXyxffFxuLy9cbi8vXHRcdFx0U2ltcGxlLCBlbGVnYW50IGFuZCBtYWludGFpbmFibGUgbWVkaWEgcXVlcmllcyBpbiBTYXNzXG4vL1xuLy9cdFx0XHQgXHRcdFx0aHR0cDovL2luY2x1ZGUtbWVkaWEuY29tXG4vL1xuLy9cdCAgXHRcdCBBdXRob3I6IEVkdWFyZG8gQm91Y2FzIDxtYWlsQGVkdWFyZG9ib3VjYXMuY29tPlxuLy9cbi8vL1xuLy8vIENyZWF0ZXMgYSBsaXN0IG9mIGdsb2JhbCBicmVha3BvaW50c1xuLy8vXG4vLy8gQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENyZWF0ZXMgYSBzaW5nbGUgYnJlYWtwb2ludCB3aXRoIHRoZSBsYWJlbCBgcGhvbmVgXG4vLy8gICRicmVha3BvaW50czogKCdwaG9uZSc6IDMyMHB4KTtcbi8vL1xuJGJyZWFrcG9pbnRzOiAoXG5cdCdwaG9uZSc6IDMyMHB4LFxuXHQndGFibGV0JzogNzY4cHgsXG5cdCdkZXNrdG9wJzogMTAyNHB4XG4pICFkZWZhdWx0O1xuXG4vLy9cbi8vLyBDcmVhdGVzIGEgbGlzdCBvZiBzdGF0aWMgZXhwcmVzc2lvbnMgb3IgbWVkaWEgdHlwZXNcbi8vL1xuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBDcmVhdGVzIGEgc2luZ2xlIG1lZGlhIHR5cGUgKHNjcmVlbilcbi8vLyAgJG1lZGlhLWV4cHJlc3Npb25zOiAoJ3NjcmVlbic6ICdzY3JlZW4nKTtcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBDcmVhdGVzIGEgc3RhdGljIGV4cHJlc3Npb24gd2l0aCBsb2dpY2FsIGRpc2p1bmN0aW9uIChPUiBvcGVyYXRvcilcbi8vLyAgJG1lZGlhLWV4cHJlc3Npb25zOiAoXG4vLy9cdFx0J3JldGluYTJ4JzogKFxuLy8vXHRcdFx0Jygtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpJyxcbi8vL1x0XHRcdCcobWluLXJlc29sdXRpb246IDE5MmRwaSknXG4vLy9cdFx0KVxuLy8vXHQpO1xuLy8vXG4kbWVkaWEtZXhwcmVzc2lvbnM6IChcblx0J3NjcmVlbic6ICdzY3JlZW4nLFxuXHQncHJpbnQnOiAncHJpbnQnLFxuXHQnaGFuZGhlbGQnOiAnaGFuZGhlbGQnLFxuXHQncmV0aW5hMngnOiAoXG5cdFx0Jygtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpJyxcblx0XHQnKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpJ1xuXHQpLFxuXHQncmV0aW5hM3gnOiAoXG5cdFx0Jygtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpJyxcblx0XHQnKG1pbi1yZXNvbHV0aW9uOiAzNTBkcGkpJ1xuXHQpXG4pICFkZWZhdWx0O1xuXG4vLy9cbi8vLyBEZWZpbmVzIGEgbnVtYmVyIHRvIGJlIGFkZGVkIG9yIHN1YnRyYWN0ZWQgZnJvbSBlYWNoIHVuaXQgd2hlbiBkZWNsYXJpbmcgYnJlYWtwb2ludHMgd2l0aCBleGNsdXNpdmUgaW50ZXJ2YWxzXG4vLy9cbi8vLyBAYXV0aG9yIEVkdWFyZG8gQm91Y2FzXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gSW50ZXJ2YWwgZm9yIHBpeGVscyBpcyBkZWZpbmVkIGFzIGAxYCBieSBkZWZhdWx0XG4vLy8gIEBpbmNsdWRlIG1lZGlhKFwiPjEyOHB4XCIpIHt9XG4vLy9cbi8vL1x0IC8qIEdlbmVyYXRlczogKi9cbi8vL1x0IEBtZWRpYSAobWluLXdpZHRoOiAxMjlweCkge31cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBJbnRlcnZhbCBmb3IgZW1zIGlzIGRlZmluZWQgYXMgYDAuMDFgIGJ5IGRlZmF1bHRcbi8vLyAgQGluY2x1ZGUgbWVkaWEoXCI+MjBlbVwiKSB7fVxuLy8vXG4vLy9cdCAvKiBHZW5lcmF0ZXM6ICovXG4vLy9cdCBAbWVkaWEgKG1pbi13aWR0aDogMjAuMDFlbSkge31cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBJbnRlcnZhbCBmb3IgcmVtcyBpcyBkZWZpbmVkIGFzIGAwLjFgIGJ5IGRlZmF1bHQsIHRvIGJlIHVzZWQgd2l0aCBgZm9udC1zaXplOiA2Mi41JTtgXG4vLy8gIEBpbmNsdWRlIG1lZGlhKFwiPjIuMHJlbVwiKSB7fVxuLy8vXG4vLy9cdCAvKiBHZW5lcmF0ZXM6ICovXG4vLy9cdCBAbWVkaWEgKG1pbi13aWR0aDogMi4xcmVtKSB7fVxuLy8vXG4kdW5pdC1pbnRlcnZhbHM6IChcblx0J3B4JzogMSxcblx0J2VtJzogMC4wMSxcblx0J3JlbSc6IDAuMVxuKSAhZGVmYXVsdDtcbi8vL1xuLy8vIEdlbmVyYXRlcyBhIG1lZGlhIHF1ZXJ5IGJhc2VkIG9uIGEgbGlzdCBvZiBjb25kaXRpb25zXG4vLy9cbi8vLyBAYXV0aG9yIEVkdWFyZG8gQm91Y2FzXG4vLy9cbi8vLyBAcGFyYW0ge0xpc3R9ICAgJGNvbmRpdGlvbnMgIC0gTWVkaWEgcXVlcnkgY29uZGl0aW9uc1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggYSBzaW5nbGUgc2V0IGJyZWFrcG9pbnRcbi8vLyAgQGluY2x1ZGUgbWVkaWEoXCI+cGhvbmVcIikgeyB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gV2l0aCB0d28gc2V0IGJyZWFrcG9pbnRzXG4vLy8gIEBpbmNsdWRlIG1lZGlhKFwiPnBob25lXCIsIFwiPD10YWJsZXRcIikgeyB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gV2l0aCBjdXN0b20gdmFsdWVzXG4vLy8gIEBpbmNsdWRlIG1lZGlhKFwiPj0zNThweFwiLCBcIjw4NTBweFwiKSB7IH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIHNldCBicmVha3BvaW50cyB3aXRoIGN1c3RvbSB2YWx1ZXNcbi8vLyAgQGluY2x1ZGUgbWVkaWEoXCI+ZGVza3RvcFwiLCBcIjw9MTM1MHB4XCIpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggYSBzdGF0aWMgZXhwcmVzc2lvblxuLy8vICBAaW5jbHVkZSBtZWRpYShcInJldGluYTJ4XCIpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIE1peGluZyBldmVyeXRoaW5nXG4vLy8gIEBpbmNsdWRlIG1lZGlhKFwiPj0zNTBweFwiLCBcIjx0YWJsZXRcIiwgXCJyZXRpbmEzeFwiKSB7IH1cbi8vL1xuQG1peGluIG1lZGlhKCRjb25kaXRpb25zLi4uKSB7XG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRjb25kaXRpb25zKSB7XG4gICAgJGNvbmRpdGlvbnM6IHNldC1udGgoJGNvbmRpdGlvbnMsICRpLCBwYXJzZS1leHByZXNzaW9uKG50aCgkY29uZGl0aW9ucywgJGkpKSk7XG4gIH1cblxuICAkYnJhbmNoZXM6IGdldC1xdWVyeS1icmFuY2hlcygkY29uZGl0aW9ucyk7XG4gICRxdWVyeTogJyc7XG5cbiAgQGVhY2ggJGJyYW5jaCBpbiAkYnJhbmNoZXMge1xuICAgIEBpZiAoc3RyLWxlbmd0aCgkcXVlcnkpICE9IDApIHtcbiAgICAgICRxdWVyeTogJHF1ZXJ5ICsgJywgJztcbiAgICB9XG5cbiAgICAkcXVlcnk6ICRxdWVyeSArICRicmFuY2g7XG4gIH1cblxuICBAbWVkaWEgI3skcXVlcnl9IHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLy9cbi8vLyBSZWFkcyBhIGxpc3Qgb2YgbWVkaWEgcXVlcnkgZXhwcmVzc2lvbnMgYW5kIHNlcGFyYXRlcyBsb2dpY2FsIGRpc2p1bmN0aW9ucyBpbnRvIGRpZmZlcmVudCBicmFuY2hlc1xuLy8vXG4vLy8gQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xuLy8vXG4vLy8gQHBhcmFtIHtMaXN0fSAgICRleHByZXNzaW9ucyAgLSBsaXN0IG9mIGV4cHJlc3Npb25zXG4vLy9cbi8vLyBAdGhyb3dzIGAkZXhwcmVzc2lvbmAgaXMgbm90IGEgdmFsaWQgZXhwcmVzc2lvblxuLy8vXG4vLy8gQHJldHVybiB7TGlzdCB8IE51bGx9XG4vLy9cbkBmdW5jdGlvbiBnZXQtcXVlcnktYnJhbmNoZXMoJGV4cHJlc3Npb25zKSB7XG4gICRyZXN1bHQ6ICcnO1xuICAkaGFzLWdyb3VwczogZmFsc2U7XG5cbiAgLy8gR2V0dGluZyBpbml0aWFsIHNuYXBzaG90IGFuZCBsb29raW5nIGZvciBncm91cHNcbiAgQGVhY2ggJGV4cHJlc3Npb24gaW4gJGV4cHJlc3Npb25zIHtcbiAgICBAaWYgKHN0ci1sZW5ndGgoJHJlc3VsdCkgIT0gMCkge1xuICAgICAgJHJlc3VsdDogJHJlc3VsdCArICcgYW5kICc7XG4gICAgfVxuXG4gICAgQGlmICh0eXBlLW9mKCRleHByZXNzaW9uKSA9PSAnc3RyaW5nJykge1xuICAgICAgJHJlc3VsdDogJHJlc3VsdCArICRleHByZXNzaW9uO1xuICAgIH0gQGVsc2UgaWYgKHR5cGUtb2YoJGV4cHJlc3Npb24pID09ICdsaXN0Jykge1xuICAgICAgJHJlc3VsdDogJHJlc3VsdCArIG50aCgkZXhwcmVzc2lvbiwgMSk7XG4gICAgICAkaGFzLWdyb3VwczogdHJ1ZTtcbiAgICB9IEBlbHNlIHtcbiAgICAgIEB3YXJuICcjeyRleHByZXNzaW9ufSBpcyBub3QgYSB2YWxpZCBleHByZXNzaW9uLic7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgaGF2ZSBncm91cHMsIHdlIGhhdmUgdG8gY3JlYXRlIGFsbCBwb3NzaWJsZSBjb21iaW5hdGlvbnNcbiAgQGlmICRoYXMtZ3JvdXBzIHtcbiAgICBAZWFjaCAkZXhwcmVzc2lvbiBpbiAkZXhwcmVzc2lvbnMge1xuICAgICAgQGlmICh0eXBlLW9mKCRleHByZXNzaW9uKSA9PSAnbGlzdCcpIHtcbiAgICAgICAgJGZpcnN0OiBudGgoJGV4cHJlc3Npb24sIDEpO1xuXG4gICAgICAgIEBlYWNoICRtZW1iZXIgaW4gJGV4cHJlc3Npb24ge1xuICAgICAgICAgIEBpZiAoJG1lbWJlciAhPSAkZmlyc3QpIHtcbiAgICAgICAgICAgIEBlYWNoICRwYXJ0aWFsIGluICRyZXN1bHQge1xuICAgICAgICAgICAgICAkcmVzdWx0OiBqb2luKCRyZXN1bHQsIHN0ci1yZXBsYWNlLWZpcnN0KCRmaXJzdCwgJG1lbWJlciwgJHBhcnRpYWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRyZXN1bHQ7XG59XG5cbi8vL1xuLy8vIFBhcnNlcyBhIHN0cmluZyB0byBmb3JtIGEgbWVkaWEgcXVlcnkgZXhwcmVzc2lvblxuLy8vXG4vLy8gQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICAgJGV4cHJlc3Npb24gIC0gZXhwcmVzc2lvbiAoaW4gc3RyaW5nKVxuLy8vXG4vLy8gQHRocm93cyBFeHByZXNzaW9uIHdpdGggdHlwZSBgdHlwZS1vZigkZXhwcmVzc2lvbilgIGRldGVjdGVkLCBzdHJpbmcgZXhwZWN0ZWRcbi8vLyBAdGhyb3dzIGAkZXhwcmVzc2lvbmAgaXMgbWlzc2luZyBhbiBvcGVyYXRvclxuLy8vIEB0aHJvd3MgVW5rbm93biB1bml0OiBgJHVuaXRgXG4vLy9cbi8vLyBAcmV0dXJuIHtTdHJpbmcgfCBOdWxsfVxuLy8vXG5AZnVuY3Rpb24gcGFyc2UtZXhwcmVzc2lvbigkZXhwcmVzc2lvbikge1xuICAkb3BlcmF0b3I6ICcnO1xuICAkdmFsdWU6ICcnO1xuICAkZWxlbWVudDogJyc7XG4gICRyZXN1bHQ6ICcnO1xuICAkaXMtd2lkdGg6IHRydWU7XG5cbiAgQGlmICh0eXBlLW9mKCRleHByZXNzaW9uKSAhPSAnc3RyaW5nJykge1xuICAgIEB3YXJuICdFeHByZXNzaW9uIHdpdGggdHlwZSBgI3t0eXBlLW9mKCRleHByZXNzaW9uKX1gIGRldGVjdGVkLCBzdHJpbmcgZXhwZWN0ZWQuJztcbiAgfVxuXG4gIC8vIFNlcGFyYXRpbmcgdGhlIG9wZXJhdG9yIGZyb20gdGhlIHJlc3Qgb2YgdGhlIGV4cHJlc3Npb25cbiAgQGlmIChzdHItc2xpY2UoJGV4cHJlc3Npb24sIDIsIDIpID09ICc9Jykge1xuICAgICRvcGVyYXRvcjogc3RyLXNsaWNlKCRleHByZXNzaW9uLCAxLCAyKTtcbiAgICAkdmFsdWU6IHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgMyk7XG4gIH0gQGVsc2Uge1xuICAgICRvcGVyYXRvcjogc3RyLXNsaWNlKCRleHByZXNzaW9uLCAxLCAxKTtcbiAgICAkdmFsdWU6IHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgMik7XG4gIH1cblxuICAvLyBDaGVja2luZyB3aGF0IHR5cGUgb2YgZXhwcmVzc2lvbiB3ZSdyZSBkZWFsaW5nIHdpdGhcbiAgQGlmIG1hcC1oYXMta2V5KCRicmVha3BvaW50cywgJHZhbHVlKSB7XG4gICAgJHJlc3VsdDogbWFwLWdldCgkYnJlYWtwb2ludHMsICR2YWx1ZSk7XG4gIH0gQGVsc2UgaWYgbWFwLWhhcy1rZXkoJG1lZGlhLWV4cHJlc3Npb25zLCAkZXhwcmVzc2lvbikge1xuICAgICRyZXN1bHQ6IG1hcC1nZXQoJG1lZGlhLWV4cHJlc3Npb25zLCAkZXhwcmVzc2lvbik7XG4gICAgJGlzLXdpZHRoOiBmYWxzZTtcbiAgfSBAZWxzZSB7XG4gICAgJHJlc3VsdDogdG8tbnVtYmVyKCR2YWx1ZSk7XG4gIH1cblxuICBAaWYgKCRpcy13aWR0aCkge1xuICAgICR1bml0OiB1bml0KCRyZXN1bHQpO1xuICAgICRpbnRlcnZhbDogMDtcblxuICAgIEBpZiAobWFwLWhhcy1rZXkoJHVuaXQtaW50ZXJ2YWxzLCAkdW5pdCkpIHtcbiAgICAgICRpbnRlcnZhbDogbWFwLWdldCgkdW5pdC1pbnRlcnZhbHMsICR1bml0KTtcbiAgICB9IEBlbHNlIHtcbiAgICAgIEB3YXJuICdVbmtub3duIHVuaXQ6ICN7JHVuaXR9JztcbiAgICB9XG5cbiAgICBAaWYgKCRvcGVyYXRvciA9PSAnPicpIHtcbiAgICAgICRlbGVtZW50OiAnKG1pbi13aWR0aDogI3skcmVzdWx0ICsgJGludGVydmFsfSknO1xuICAgIH0gQGVsc2UgaWYgKCRvcGVyYXRvciA9PSAnPCcpIHtcbiAgICAgICRlbGVtZW50OiAnKG1heC13aWR0aDogI3skcmVzdWx0IC0gJGludGVydmFsfSknO1xuICAgIH0gQGVsc2UgaWYgKCRvcGVyYXRvciA9PSAnPj0nKSB7XG4gICAgICAkZWxlbWVudDogJyhtaW4td2lkdGg6ICN7JHJlc3VsdH0pJztcbiAgICB9IEBlbHNlIGlmICgkb3BlcmF0b3IgPT0gJzw9Jykge1xuICAgICAgJGVsZW1lbnQ6ICcobWF4LXdpZHRoOiAjeyRyZXN1bHR9KSc7XG4gICAgfSBAZWxzZSB7XG4gICAgICBAd2FybiAnI3skZXhwcmVzc2lvbn0gaXMgbWlzc2luZyBhbiBvcGVyYXRvci4nO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgJGVsZW1lbnQ6ICRyZXN1bHQ7XG4gIH1cblxuICBAcmV0dXJuICRlbGVtZW50O1xufVxuXG4vLy9cbi8vLyBSZXBsYWNlcyB0aGUgZmlyc3Qgb2NjdXJlbmNlIG9mIHRoZSBzdHJpbmcgd2l0aCB0aGUgcmVwbGFjZW1lbnQgc3RyaW5nXG4vLy9cbi8vLyBAYXV0aG9yIEVkdWFyZG8gQm91Y2FzXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gICAkc2VhcmNoICAtIFRoZSB2YWx1ZSBiZWluZyBzZWFyY2hlZCBmb3Jcbi8vLyBAcGFyYW0ge1N0cmluZ30gICAkcmVwbGFjZSAgLSBUaGUgcmVwbGFjZW1lbnQgc3RyaW5nXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICAgJHN1YmplY3QgIC0gVGhlIHN0cmluZyBiZWluZyByZXBsYWNlZCBvblxuLy8vXG4vLy8gQHJldHVybiB7U3RyaW5nIHwgTnVsbH1cbi8vL1xuQGZ1bmN0aW9uIHN0ci1yZXBsYWNlLWZpcnN0KCRzZWFyY2gsICRyZXBsYWNlLCAkc3ViamVjdCkge1xuICAkc2VhcmNoLXN0YXJ0OiBzdHItaW5kZXgoJHN1YmplY3QsICRzZWFyY2gpO1xuXG4gIEBpZiAkc2VhcmNoLXN0YXJ0ID09IG51bGwge1xuICAgIEByZXR1cm4gJHN1YmplY3Q7XG4gIH1cblxuICAkcmVzdWx0OiBzdHItc2xpY2UoJHN1YmplY3QsIDAsICRzZWFyY2gtc3RhcnQgLSAxKTtcbiAgJHJlc3VsdDogJHJlc3VsdCArICRyZXBsYWNlO1xuICAkcmVzdWx0OiAkcmVzdWx0ICsgc3RyLXNsaWNlKCRzdWJqZWN0LCAkc2VhcmNoLXN0YXJ0ICsgc3RyLWxlbmd0aCgkc2VhcmNoKSk7XG5cbiAgQHJldHVybiAkcmVzdWx0O1xufVxuXG4vLy9cbi8vLyBDYXN0cyBhIG51bWJlciB0byBhIHN0cmluZ1xuLy8vXG4vLy8gQGF1dGhvciBIdWdvIEdpcmF1ZGVsXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gICAkc3RyaW5nICAtIE51bWJlciB0byBiZSBwYXJzZWRcbi8vL1xuLy8vIEByZXR1cm4ge0xpc3QgfCBOdWxsfVxuLy8vXG5AZnVuY3Rpb24gdG8tbnVtYmVyKCRzdHJpbmcpIHtcbiAgLy8gTWF0cmljZXNcbiAgJHN0cmluZ3M6ICcwJyAnMScgJzInICczJyAnNCcgJzUnICc2JyAnNycgJzgnICc5JztcbiAgJG51bWJlcnM6ICAwICAgMSAgIDIgICAzICAgNCAgIDUgICA2ICAgNyAgIDggICA5O1xuXG4gIC8vIFJlc3VsdFxuICAkcmVzdWx0OiAwO1xuICAkZGl2aWRlcjogMDtcbiAgJG1pbnVzOiBmYWxzZTtcblxuICAvLyBMb29waW5nIHRocm91Z2ggYWxsIGNoYXJhY3RlcnNcbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBzdHItbGVuZ3RoKCRzdHJpbmcpIHtcbiAgICAkY2hhcmFjdGVyOiBzdHItc2xpY2UoJHN0cmluZywgJGksICRpKTtcbiAgICAkaW5kZXg6IGluZGV4KCRzdHJpbmdzLCAkY2hhcmFjdGVyKTtcblxuXG4gICAgQGlmICRjaGFyYWN0ZXIgPT0gJy0nIHtcbiAgICAgICRtaW51czogdHJ1ZTtcbiAgICB9XG5cbiAgICBAZWxzZSBpZiAkY2hhcmFjdGVyID09ICcuJyB7XG4gICAgICAkZGl2aWRlcjogMTtcbiAgICB9XG5cbiAgICBAZWxzZSB7XG4gICAgICBAaWYgdHlwZS1vZigkaW5kZXgpICE9ICdudW1iZXInIHtcbiAgICAgICAgJHJlc3VsdDogaWYoJG1pbnVzLCAkcmVzdWx0ICogLTEsICRyZXN1bHQpO1xuICAgICAgICBAcmV0dXJuIF9sZW5ndGgoJHJlc3VsdCwgc3RyLXNsaWNlKCRzdHJpbmcsICRpKSk7XG4gICAgICB9XG5cbiAgICAgICRudW1iZXI6IG50aCgkbnVtYmVycywgJGluZGV4KTtcblxuICAgICAgQGlmICRkaXZpZGVyID09IDAge1xuICAgICAgICAkcmVzdWx0OiAkcmVzdWx0ICogMTA7XG4gICAgICB9XG5cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgLy8gTW92ZSB0aGUgZGVjaW1hbCBkb3QgdG8gdGhlIGxlZnRcbiAgICAgICAgJGRpdmlkZXI6ICRkaXZpZGVyICogMTA7XG4gICAgICAgICRudW1iZXI6ICRudW1iZXIgLyAkZGl2aWRlcjtcbiAgICAgIH1cblxuICAgICAgJHJlc3VsdDogJHJlc3VsdCArICRudW1iZXI7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiBpZigkbWludXMsICRyZXN1bHQgKiAtMSwgJHJlc3VsdCk7XG59XG5cbkBmdW5jdGlvbiBfbGVuZ3RoKCRudW1iZXIsICR1bml0KSB7XG4gICRzdHJpbmdzOiAncHgnICdjbScgJ21tJyAnJScgJ2NoJyAncGljYScgJ2luJyAnZW0nICdyZW0nICdwdCcgJ3BjJyAnZXgnICd2dycgJ3ZoJyAndm1pbicgJ3ZtYXgnO1xuICAkdW5pdHM6ICAgMXB4ICAxY20gIDFtbSAgMSUgIDFjaCAgMXBpY2EgIDFpbiAgMWVtICAxcmVtICAxcHQgIDFwYyAgMWV4ICAxdncgIDF2aCAgMXZtaW4gIDF2bWF4O1xuICAkaW5kZXg6IGluZGV4KCRzdHJpbmdzLCAkdW5pdCk7XG5cbiAgQGlmIHR5cGUtb2YoJGluZGV4KSAhPSAnbnVtYmVyJyB7XG4gICAgQHdhcm4gJ1Vua25vd24gdW5pdCBgI3skdW5pdH1gLic7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIEByZXR1cm4gJG51bWJlciAqIG50aCgkdW5pdHMsICRpbmRleCk7XG59XG4iLCIqXG4gIG1hcmdpbjogMFxuICBwYWRkaW5nOiAwXG5cbmJvZHlcbiAgYmFja2dyb3VuZC1jb2xvcjogJHNsYXRlXG4gIHBhZGRpbmc6IDBcblxuYVxuICB0ZXh0LWRlY29yYXRpb246IG5vbmVcblxuW2NsYXNzKj1fX2J1dHRvbl0sXG5pbnB1dFt0eXBlPVwiYnV0dG9uXCJdLFxuaW5wdXRbdHlwZT1cInJlc2V0XCJdLFxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXVxuICBib3JkZXI6IDJweCBzb2xpZCAkZ3JlZW5cbiAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gIGZvbnQtZmFtaWx5OiAkc2VyaWZcbiAgZm9udC1zaXplOiAxLjJyZW1cbiAgZm9udC1zdHlsZTogaXRhbGljXG4gIHRleHQtYWxpZ246IGNlbnRlclxuICBwYWRkaW5nOiAuNXJlbSAxcmVtXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZVxuICAvKkl0ZW1zIGZvciB0cmFuc2l0aW9uXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50XG4gIGNvbG9yOiAkZ3JlZW5cbiAgLypUcmFuc2l0aW9uIHNldHRpbmdzXG4gIHRyYW5zaXRpb246IGFsbCAuMnMgZWFzZVxuICAmOmhvdmVyXG4gICAgLypUaGVzZSB3aWxsIHRyYW5zaXRpb24gb24gaG92ZXJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JlZW5cbiAgICBjb2xvcjogJHdoaXRlXG5cblxuXG5cblxuLy8gaW4gcHJvZ3Jlc3NcblxuLy8gTWl4aW5zXG49YnV0dG9uKCRiYWNrZ3JvdW5kLCAkY29sb3IsICRib3JkZXItY29sb3IpXG4gIGJvcmRlcjogMnB4IHNvbGlkICRib3JkZXItY29sb3JcbiAgZm9udC1mYW1pbHk6ICRzZXJpZlxuICBmb250LXNpemU6IDEuMnJlbVxuICBmb250LXN0eWxlOiBpdGFsaWNcbiAgcGFkZGluZzogLjVyZW0gMXJlbVxuICB0ZXh0LWRlY29yYXRpb246IG5vbmVcbiAgLypJdGVtcyBmb3IgdHJhbnNpdGlvblxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudFxuICBjb2xvcjogJGNvbG9yXG4gIC8qVHJhbnNpdGlvbiBzZXR0aW5nc1xuICB0cmFuc2l0aW9uOiBhbGwgLjJzIGVhc2VcbiAgJjpob3ZlclxuICAgIC8qVGhlc2Ugd2lsbCB0cmFuc2l0aW9uIG9uIGhvdmVyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGdyZWVuXG4gICAgY29sb3I6ICRjb2xvclxuXG4vL1Jlc2V0IGZsZXhib3ggc2V0dGluZ3Mgd2hlbiByZXNwb25kaW5nIGJlbG93IGRlc2t0b3Bcbj1yZXNwb25zaXZlLXN0YWNrXG4gIEBpbmNsdWRlIG1lZGlhKFwiPD10YWJsZXRcIilcbiAgICBmbGV4LWZsb3c6IGNvbHVtblxuIiwiLy8gVGhlIHRhYmxlcyBzdGFydCB0byBsb29rIGZ1Z2x5IGF0IGFyb3VuZCA3MDBweCwgc28gbGV0J3Mgc3RhcnQgcmVzcG9uZGluZyB0aGVyZVxuJHRhYmxlLWJyZWFrOiBcIjw9NzAwcHhcIlxuXG50YWJsZVxuXHRtYXJnaW46IDAgMCAxLjVlbVxuXHR3aWR0aDogMTAwJVxuXG50clxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGNsb3VkXG5cbiAgQGluY2x1ZGUgbWVkaWEoJHRhYmxlLWJyZWFrKVxuICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcblxuICAgICY6Zmlyc3QtY2hpbGRcbiAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAkY2xvdWRcblxuICAmOm50aC1jaGlsZChldmVuKVxuICAgIGJhY2tncm91bmQtY29sb3I6ICRzdGVhbVxuXG50ZFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wXG4gIHBhZGRpbmc6IDEwcHggNXB4XG5cbiAgQGluY2x1ZGUgbWVkaWEoJHRhYmxlLWJyZWFrKVxuICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmVcbiAgICBwYWRkaW5nLWxlZnQ6IDQwJVxuXG4gICAgJjpiZWZvcmVcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZVxuICAgICAgdG9wOiA2cHhcbiAgICAgIGxlZnQ6IDZweFxuICAgICAgd2lkdGg6IDQwJVxuICAgICAgcGFkZGluZy1yaWdodDogMTBweFxuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcFxuICAgICAgZm9udC13ZWlnaHQ6ICRzZW1pYm9sZFxuXG5cbiAgICAmOm50aC1vZi10eXBlKDEpXG4gICAgICAmOmJlZm9yZVxuICAgICAgICBjb250ZW50OiBcIkNpdHk6IFwiXG4gICAgJjpudGgtb2YtdHlwZSgyKVxuICAgICAgJjpiZWZvcmVcbiAgICAgICAgY29udGVudDogXCJBZGRyZXNzOiBcIlxuICAgICY6bnRoLW9mLXR5cGUoMylcbiAgICAgICY6YmVmb3JlXG4gICAgICAgIGNvbnRlbnQ6IFwiUGhvbmU6IFwiXG5cbnRoZWFkXG4gIGJhY2tncm91bmQtY29sb3I6ICRjbG91ZFxuXG4gIHRyXG4gICAgLy9IaWRlIHRoZSB0aGVhZCBpbmZvcm1hdGlvbiBpbiBhbiBhY2Nlc3NpYmxlIHdheVxuXG4gICAgQGluY2x1ZGUgbWVkaWEoJHRhYmxlLWJyZWFrKVxuICAgICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgICB0b3A6IC05OTk5cHhcbiAgICAgIGxlZnQ6IC05OTk5cHhcblxuICB0aFxuICAgIGZvbnQtd2VpZ2h0OiAkc2VtaWJvbGRcbiAgICB0ZXh0LWFsaWduOiBsZWZ0XG4gICAgcGFkZGluZzogNXB4XG5cbnRhYmxlLCB0aGVhZCwgdGJvZHksIHRoLCB0ZCwgdHJcbiAgQGluY2x1ZGUgbWVkaWEoJHRhYmxlLWJyZWFrKVxuICAgIGRpc3BsYXk6IGJsb2NrXG4iLCIubmF2LW1pbm9yXG4gIGRpc3BsYXk6IG5vbmVcbiAgQGluY2x1ZGUgbWVkaWEoXCI+ZGVza3RvcFwiKVxuICAgIGRpc3BsYXk6IGJsb2NrXG4gICAgcGFkZGluZy10b3A6IDFyZW1cbiAgICB0ZXh0LWFsaWduOiByaWdodFxuXG4gIGxpXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG5cbiAgICAmOmFmdGVyXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcbiAgICAgIGNvbnRlbnQ6ICd8J1xuICAgICAgY29sb3I6ICRncmVlblxuICAgICAgbWFyZ2luOiAwIDJweFxuXG4gICAgJjpsYXN0LWNoaWxkXG5cbiAgICAgICY6YWZ0ZXJcbiAgICAgICAgZGlzcGxheTogbm9uZVxuXG4gICZfX2xpbmtcbiAgICBjb2xvcjogJGNoYXJjb2FsXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gICAgZm9udC1zaXplOiAxNnB4XG5cbiAgICAmOmhvdmVyXG4gICAgICBjb2xvcjogJGdyZWVuXG4iLCIubmF2LW1ham9yXG4gIGRpc3BsYXk6IG5vbmVcbiAgQGluY2x1ZGUgbWVkaWEoXCI+ZGVza3RvcFwiKVxuICAgIGRpc3BsYXk6IGZsZXhcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW5cbiAgICBsaXN0LXN0eWxlOiBub25lXG4gICAgbWFyZ2luOiAxcmVtIDBcblxuICBsaVxuICAgIC8vZmxleDogMVxuICAgIHRleHQtYWxpZ246IGNlbnRlclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZVxuXG4gICAgYVxuICAgICAgY29sb3I6ICRjaGFyY29hbFxuICAgICAgZm9udC1mYW1pbHk6ICRzZXJpZlxuICAgICAgZm9udC1zaXplOiAxLjFyZW1cbiAgICAgIGRpc3BsYXk6IGJsb2NrXG4gICAgICBwYWRkaW5nOiAuNXJlbSAwXG5cbiAgICAgICY6aG92ZXJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlXG4gICAgICAgIGNvbG9yOiAkZ3JlZW5cblxuICAgIHVsXG4gICAgICBkaXNwbGF5OiBub25lXG4gICAgICB3aWR0aDogMTAwJVxuICAgICAgcG9zaXRpb246IGFic29sdXRlXG4gICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmVcblxuICAgICY6aG92ZXJcbiAgICAgID4gdWxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrXG4iLCIvL1VzZWQgYnkgTWVhbiBNZW51IEpTIHRvIHJlZmVyZW5jZSBjb250ZW50LCBzbyB3ZSBoaWRlIHRoaXMgb3RoZXJ3aXNlXG4jbW9iaWxlLW1lbnVcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50XG5cbi8vXHRNZWFuTWVudSAyLjAuN1xuXG4vL1x0VG8gYmUgdXNlZCB3aXRoIGpxdWVyeS5tZWFubWVudS5qcyBieSBDaHJpcyBXaGFydG9uIChodHRwOi8vd3d3Lm1lYW50aGVtZXMuY29tL3BsdWdpbnMvbWVhbm1lbnUvKVxuXG4vLyBoaWRlIHRoZSBsaW5rIHVudGlsIHZpZXdwb3J0IHNpemUgaXMgcmVhY2hlZFxuYS5tZWFubWVudS1yZXZlYWxcbiAgZGlzcGxheTogbm9uZVxuXG4vLyB3aGVuIHVuZGVyIHZpZXdwb3J0IHNpemUsIC5tZWFuLWNvbnRhaW5lciBpcyBhZGRlZCB0byBib2R5XG4ubWVhbi1jb250YWluZXIgLm1lYW4tYmFyXG4gIHdpZHRoOiAxMDAlXG4gIHBhZGRpbmc6IDRweCAwXG4gIG1pbi1oZWlnaHQ6IDQycHhcbiAgei1pbmRleDogOTk5OTk5XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZVxuXG4ubWVhbi1jb250YWluZXIgYS5tZWFubWVudS1yZXZlYWxcbiAgd2lkdGg6IDIycHhcbiAgaGVpZ2h0OiAyMnB4XG4gIHBhZGRpbmc6IDEzcHggMTNweCAxMXB4IDEzcHhcbiAgcG9zaXRpb246IGFic29sdXRlXG4gIHRvcDogMFxuICByaWdodDogMFxuICBjdXJzb3I6IHBvaW50ZXJcbiAgY29sb3I6ICRncmVlblxuICB0ZXh0LWRlY29yYXRpb246IG5vbmVcbiAgZm9udC1zaXplOiAxOHB4XG4gIHRleHQtaW5kZW50OiAtOTk5OWVtXG4gIGxpbmUtaGVpZ2h0OiAyMnB4XG4gIGZvbnQtc2l6ZTogMXB4XG4gIGRpc3BsYXk6IGJsb2NrXG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmXG4gIGZvbnQtd2VpZ2h0OiA3MDBcblxuLm1lYW4tY29udGFpbmVyIGEubWVhbm1lbnUtcmV2ZWFsIHNwYW5cbiAgZGlzcGxheTogYmxvY2tcbiAgYmFja2dyb3VuZDogJGdyZWVuXG4gIGhlaWdodDogM3B4XG4gIG1hcmdpbi10b3A6IDNweFxuXG4ubWVhbi1jb250YWluZXIgLm1lYW4tbmF2XG4gIGZsb2F0OiBsZWZ0XG4gIHdpZHRoOiAxMDAlXG4gIGJhY2tncm91bmQ6ICR3aGl0ZVxuICBtYXJnaW4tdG9wOiA0NHB4XG5cbiAgLy8gdG9wIG1hcmdpbiBuZWVkcyB0byBjaGFuZ2UgaWYgaGVpZ2h0IG9mIGhlYWRlciBjaGFuZ2VzXG4gIEBpbmNsdWRlIG1lZGlhKFwiPj10YWJsZXRcIilcbiAgICBtYXJnaW4tdG9wOiA2M3B4XG5cbi5tZWFuLWNvbnRhaW5lciAubWVhbi1uYXYgdWxcbiAgcGFkZGluZzogMFxuICBtYXJnaW46IDBcbiAgd2lkdGg6IDEwMCVcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lXG5cbi5tZWFuLWNvbnRhaW5lciAubWVhbi1uYXYgdWwgbGlcbiAgcG9zaXRpb246IHJlbGF0aXZlXG4gIGZsb2F0OiBsZWZ0XG4gIHdpZHRoOiAxMDAlXG5cbi5tZWFuLWNvbnRhaW5lciAubWVhbi1uYXYgdWwgbGkgYVxuICBkaXNwbGF5OiBibG9ja1xuICBmbG9hdDogbGVmdFxuICB3aWR0aDogOTAlXG4gIHBhZGRpbmc6IDAuNzVlbSA1JVxuICBmb250LXNpemU6IDAuODVlbVxuICBtYXJnaW46IDBcbiAgdGV4dC1hbGlnbjogbGVmdFxuICBjb2xvcjogJGNoYXJjb2FsXG4gIGJvcmRlci10b3A6IHNvbGlkIDFweCAkY2xvdWRcbiAgLy9ib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZVxuICBmb250LWZhbWlseTogJHNlcmlmXG5cbiAgJjphY3RpdmVcbiAgICBjb2xvcjogJGdyZWVuXG5cbiAgJi5tZWFuLWNsaWNrZWRcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZWRcbiAgICBiYWNrZ3JvdW5kOiAkZ3JlZW4gIWltcG9ydGFudFxuICAgIGNvbG9yOiAkd2hpdGVcblxuLm1lYW4tY29udGFpbmVyIC5tZWFuLW5hdiB1bCBsaSBsaSBhXG4gIHdpZHRoOiA4MCVcbiAgcGFkZGluZzogMWVtIDEwJVxuICBib3JkZXItdG9wOiBzb2xpZCAxcHggJGNsb3VkXG4gIHRleHQtc2hhZG93OiBub25lICFpbXBvcnRhbnRcbiAgdmlzaWJpbGl0eTogdmlzaWJsZVxuXG4ubWVhbi1jb250YWluZXIgLm1lYW4tbmF2IHVsIGxpLm1lYW4tbGFzdCBhXG4gIGJvcmRlci1ib3R0b206IHNvbGlkIDFweCAkY2xvdWRcbiAgbWFyZ2luLWJvdHRvbTogMFxuXG4ubWVhbi1jb250YWluZXIgLm1lYW4tbmF2IHVsIGxpIGxpIGxpIGFcbiAgd2lkdGg6IDcwJVxuICBwYWRkaW5nOiAxZW0gMTUlXG5cbi5tZWFuLWNvbnRhaW5lciAubWVhbi1uYXYgdWwgbGkgbGkgbGkgbGkgYVxuICB3aWR0aDogNjAlXG4gIHBhZGRpbmc6IDFlbSAyMCVcblxuLm1lYW4tY29udGFpbmVyIC5tZWFuLW5hdiB1bCBsaSBsaSBsaSBsaSBsaSBhXG4gIHdpZHRoOiA1MCVcbiAgcGFkZGluZzogMWVtIDI1JVxuXG4ubWVhbi1jb250YWluZXIgLm1lYW4tbmF2IHVsIGxpIGE6aG92ZXJcbiAgYmFja2dyb3VuZDogIzI1MjUyNVxuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSlcblxuLm1lYW4tY29udGFpbmVyIC5tZWFuLW5hdiB1bCBsaSBhLm1lYW4tZXhwYW5kXG4gIG1hcmdpbi10b3A6IDFweFxuICB3aWR0aDogMjZweFxuICBoZWlnaHQ6IDI4cHhcbiAgcGFkZGluZzogMTBweCAhaW1wb3J0YW50XG4gIHRleHQtYWxpZ246IGNlbnRlclxuICBwb3NpdGlvbjogYWJzb2x1dGVcbiAgcmlnaHQ6IDBcbiAgdG9wOiAwXG4gIHotaW5kZXg6IDJcbiAgZm9udC13ZWlnaHQ6IDcwMFxuICBiYWNrZ3JvdW5kOiAkd2hpdGVcbiAgYm9yZGVyOiAxcHggc29saWQgJGdyZWVuXG4gIC8vYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAkZ3JlZW4gIWltcG9ydGFudFxuICAvL2JvcmRlci1ib3R0b206IDFweCBzb2xpZCAkZ3JlZW4gIWltcG9ydGFudFxuXG4ubWVhbi1jb250YWluZXIgLm1lYW4tbmF2IHVsIGxpIGEubWVhbi1leHBhbmQ6aG92ZXJcbiAgYmFja2dyb3VuZDogJGdyZWVuXG4gIGNvbG9yOiAkd2hpdGVcblxuLm1lYW4tY29udGFpbmVyIC5tZWFuLXB1c2hcbiAgZmxvYXQ6IGxlZnRcbiAgd2lkdGg6IDEwMCVcbiAgcGFkZGluZzogMFxuICBtYXJnaW46IDBcbiAgY2xlYXI6IGJvdGhcblxuLm1lYW4tbmF2IC53cmFwcGVyXG4gIHdpZHRoOiAxMDAlXG4gIHBhZGRpbmc6IDBcbiAgbWFyZ2luOiAwXG5cbi8vIEZpeCBmb3IgYm94IHNpemluZyBvbiBGb3VuZGF0aW9uIEZyYW1ld29yayBldGMuXG4ubWVhbi1jb250YWluZXIgLm1lYW4tYmFyLCAubWVhbi1jb250YWluZXIgLm1lYW4tYmFyICpcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveFxuICAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94XG5cbi5tZWFuLXJlbW92ZVxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnRcbiIsIi8vQmFubmVyIFRhbGwgLSBUaGlzIGlzIGZvdW5kIG9uIHRoZSBob21lcGFnZSBvbmx5XG4uYmFubmVyLXRhbGxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKGltYWdlcy9ib2F0LmpwZylcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXJcbiAgZGlzcGxheTogZmxleFxuICBoZWlnaHQ6IDIwMHB4XG5cbiAgQGluY2x1ZGUgbWVkaWEoXCI+dGFibGV0XCIpXG4gICAgaGVpZ2h0OiA0NjVweFxuXG5cbiAgJl9fdGl0bGVcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXJcbiAgICBjb2xvcjogJHdoaXRlXG4gICAgZm9udC1mYW1pbHk6IHNlcmlmXG4gICAgZm9udC1zaXplOiAycmVtXG4gICAgZm9udC13ZWlnaHQ6ICRub3JtYWxcbiAgICBsaW5lLWhlaWdodDogMVxuICAgIG1hcmdpbjogMCAwIDFyZW0gMXJlbVxuICAgIHRleHQtc2hhZG93OiAycHggMnB4IDJweCAkY2hhcmNvYWxcblxuICAgIEBpbmNsdWRlIG1lZGlhKFwiPnRhYmxldFwiKVxuICAgICAgZm9udC1zaXplOiAzLjVyZW1cbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kXG4gICAgICBtYXJnaW46IDAgMCAycmVtIDJyZW1cblxuLy8gQmFubmVyIFN0YW5kYXJkIC0gVGhpcyBpcyBmb3VuZCBvbiB0aGUgbWFqb3JpdHkgb2YgdGhlIGludGVybmFsIHBhZ2VzXG4uYmFubmVyLXN0YW5kYXJkXG4gIGJhY2tncm91bmQ6ICRncmVlblxuICBjb2xvcjogJHdoaXRlXG4gIGRpc3BsYXk6IGZsZXhcblxuICBmbGV4LWZsb3c6IHJvdyB3cmFwXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoXG5cbiAgK3Jlc3BvbnNpdmUtc3RhY2tcblxuICBAaW5jbHVkZSBtZWRpYShcIj50YWJsZXRcIilcbiAgICBoZWlnaHQ6IDMzNXB4XG5cbiAgJl9fYm94XG4gICAgcGFkZGluZzogMXJlbSAycmVtXG5cbiAgJl9fdGl0bGVcbiAgICBmb250LWZhbWlseTogJHNlcmlmXG4gICAgZm9udC1zaXplOiAycmVtXG4gICAgZm9udC13ZWlnaHQ6ICRub3JtYWxcblxuICAmX190ZXh0XG5cbiAgJl9fbWVkaWFcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2xhdGVcblxuICAvLyBUSGlzIGlzIGZvdW5kIG9uIHRoZSBBcHByb2FjaCBQYWdlXG4gICZfX21lZGlhLWFwcHJvYWNoXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2ltYWdlcy9tZWV0aW5nLmpwZylcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyXG5cbiAgICBAaW5jbHVkZSBtZWRpYShcIjw9dGFibGV0XCIpXG4gICAgICBoZWlnaHQ6IDMwMHB4XG5cbiAgLy8gVGhpcyBpcyBmb3VuZCBvbiB0aGUgTGVhZGVyc2hpcCBwYWdlXG4gICZfX21lZGlhLWxlYWRlcnNoaXBcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vaW1hZ2VzL3Blb3BsZS5qcGcpXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlclxuXG4gICAgQGluY2x1ZGUgbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgICAgaGVpZ2h0OiAzMDBweFxuXG4vLyBCYW5uZXIgUGFub3JhbWEgLSBUaGlzIGlzIGZvdW5kIG9uIHRoZSBOZXdzIHBhZ2Vcbi5iYW5uZXItcGFub3JhbWFcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2ltYWdlcy90cmVlcy5qcGcpXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlclxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyXG4gIGhlaWdodDogMjU1cHhcbiIsIi5jYXJkLWRpcHRpY1xuICBkaXNwbGF5OiBmbGV4XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAkYm9yZGVyQ29sb3JcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRib3JkZXJDb2xvclxuXG4gICtyZXNwb25zaXZlLXN0YWNrXG5cbiAgJl9fYm94XG4gICAgcGFkZGluZzogMnJlbSAxcmVtXG5cbiAgICBAaW5jbHVkZSBtZWRpYShcIj50YWJsZXRcIilcbiAgICAgIHBhZGRpbmc6IDJyZW0gMXJlbSAycmVtIDJyZW1cblxuICAgICY6bnRoLWNoaWxkKDIpXG4gICAgICBAaW5jbHVkZSBtZWRpYShcIj50YWJsZXRcIilcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAkYm9yZGVyQ29sb3JcbiAgICAgICAgcGFkZGluZzogMnJlbSAycmVtIDJyZW0gMXJlbVxuXG4gICZfX3RpdGxlXG4gICAgK3N0YW5kYXJkLWhlYWRpbmcoKSAvL01peGluIGNhbiBiZSBmb3VuZCBpbiB0eXBvZ3JhcGh5XG4gICAgdGV4dC1hbGlnbjogY2VudGVyXG5cbiAgJl9fbWVkaWFcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JlZW5cbiAgICBoZWlnaHQ6IDE1MHB4XG4gICAgaW1nXG5cbiAgJl9fdGV4dFxuICAgIHRleHQtYWxpZ246IGNlbnRlclxuXG4gIHVsXG4gICAgdGV4dC1hbGlnbjogY2VudGVyXG4gICAgbGlcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9ja1xuICAgICAgbGlzdC1zdHlsZTogbm9uZVxuXG4gICZfX2xpbmtcbiAgICBkaXNwbGF5OiBibG9ja1xuXG5cbi8vIENhcmQgQmlvIC0gVGhlc2UgYXJlIGZvdW5kIG9uIHRoZSBMZWFkZXJzaGlwIHBhZ2Vcbi5jYXJkLWJpb1xuICBkaXNwbGF5OiBmbGV4XG4gIHBhZGRpbmctYm90dG9tOiAycmVtXG5cbiAgK3Jlc3BvbnNpdmUtc3RhY2tcblxuICAmX19tZWRpYVxuICAgIGJhY2tncm91bmQtY29sb3I6ICRncmVlblxuICAgIGhlaWdodDogMzU1cHhcblxuICAgIGltZ1xuXG4gICZfX2JveFxuICAgIGZsZXg6IDRcbiAgICBwYWRkaW5nLXRvcDogMXJlbVxuICAgIEBpbmNsdWRlIG1lZGlhKFwiPnRhYmxldFwiKVxuICAgICAgcGFkZGluZy1sZWZ0OiAycmVtXG4gICAgICBwYWRkaW5nLXRvcDogMFxuXG4gICZfX3RpdGxlXG4gICAgK3N0YW5kYXJkLWhlYWRpbmcoKSAvL01peGluIGNhbiBiZSBmb3VuZCBpbiB0eXBvZ3JhcGh5XG5cbiAgJl9fc3VidGl0bGVcbiAgICBjb2xvcjogJGdyYXBoaXRlXG5cbiAgJl9fdGV4dFxuXG4gICAgKiArICpcbiAgICAgIG1hcmdpbi10b3A6IDFyZW1cblxuXG4vLyBDYXJkIGFydGljbGUgLSBUaGVzZSBhcmUgZm91bmQgb24gdGhlIE5ld3MgYW5kIEluc2lnaHRzIHBhZ2Vcbi5jYXJkLWFydGljbGVcblxuXG4gICZfX2JveFxuICAgIGJveC1zaGFkb3c6IDAgMXB4IDAgJGdyZWVuXG4gICAgK3ZlcnQtcGFkZGluZygxLDEpXG5cbiAgICAqICsgKlxuICAgICAgbWFyZ2luLXRvcDogMXJlbVxuXG4gIGgyXG4gICAgK3N0YW5kYXJkLWhlYWRpbmcoKSAvL01peGluIGNhbiBiZSBmb3VuZCBpbiB0eXBvZ3JhcGh5XG5cbiAgc21hbGxcbiAgICBjb2xvcjogJGdyYXBoaXRlXG4gICAgZm9udC1zaXplOiAuNzVyZW1cblxuICBwXG4iLCIvL1xuLy9DVEFzIC0gQ2FsbCB0byBBY3Rpb24gbW9kdWxlc1xuLy9cblxuLy9Db250YWN0IENUQVxuLy9UaGlzIGlzIGZvdW5kIG9uIHRoZSBob21lcGFnZSBvbmx5IHJpZ2h0IG5vd1xuLmN0YS1jb250YWN0XG4gIGJhY2tncm91bmQtY29sb3I6ICRzbGF0ZVxuICBkaXNwbGF5OiBmbGV4XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcblxuXG4gICZfX2JveFxuICAgIGRpc3BsYXk6IGZsZXhcbiAgICBwYWRkaW5nOiAxcmVtIDJyZW1cblxuICAgICtyZXNwb25zaXZlLXN0YWNrXG5cbiAgJl9fdGV4dFxuICAgIGZsZXg6IDRcbiAgICBtYXJnaW46IDBcblxuICAmX19idXR0b25cbiAgICBmbGV4OiAxXG4gICAgQGluY2x1ZGUgbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgICAgbWFyZ2luLXRvcDogMjBweFxuXG5cbi8vVmlkZW8gdGVhc2VyIENUQVxuLy9UaGlzIGlzIGZvdW5kIG9uIHRoZSBob21lcGFnZSBvbmx5IHJpZ2h0IG5vd1xuLmN0YS10ZWFzZXJcbiAgZGlzcGxheTogZmxleFxuICBmbGV4LWZsb3c6IHJvdyB3cmFwXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoXG5cbiAgQGluY2x1ZGUgbWVkaWEoXCI8PXRhYmxldFwiKVxuICAgIGZsZXgtZmxvdzogY29sdW1uXG5cbiAgJl9fYm94XG4gICAgLy9mbGV4OiAyXG4gICAgcGFkZGluZzogMXJlbSAycmVtXG5cbiAgJl9fdGl0bGVcbiAgICArc3RhbmRhcmQtaGVhZGluZygpIC8vTWl4aW4gY2FuIGJlIGZvdW5kIGluIHR5cG9ncmFwaHlcblxuICAmX190ZXh0XG5cbiAgJl9fYnV0dG9uXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4gICAgbWFyZ2luLXRvcDogMXJlbVxuXG4gICZfX21lZGlhXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2ltYWdlcy9tZWV0aW5nLmpwZylcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyXG5cbiAgICBAaW5jbHVkZSBtZWRpYShcIjw9dGFibGV0XCIpXG4gICAgICBoZWlnaHQ6IDMwMHB4XG5cblxuLy9DZW50ZXJlZCBDVEFcbi8vVGhpcyBpcyBmb3VuZCBvbiB0aGUgaG9tZXBhZ2Ugb25seSByaWdodCBub3dcbi5jdGEtY2VudGVyXG4gIHBhZGRpbmc6IDJyZW1cbiAgdGV4dC1hbGlnbjogY2VudGVyXG5cbiAgJl9fdGl0bGVcbiAgICArc3RhbmRhcmQtaGVhZGluZygpIC8vTWl4aW4gY2FuIGJlIGZvdW5kIGluIHR5cG9ncmFwaHlcblxuICAmX190ZXh0XG5cbiAgJl9fYnV0dG9uXG4gICAgbWFyZ2luLXRvcDogMXJlbVxuXG5cbi8vU3Vic2NyaWJlIENUQSAtIFRoaXMgaXMgZm91bmQgYXQgdGhlIHRvcCBvZiB0aGUgZm9vdGVyXG4uY3RhLXN1YnNjcmliZVxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JlZW5cbiAgY29sb3I6ICR3aGl0ZVxuICArdmVydC1wYWRkaW5nKDEsMSlcblxuICAmX190aXRsZVxuICAgIGZvbnQtZmFtaWx5OiAkc2VyaWZcbiAgICBtYXJnaW46IDBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXJcblxuICAmX19ib3hcbiAgICBkaXNwbGF5OiBmbGV4XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcblxuICAvLyBUT0RPIHVzZSBjb2wgY2xhc3MgaW5zdGVhZCBmb3Igd2lkdGhcbiAgJl9faW5wdXQtYWRkLW9uXG4gICAgZGlzcGxheTogZmxleFxuICAgIHdpZHRoOiA4LzEyICogMTAwJVxuXG4gICZfX2lucHV0XG4gICAgZmxleDogMVxuXG4gICZfX2J1dHRvblxuICAgIG1hcmdpbi1sZWZ0OiAxMHB4XG4gICAgLy8gVGFyZ2V0aW5nIGFsbCB0aGUgc3VibWl0cyBnbG9iYWxseSB3aXRoIGJ1dHRvbiBzdHlsZSByZXF1aXJlcyBvdmVyd3JpdGluZyBpdCBoZXJlIGJlY2F1c2Ugb2YgZ3JlZW4gYmFja2dyb3VuZFxuICAgIGNvbG9yOiAkd2hpdGUgIWltcG9ydGFudFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICR3aGl0ZSAhaW1wb3J0YW50XG5cblxuLy9TaWRlYmFyIENUQSAtIFRoaXMgaXMgZm91bmQgb24gaW50ZXJuYWwgcGFnZXMgb25seVxuLmN0YS1zaWRlYmFyXG4gIEBpbmNsdWRlIG1lZGlhKFwiPnRhYmxldFwiKVxuICAgIHBhZGRpbmc6IDFyZW0gMCAwIDNyZW1cblxuICAmX19tZWRpYVxuICAgIGJhY2tncm91bmQtY29sb3I6ICRncmVlblxuICAgIEBpbmNsdWRlIG1lZGlhKFwiPnRhYmxldFwiKVxuICAgICAgaGVpZ2h0OiAxODBweFxuXG4gICAgaW1nXG5cbiAgJl9fdGl0bGVcbiAgICBjb2xvcjogJGdyZWVuXG4gICAgZm9udC1mYW1pbHk6ICRzZXJpZlxuICAgIGZvbnQtc2l6ZTogMS4yNXJlbVxuICAgIGZvbnQtd2VpZ2h0OiAkbm9ybWFsXG4gICAgK3ZlcnQtbWFyZ2luKC41LC41KVxuXG4gICZfX3RleHRcblxuICAmX19idXR0b25cbiAgICBtYXJnaW4tdG9wOiAxcmVtXG5cblxuLy9Tb2NpYWwgQ1RBIC0gVGhlc2UgYXJlIGN1cnJlbnRseSBmb3VuZCBhdCB0aGUgYm90dG9tIG9mIHRoZSBibG9nIHBvc3RzXG4uY3RhLXNvY2lhbFxuICBwYWRkaW5nLWxlZnQ6IDFyZW1cblxuICAuaWNvblxuICAgIGZpbGw6ICRncmVlblxuXG4gICAgJjpob3ZlclxuICAgICAgZmlsbDogJGdyYXBoaXRlXG4iLCIvL0Zvb3RlclxuJGZvb3Rlci1oZWFkZXItbmF2OiBUcmVidWNoZXQgTVNcblxuXG4lbWVudVxuXHRsaXN0LXN0eWxlOiBub25lXG5cdG1hcmdpbi1sZWZ0OiAwXG5cdG1hcmdpbi1ib3R0b206IDBcblx0cGFkZGluZy1sZWZ0OiAwXG5cdHVsXG5cdFx0bGlzdC1zdHlsZTogbm9uZVxuXHRcdG1hcmdpbi1sZWZ0OiAwXG5cdFx0bWFyZ2luLWJvdHRvbTogMFxuXHRcdHBhZGRpbmctbGVmdDogMFxuXG5cbi8vU29tZXRoaW5nIGFjY2Vzc2libGUgdG8gaGlkZSB0ZXh0IGluIGxvZ29zXG4udmlzdWFsbHloaWRkZW5cbiAgYm9yZGVyOiAwXG4gIGNsaXA6IHJlY3QoMCAwIDAgMClcbiAgaGVpZ2h0OiAxcHhcbiAgbWFyZ2luOiAtMXB4XG4gIG92ZXJmbG93OiBoaWRkZW5cbiAgcGFkZGluZzogMFxuICBwb3NpdGlvbjogYWJzb2x1dGVcbiAgd2lkdGg6IDFweFxuXG5cbmZvb3RlclxuXHRwYWRkaW5nLWJvdHRvbTogMjA1cHhcblxuLm5hdi1mb290ZXJcblx0cGFkZGluZzogMzBweCAyMHB4IDIwcHhcblx0dGV4dC1hbGlnbjogY2VudGVyXG5cblx0QGluY2x1ZGUgbWVkaWEoXCI+PXRhYmxldFwiLCBcIj49ZGVza3RvcFwiKVxuXHRcdGRpc3BsYXk6IGZsZXhcblx0XHR0ZXh0LWFsaWduOiBsZWZ0XG5cblx0Jl9fbGlua1xuXHRcdGZvbnQtc2l6ZTogMTRweFxuXHQmX19ib3hcblx0XHRwYWRkaW5nOiAwIDEwcHhcblxuXHQmX19ib3gtbmFycm93XG5cdFx0cGFkZGluZzogMCAxMHB4XG5cblx0Jl9fYnV0dG9uXG5cdFx0ZGlzcGxheTogYmxvY2tcblx0XHRjb2xvcjogJGZvb3Rlci10ZXh0XG5cdFx0Ym9yZGVyOiAxcHggc29saWQgJGZvb3Rlci10ZXh0XG5cdFx0Zm9udC1zaXplOiAxNnB4XG5cdFx0bWFyZ2luLWJvdHRvbTogMjVweFxuXHRcdHdvcmQtd3JhcDogYnJlYWstd29yZCAvL1B1dCB0aGlzIGluIGdsb2JhbCBidXR0b25zP1xuXHQuZm9vdGVyLW5hdl9fbWFqb3Jcblx0XHRAZXh0ZW5kICVtZW51XG5cdFx0bWFyZ2luLXRvcDogMFxuXHRcdD4gbGlcblx0XHRcdGZvbnQtZmFtaWx5OiAkZm9vdGVyLWhlYWRlci1uYXZcblx0XHRcdGZvbnQtc2l6ZTogMTZweFxuXHRcdGFcblx0XHQgIGNvbG9yOiAkY2hhcmNvYWxcblx0XHQgICY6aG92ZXJcblx0XHRcdCAgY29sb3I6ICRncmVlblxuXG5cdC8vIFN1Yi1uYXZpZ2F0aW9uLCB3aGljaCBoaWRlcyBvbiBzbWFsbCBzaXplc1xuXHQmX19zdWItbGlua3Ncblx0XHRmb250LXNpemU6IDE0cHhcblx0XHRkaXNwbGF5OiBub25lXG5cblx0XHRAaW5jbHVkZSBtZWRpYShcIj49dGFibGV0XCIsIFwiPj1kZXNrdG9wXCIpXG5cdFx0XHRkaXNwbGF5OiBibG9ja1xuXG4uZm9vdGVyLWNvcHlyaWdodFxuXHRib3JkZXItdG9wOiAxcHggc29saWQgJGNsb3VkXG5cdHBhZGRpbmc6IDIwcHggMzBweCAwXG5cdGRpc3BsYXk6IGZsZXhcblx0Jl9fbG9nb1xuXHRcdGRpc3BsYXk6IG5vbmVcblxuXHRcdEBpbmNsdWRlIG1lZGlhKFwiPj10YWJsZXRcIiwgXCI+PWRlc2t0b3BcIilcblx0XHRcdGRpc3BsYXk6IGJsb2NrXG5cdFx0XHR3aWR0aDogNDg0cHhcblxuXHQmX19ib3hcblx0XHR0ZXh0LWFsaWduOiBjZW50ZXJcblxuXHRcdEBpbmNsdWRlIG1lZGlhKFwiPj10YWJsZXRcIiwgXCI+PWRlc2t0b3BcIilcblx0XHRcdHRleHQtYWxpZ246IHJpZ2h0XG5cblx0XHRzbWFsbCwgLm5hdi1taW5vclxuXHRcdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrXG5cdFx0XHRmb250LXNpemU6IDE0cHhcblxuXHRcdFx0QGluY2x1ZGUgbWVkaWEoXCI+PXRhYmxldFwiLCBcIj49ZGVza3RvcFwiKVxuXHRcdFx0XHRmb250LXNpemU6IDEycHhcblx0XHQubmF2LW1pbm9yXG5cdFx0XHRAZXh0ZW5kICVtZW51XG5cdFx0XHRsaVxuXHRcdFx0ICBhXG5cdFx0XHQgICAgZm9udC1zaXplOiAxNHB4XG5cblx0XHRcdCAgICBAaW5jbHVkZSBtZWRpYShcIj49dGFibGV0XCIsIFwiPj1kZXNrdG9wXCIpXG5cdFx0XHQgICAgICBmb250LXNpemU6IDEycHhcblxuLmZvb3Rlci1kaXNjbGFpbWVyXG5cdGJvcmRlcjogMXB4IHNvbGlkICRmb290ZXItdGV4dFxuXHR0ZXh0LWFsaWduOiBjZW50ZXJcblx0cGFkZGluZzogMjBweFxuXHRtYXJnaW46IDUwcHggYXV0byAxMHB4XG5cdHdpZHRoOiAxMS8xMiAqIDEwMCVcblxuXHRAaW5jbHVkZSBtZWRpYShcIj49dGFibGV0XCIsIFwiPj1kZXNrdG9wXCIpXG5cdFx0d2lkdGg6IDkvMTIgKiAxMDAlXG5cblx0aDYsIHAsIHVsXG5cdFx0Zm9udC1zaXplOiAxNHB4XG5cdFx0QGluY2x1ZGUgbWVkaWEoXCI+PXRhYmxldFwiLCBcIj49ZGVza3RvcFwiKVxuXHRcdFx0Zm9udC1zaXplOiAxMnB4XG5cdHBcblx0XHRtYXJnaW4tYm90dG9tOiAwXG5cdGg2XG5cdFx0bWFyZ2luOiAwXG5cdHVsXG5cdFx0QGV4dGVuZCAlbWVudVxuXHRcdG1hcmdpbi10b3A6IDBcblx0XHRsaVxuXHRcdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrXG5cdFx0XHRtYXJnaW46IDAgMTBweFxuIiwiaGVhZGVyXG4gIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZVxuICBwYWRkaW5nOiAwIDJyZW1cbiAgLy8gTmVlZCBhIGNvbnNpc3RlbnQgbWluIGhlaWdodCB0byBoZWxwIHBvc2l0aW9uIG1vYmlsZSBtZW51IHdpdGhvdXQgbGVhdmluZyBhIGdhcFxuICBAaW5jbHVkZSBtZWRpYShcIjx0YWJsZXRcIilcbiAgICBtaW4taGVpZ2h0OiA1MHB4XG5cbi5oZWFkZXJfX2xvZ29cbiAgZGlzcGxheTogYmxvY2tcbiAgd2lkdGg6IDI3NXB4XG5cbiAgQGluY2x1ZGUgbWVkaWEoXCI+PTQ4MHB4XCIsIFwiPHRhYmxldFwiKVxuICAgIHdpZHRoOiAzMzBweFxuXG4gIEBpbmNsdWRlIG1lZGlhKFwiPj10YWJsZXRcIilcbiAgICB3aWR0aDogNTUwcHhcbiIsIi8vLSBUaGlzIGNvbnRhaW5lciBob2xkIHRoZSBtYWluIGNvbnRlbnQgb24gZWFjaCBwYWdlXG4vLy0gSXQgaXMgZm91bmQgb24gYWxsIGludGVybmFsIHBhZ2VzXG5cbi8vLSBBbGwgXCJNYWluXCIgY2xhc3NlcyBoYXZlIHNoYXJlIHRoZXNlIHJ1bGVzXG4lbWFpblxuICBkaXNwbGF5OiBmbGV4XG4gIHBhZGRpbmc6IDFyZW0gMnJlbVxuXG4gICtyZXNwb25zaXZlLXN0YWNrXG5cbi5tYWluLXN0YW5kYXJkXG4gIEBleHRlbmQgJW1haW5cblxuICAmX19jb250ZW50XG5cbiAgJl9fdGV4dFxuXG4gICAgKiArICpcbiAgICAgIG1hcmdpbi10b3A6IDFyZW1cblxuICAgIGgyXG4gICAgICArc3RhbmRhcmQtaGVhZGluZygpXG5cblxuLy8gTWFpbiBjb250ZW50IGJsb2NrIG9uIExlYWRlcnNoaXAgcGFnZVxuLm1haW4tYmlvc1xuICBAZXh0ZW5kICVtYWluXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW5cblxuXG4vLyBNYWluIGNvbnRlbnQgYmxvY2sgb24gTmV3cyBwYWdlXG4ubWFpbi1uZXdzXG4gIEBleHRlbmQgJW1haW5cblxuXG4vLyBNYWluIGNvbnRlbnQgYmxvY2sgb24gQmxvZyBQb3N0IHBhZ2Vcbi5tYWluLXBvc3RcbiAgQGV4dGVuZCAlbWFpblxuXG4gICZfX3RleHRcblxuICAgICogKyAqXG4gICAgICBtYXJnaW4tdG9wOiAxcmVtXG5cbiAgICBoMiwgaDNcbiAgICAgICtzdGFuZGFyZC1oZWFkaW5nKClcblxuICAgIGZpZ2NhcHRpb25cbiAgICAgIGNvbG9yOiAkZ3JhcGhpdGVcbiAgICAgIGZvbnQtc2l6ZTogLjc1cmVtXG4gICAgICBtYXJnaW4tdG9wOiAwXG4iLCJpbnB1dFt0eXBlPVwiZW1haWxcIl0sXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdLFxuaW5wdXRbdHlwZT1cInBhc3N3b3JkXCJdLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXSxcbmlucHV0W3R5cGU9XCJ0ZWxcIl0sXG5pbnB1dFt0eXBlPVwidGV4dFwiXSxcbmlucHV0W3R5cGU9XCJ1cmxcIl0sXG5pbnB1dFt0eXBlPVwiY29sb3JcIl0sXG5pbnB1dFt0eXBlPVwiZGF0ZVwiXSxcbmlucHV0W3R5cGU9XCJuYW1lXCJdLFxuaW5wdXRbdHlwZT1cImRhdGV0aW1lXCJdLFxuaW5wdXRbdHlwZT1cImRhdGV0aW1lLWxvY2FsXCJdLFxuaW5wdXRbdHlwZT1cIm1vbnRoXCJdLFxuaW5wdXRbdHlwZT1cInRpbWVcIl0sXG5pbnB1dFt0eXBlPVwid2Vla1wiXSxcbnNlbGVjdCxcbnRleHRhcmVhXG5cdGNvbG9yOiAkc2l0ZS10ZXh0LWNvbG9yXG5cdGJvcmRlcjogMXB4IHNvbGlkICRib3JkZXJDb2xvclxuXHRib3JkZXItcmFkaXVzOiAwXG5cdHBhZGRpbmc6IDE1cHhcblx0ZGlzcGxheTogYmxvY2tcblx0d2lkdGg6IDEwMCVcblxuXG5cdCY6Zm9jdXNcblx0XHQvL2NvbG9yOlxuXHQvL1x0Ym9yZGVyLWNvbG9yOlxuXHRcdG91dGxpbmU6IG5vbmVcblxubGFiZWxcbiAgZGlzcGxheTogYmxvY2tcblxuaW5wdXRbdHlwZT1cImJ1dHRvblwiXSxcbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl1cbiAgLy8gYW55IGRlZmF1bHQgYnV0dG9uIHN0eWxlcyB0aGF0IG5lZWQgdG8gYmUgZGlmZmVyZW50IG9uIGZvcm1zIGdvIGhlcmVcbiAgZGlzcGxheTogYmxvY2tcblxuLmZvcm0tc3RhbmRhcmRcbiAgJl9fY2hlY2tib3hcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcblxuICAmX19jaGVja2JveCArIGxhYmVsXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */
/*# sourceMappingURL=data:application/json;base64, */